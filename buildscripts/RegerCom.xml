
<project name="RegerCom" default="QuickBuild" basedir=".">
  <description>
        The Best Darn Build Process This Side of Sanity
  </description>

  <!-- Import properties file -->
  <property file="Regercom.properties"/>


  <!-- Create a buildnumber -->
  <target name="buildnumber" description="Create a build number.">
     <echo message="Generating build number."/>
     <buildnumber/>
  </target>

  <!-- Create a timestamp -->
  <target name="timestamp" description="Create the dirs" depends="buildnumber">
  	 <echo message="Generating timestamp."/>
     <tstamp>
        <format property="build.time" pattern="yyyy-MM-dd-(hh-mm-ssaa)"/>
     </tstamp>
  </target>

  <!-- Import build number file -->
  <property file="build.number"/>

  <!-- Set internal script properties -->
  <property name="tomcat.app.name" value="RegerCom"/>
  <property name="builddir" value="${builds.directory}"/>
  <property name="lastbuild" value="${builddir}/lastbuild/${tomcat.app.name}"/>
  <property name="wardir" value="${builddir}/WARs/${tomcat.app.name}"/>
  <property name="javasrc" value="${builddir}/lastbuild/${tomcat.app.name}/WEB-INF/classes"/>
  <property name="sourcedir" value="${source.root.directory}"/>
  <property name="tomcatjarsforclasspath" value="
        ${tomcat.install.directory}/common/lib/jsp-api.jar;
        ${tomcat.install.directory}/common/lib/servlet-api.jar;
        ${tomcat.install.directory}/server/lib/catalina.jar;
        ${tomcat.install.directory}/server/lib/catalina-optional.jar;
        ${tomcat.install.directory}/server/lib/catalina-ant.jar;
        ${tomcat.install.directory}/server/lib/servlets-default.jar;
  "/>
  <property name="thirdpartylibs" value="
        ${sourcedir}/WEB-INF/lib/activation.jar;
        ${sourcedir}/WEB-INF/lib/commons-beanutils.jar;
        ${sourcedir}/WEB-INF/lib/commons-codec-1.2.jar;
        ${sourcedir}/WEB-INF/lib/commons-collections.jar;
        ${sourcedir}/WEB-INF/lib/commons-dbcp-1.2.1.jar;
        ${sourcedir}/WEB-INF/lib/commons-digester.jar;
        ${sourcedir}/WEB-INF/lib/commons-fileupload-1.0.jar;
        ${sourcedir}/WEB-INF/lib/commons-httpclient-3.0-rc1.jar;
        ${sourcedir}/WEB-INF/lib/commons-logging.jar;
        ${sourcedir}/WEB-INF/lib/commons-pool-1.2.jar;
        ${sourcedir}/WEB-INF/lib/dwr.jar;
        ${sourcedir}/WEB-INF/lib/ehcache-1.1.jar;
        ${sourcedir}/WEB-INF/lib/FCKeditor-2.3.jar;
        ${sourcedir}/WEB-INF/lib/jakarta-oro-2.0.8.jar;
        ${sourcedir}/WEB-INF/lib/jazzy-core.jar;
        ${sourcedir}/WEB-INF/lib/jcaptcha-all-1.0-RC2.0.1.jar;
        ${sourcedir}/WEB-INF/lib/jcommon-1.0.0-pre2.jar;
        ${sourcedir}/WEB-INF/lib/jdom.jar;
        ${sourcedir}/WEB-INF/lib/jfreechart-1.0.0-pre2.jar;
        ${sourcedir}/WEB-INF/lib/jtidy-r8-SNAPSHOT.jar;
        ${sourcedir}/WEB-INF/lib/log4j-1.2.8.jar;
        ${sourcedir}/WEB-INF/lib/mail.jar;
        ${sourcedir}/WEB-INF/lib/milStd2525_png.jar;
        ${sourcedir}/WEB-INF/lib/mysql-connector-java-3.1.8-bin.jar;
        ${sourcedir}/WEB-INF/lib/omcorba.jar;
        ${sourcedir}/WEB-INF/lib/omj3d.jar;
        ${sourcedir}/WEB-INF/lib/omsvg.jar;
        ${sourcedir}/WEB-INF/lib/openmap.jar;
        ${sourcedir}/WEB-INF/lib/oscache-2.2.jar;
        ${sourcedir}/WEB-INF/lib/password1_4.jar;
        ${sourcedir}/WEB-INF/lib/proxool-0.8.3.jar;
        ${sourcedir}/WEB-INF/lib/resolver.jar;
        ${sourcedir}/WEB-INF/lib/rome-0.7.jar;
        ${sourcedir}/WEB-INF/lib/urlrewrite-1.2.jar;
        ${sourcedir}/WEB-INF/lib/xercesSamples.jar;
        ${sourcedir}/WEB-INF/lib/xmlParserAPIs.jar;
        ${sourcedir}/WEB-INF/lib/xmlrpc-1.2-b1.jar;
        ${sourcedir}/WEB-INF/lib/xpp3_min-1.1.3.4.I.jar;
        ${sourcedir}/WEB-INF/lib/xstream-1.0.2.jar;
        ${sourcedir}/WEB-INF/lib/yguard.jar;
        ${sourcedir}/WEB-INF/lib/chiba-1.1.1.jar;
        ${sourcedir}/WEB-INF/lib/commons-jxpath-1.2.jar;
        ${sourcedir}/WEB-INF/lib/xsltc.jar;
        ${sourcedir}/WEB-INF/lib/dom3-xercesImpl.jar;
        ${sourcedir}/WEB-INF/lib/dom3-xml-apis.jar;
        ${sourcedir}/WEB-INF/lib/jcs-1.2.6.5.jar;
        ${sourcedir}/WEB-INF/lib/commons-lang-2.1.jar;
        ${sourcedir}/WEB-INF/lib/concurrent.jar;
        ${sourcedir}/WEB-INF/lib/sequoia-driver.jar;
        ${sourcedir}/WEB-INF/lib/asm.jar;
        ${sourcedir}/WEB-INF/lib/asm-attrs.jar;
        ${sourcedir}/WEB-INF/lib/asm-util.jar;
        ${sourcedir}/WEB-INF/lib/cglib-2.1.jar;
        ${sourcedir}/WEB-INF/lib/cglib-nodep-2.1.jar;
        ${sourcedir}/WEB-INF/lib/commons-logging-api.jar;
        ${sourcedir}/WEB-INF/lib/dom4j-1.5.2.jar;
        ${sourcedir}/WEB-INF/lib/hibernate3.jar;
  "/>







  <!-- If the build process fails saying that a context doesn't exist, just go into the web-based tomcat manager and create an app named ${tomcat.app.name}... for the script to be able to remove an app it needs to be there in the first place.  Probably a better workaround in Ant, but I haven't researched it yet. Yes, this solution sucks.  Joe -->


  <!-- First, Delete any files in the lastbuild folder -->
  <target name="cleanuplastbuild" description="Cleans up the last build" depends="timestamp">
    <delete dir="${lastbuild}"/>
  </target>

  <!-- This target takes all files required for the build and puts them into lastbuild which is basically a temp building location -->
  <!-- This is done so that I can have Vars.java and VarsDev.java, choosing which one to put into the build at buildtime -->
  <target name="movefilestolastbuild" description="Moves files to the lastbuild directory." depends="cleanuplastbuild">
      <copy todir="${lastbuild}">
        <fileset dir="${sourcedir}" excludes="**.*Thumbs.db"/>
      </copy>
  </target>




  <!-- Compile the app-->
   <target name="compile" description="compile the source" depends="movefilestolastbuild">
  	 <echo message="Compiling Java code."/>
       <javac srcdir="${javasrc}" excludes="**.x" debug="on" classpath="${tomcatjarsforclasspath}; ${thirdpartylibs}"/>
   </target>
   
   <!-- Create reger.jar package -->
   <target name="createregerjar" description="Creates the re-usable regercore.jar package" depends="compile">
        <echo message="Creating regercore.jar."/>
        <jar jarfile="${builddir}/regercore.jar">
            <fileset dir="${javasrc}">
                <include name="reger/core/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </jar>
   </target>


   
   <!-- Package the app -->
   <target name="package" description="Create the WAR file" depends="compile">
        <echo message="Packaging ${tomcat.app.name}'s war file."/>
        <delete>
            <fileset dir="." includes="*.war"/>
        </delete>
        <war destfile="${tomcat.app.name}-(bld${build.number})-${build.time}.war" webxml="${lastbuild}/WEB-INF/web.xml">
            <fileset dir="${lastbuild}">
                <exclude name="**/*.java"/>
                <exclude name="**/web.xml"/>
            </fileset>
        </war>
		<copy file="${tomcat.app.name}-(bld${build.number})-${build.time}.war" todir="${builddir}"/>
   </target>

   <target name="packagewithsource" description="Backup source files" depends="package">
        <echo message="Backing up ${tomcat.app.name}'s source."/>
        <jar jarfile="${builddir}/${tomcat.app.name}-(bld${build.number})-${build.time}-src.jar">
            <fileset dir="./">
                <exclude name="builds/**"/>
            </fileset>
        </jar>
   </target>

   
    <!-- Tomcat Deployers -->
    <target name="undeploy" description="Undeploys the Web Application" depends="packagewithsource">
        <ant antfile="TomcatDeploy.xml" target="undeployApp" inheritAll="true"/> 
    </target>
    <target name="deploy" description="Deploys the Web Application" depends="undeploy">
    	  <ant antfile="TomcatDeploy.xml" target="deployApp" inheritAll="true"/> 
    </target>
    <target name="deployNew" description="Deploys the Web Application" depends="packagewithsource">
        <ant antfile="TomcatDeploy.xml" target="deployNewApp" inheritAll="true"/> 
    </target>

    
    <!-- Dev WAR file builders -->
    <!-- Use to build WAR file to manually deploy. -->
    <!-- It will be called ROOT.war and will be found in the root build directory -->
    <target name="buildWar" description="Builds a war file and does not deploy it." depends="packagewithsource">
        <echo message="Creating ROOT.war for ${tomcat.app.name}."/>
        <copy file="${tomcat.app.name}-(bld${build.number})-${build.time}.war" tofile="${wardir}/ROOT.war" overwrite="true"/>
		<delete file="${tomcat.app.name}-(bld${build.number})-${build.time}.war"/>
    </target>

    <!-- Obfuscate with yGuard -->
    <target name="buildObfuscated" description="Builds an obfuscated jar." depends="compile">
        <jar destfile="${lastbuild}/WEB-INF/lib/reger.jar" basedir="${javasrc}" excludes="**/*.java" />
        <!-- I should now delete the classes -->
        <taskdef name="obfuscate" classname="com.yworks.yguard.ObfuscatorTask" classpath="source/WEB-INF/lib/yguard.jar"/>
        <obfuscate mainclass="reger.core" logfile="obfuscationlog.xml">
            <inoutpair in="${lastbuild}/WEB-INF/lib/reger.jar" out="${lastbuild}/WEB-INF/lib/regerObfuscated.jar"/>
            <expose>
                <class classes="public" methods="public" fields="public">
                    <patternset>
                        <include name="**.*"/>
                    </patternset>
                </class>
            </expose>
        </obfuscate>
    </target>



    <!-- Create javaDoc -->
    <target name="createJavaDoc" description="Creates javadoc" depends="">
        <echo message="Creating javaDoc for ${tomcat.app.name}."/>
        <delete dir="${builddir}/javaDoc"/>

        <javadoc destdir="${builddir}/javaDoc" author="true" version="true" use="true" windowtitle="Reger.com javaDoc">

            <packageset dir="${sourcedir}/WEB-INF/classes" defaultexcludes="yes">
                <include name="reger/**" />
            </packageset>

            <doctitle><![CDATA[<h1>Reger.com</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2005 Reger.com. Confidential and proprietary. All Rights Reserved.</i>]]></bottom>

        </javadoc>

    </target>
	
    
    <target name="QuickBuild" description="Compile the java source and put in Tomcat working directory">
  	 	<echo message="Compiling Java code."/>
     	<copy todir="${lastbuild}" >
            <fileset dir="${sourcedir}" excludes="**/Thumbs.db"/>
        </copy>

     	<javac srcdir="${javasrc}" destdir="${quickbuild.compiled.destination.directory}" classpath="${tomcatjarsforclasspath}; ${thirdpartylibs}" excludes="**.x" debug="on" />
		<copy todir="${quickbuild.tomcat.root.directory}">
			<fileset dir="${lastbuild}">
			</fileset>
		</copy>
		<!--
		<ant antfile="TomcatDeploy.xml" target="reloadApp" inheritAll="true"/>
		-->
	</target>
    

    

</project>
