<%@ page import="reger.core.db.Db,
                 reger.core.db.Db"%>
<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.GROUPSSITE;
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEGROUPS;
pageProps.pathToAppRoot="../";
/*----------------------------------------------------*/
%>

<%@ include file="../globalheader.jsp" %>



<%
/*----------------------------------------------------*/
/*                  Main Body                         */
        StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/

//Get groupid
int groupid = -1;
if (request.getParameter("groupid")!=null && reger.core.Util.isinteger(request.getParameter("groupid"))){
    groupid = Integer.parseInt(request.getParameter("groupid"));
}

//Get incoming groupkey and groupadminkey
String incomingGroupKey = "";
if (request.getParameter("groupkey")!=null){
    incomingGroupKey = request.getParameter("groupkey");
}
String incomingGroupAdminKey = "";
if (request.getParameter("groupadminkey")!=null){
    incomingGroupAdminKey = request.getParameter("groupadminkey");
}

String groupName = "";
String groupDesc = "";
String groupKey = "";
String groupAdminKey = "";
boolean viewingEntriesRequiresGroupKey = false;
boolean userCanView = false;
boolean userIsAdminOfGroup = false;

mb.append("<br>");
mb.append("<br>");

//-----------------------------------
//-----------------------------------
String[][] rstGpDetails= Db.RunSQL("SELECT groupid, groupname, groupdescription, groupkey, groupadminkey, viewingentriesrequiresgroupkey FROM groups WHERE groupid='"+groupid+"'");
//-----------------------------------
//-----------------------------------
if (rstGpDetails!=null && rstGpDetails.length>0){
	for(int i=0; i<rstGpDetails.length; i++){
	    groupName = rstGpDetails[i][1];
	    groupDesc = rstGpDetails[i][2];
	    groupKey = rstGpDetails[i][3];
	    groupAdminKey = rstGpDetails[i][4];
	    if (rstGpDetails[i][5].equals("1")){
            viewingEntriesRequiresGroupKey = true;
        } else {
            viewingEntriesRequiresGroupKey = false;
        }
	    mb.append("<table cellpadding=10 width=100% cellspacing=0 border=0>");
        mb.append("<tr>");
        mb.append("<td valign=top bgcolor=#cccccc>");
        mb.append("<a href='group"+groupid+".xml?groupkey="+incomingGroupKey+"&groupadminkey="+incomingGroupAdminKey+"'>");
        mb.append("<img src='"+pageProps.pathToAppRoot+"images/xml-newsfeed.png' border=0 align=right>");
        mb.append("</a>");
        mb.append("<font face=arial size=+2>");
        mb.append("<b>");
        mb.append("Group: " + groupName);
        mb.append("</b>");
        mb.append("</font>");
        mb.append("<br>");
        mb.append("<font face=arial size=-2>");
        mb.append(groupDesc);
        mb.append("</font>");
        mb.append("</td>");
        mb.append("</tr>");
        mb.append("</table>");
	}
}

//Now check to see if this user can be here.
if (viewingEntriesRequiresGroupKey){
    if (incomingGroupKey.equals(groupKey)){
        userCanView = true;
    }
    if (incomingGroupAdminKey.equals(groupAdminKey)){
        userCanView = true;
        userIsAdminOfGroup = true;
    }
} else {
    userCanView = true;
}

//If it's the admin and there's an attempt to delete
if (userIsAdminOfGroup && pageProps.action.equals("delete")){
    if (request.getParameter("groupentryid")!=null && reger.core.Util.isinteger(request.getParameter("groupentryid"))){
        //-----------------------------------
        //-----------------------------------
        int count = Db.RunSQLUpdate("DELETE FROM groupentry WHERE groupentryid='"+request.getParameter("groupentryid")+"' AND groupid='"+groupid+"'");
        //-----------------------------------
        //-----------------------------------
    }
}


//Only display if the user can view
if (userCanView){

    mb.append("<table cellpadding=8 cellspacing=1 width=100% border=0>");

    String sql = "SELECT entrytitle, entryurl, entryextract, datetime, author, authorurl, groupentryid FROM groupentry WHERE groupid='"+groupid+"' ORDER BY datetime DESC";
    String sqlCount = "SELECT count(*) FROM groupentry WHERE groupid='"+groupid+"'";

    //Start paging
    //reger.core.Util.logtodb(sqlSelectCount+sqlFrom+sqlWhere+sqlEventid+sqlImagetagid+sqlLiveEntry);
    //-----------------------------------
    //-----------------------------------
    String[][] rstCount= Db.RunSQL(sqlCount);
    //-----------------------------------
    //-----------------------------------
    int recordcount = 0;
    if (rstCount!=null && rstCount.length>0){
        recordcount = Integer.parseInt(rstCount[0][0]);
    }

    //reger.core.Util.logtodb("ImageListHtml.java - recordcount=" + recordcount);

    int currentpage = 1;
    if (request.getParameter("currentpage")!=null && reger.core.Util.isinteger(request.getParameter("currentpage"))){
        currentpage = Integer.parseInt(request.getParameter("currentpage"));
    }

    if (currentpage<0){
        currentpage=1;
    }

    int perpage = 100;
    if (perpage<=0){
        perpage = 500;
    }


    StringBuffer pagingOut = new StringBuffer();
    if (recordcount>perpage){
        pagingOut.append("<tr>");
        pagingOut.append("<td colspan=2 bgcolor=#e6e6e6>");
        pagingOut.append(reger.pagingLinkPrint.getHtml(recordcount, currentpage, perpage, request));
        pagingOut.append("</td>");
        pagingOut.append("</tr>");
        //And finally put it on the page
        mb.append(pagingOut);
    }
    //Limit vars
    int limitMin = (currentpage * perpage) - perpage;
    int limitMax = perpage;
    String sqlLimit = " LIMIT "+ limitMin +","+ limitMax;

    //End paging


    //-----------------------------------
    //-----------------------------------
    String[][] rstEntryList= reger.core.db.Db.RunSQL(sql+sqlLimit);
    //-----------------------------------
    //-----------------------------------
    if (rstEntryList!=null && rstEntryList.length>0){
        for(int i=0; i<rstEntryList.length; i++){
            mb.append("<tr>");

            mb.append("<td valign=top align=center align=right nowrap>");
            if (userIsAdminOfGroup){
                mb.append("<font face=arial size=-2>");
                mb.append("<a href='group.log?groupid="+groupid+"&groupkey="+incomingGroupKey+"&groupadminkey="+incomingGroupAdminKey+"&action=delete&groupentryid="+rstEntryList[i][6]+"&currentpage="+currentpage+"'>");
                mb.append("Delete Entry");
                mb.append("</a>");
                mb.append("</font>");
            }
            mb.append("</td>");

            mb.append("<td width=100 valign=top align=right nowrap>");
            mb.append("<font face=arial size=-2>");
            mb.append(reger.core.TimeUtils.agoText(reger.core.TimeUtils.dbstringtocalendar(rstEntryList[i][3])));
            mb.append("</font>");
            mb.append("</td>");

            mb.append("<td valign=top>");
            mb.append("<font face=arial size=-1>");
            mb.append("<b>");
            mb.append("<a href=\""+reger.core.Util.cleanForHtml(rstEntryList[i][1])+"\">");
            mb.append(rstEntryList[i][0]);
            mb.append("</a>");
            mb.append("</b>");
            mb.append("</font>");
            if (!rstEntryList[i][4].equals("")){
                mb.append("<br>");
                mb.append("<font face=arial size=-2>");
                mb.append("Posted By: ");
                if (!rstEntryList[i][5].equals("")){
                    mb.append("<a href='"+rstEntryList[i][5]+"'>");
                    mb.append(rstEntryList[i][4]);
                    mb.append("</a>");
                } else {
                    mb.append(rstEntryList[i][4]);
                }
                mb.append("</font>");
            }
            mb.append("<br>");
            mb.append("<font face=arial size=-2>");
            mb.append(rstEntryList[i][2].replaceAll("<", "&lt;"));
            mb.append("</font>");
            mb.append("</td>");
            mb.append("</tr>");
        }
    } else {
        mb.append("<tr>");
        mb.append("<td valign=top colspan=3>");
        mb.append("<font face=arial size=-2>");
        mb.append("No entries posted to this group yet.");
        mb.append("</font>");
        mb.append("</td>");
    }

    mb.append("</table>");
} else {
    mb.append("<br>");
    mb.append("<br>");
    mb.append("<center>");
    mb.append("<font face=arial size=+1 color=#ff0000>");
    mb.append("<img src='"+pageProps.pathToAppRoot+"images/yellow-alert.gif' border=0>");
    mb.append("<br>");
    mb.append("This group is a private group.<br>Please enter a valid groupKey or groupAdminKey.");
    mb.append("</font>");
    mb.append("<font face=arial size=-1>");
    mb.append("<form action=group.log method=get>");
    mb.append("<input type=hidden name=groupid value='"+groupid+"'>");
    mb.append("<br>");
    mb.append("<b>groupKey:</b>");
    mb.append("<br>");
    mb.append("<input type=text name=groupkey size=15 maxlength=255 value=''>");
    mb.append("<br>");
    mb.append("<b>groupAdminKey:</b>");
    mb.append("<br>");
    mb.append("<input type=text name=groupadminkey size=15 maxlength=255 value=''>");
    mb.append("<br>");
    mb.append("<input type=submit value='Go'>");
    mb.append("</form>");
    mb.append("</font>");
    mb.append("</center>");
}

%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
        StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/


sc.append("");

%>


<%@ include file="../globalfooter.jsp" %>

