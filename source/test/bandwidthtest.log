<%@ page import="reger.SideColumn,
                 com.swabunga.spell.event.SpellCheckEvent,
                 reger.core.db.Db,
                 javax.crypto.spec.PBEKeySpec,
                 javax.crypto.spec.PBEParameterSpec,
                 java.security.InvalidKeyException,
                 java.security.NoSuchAlgorithmException,
                 javax.crypto.*,
                 java.io.*,
                 java.util.*"%>
<%@ page import="reger.core.Debug"%>


<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.PUBLICSITE;
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEPUBLICHOMEPAGE;
pageProps.pathToAppRoot="";
/*----------------------------------------------------*/
%>

<%//@ include file="../globalheader.jsp" %>

<%
/*----------------------------------------------------*/
/*                  Main Body                         */
            StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/



try{

    mb.append("Start download.<br>");

    //Start time
    Calendar startTime = Calendar.getInstance();

    //Download the image
    reger.http.Http http = new reger.http.Http();
    http.getUrl("http://reviews.cnet.com/i/is/image500.jpg", -1);

    //End Time
    Calendar endTime = Calendar.getInstance();

    mb.append("End download.<br>");

    //Calculations
    long millisElapsed = endTime.getTimeInMillis() - startTime.getTimeInMillis();
    double downloadTime = (((double)millisElapsed)/(double)1000);
    double dataSize = 500;
    double kbps1    = ((double)dataSize/(double)downloadTime);
    double kbpsA    = ((kbps1*8)*10*1.02);
    //double kbyteA   = ((DataSize*10)/downloadTime);
    double kbps     = (Math.round(kbpsA)/10);
    //double kbyte    = (Math.round(kbyteA)/10);

    mb.append("millisElapsed = " + millisElapsed + "<br>");
    mb.append("kbps = " + kbps + "<br>");
} catch (Exception e){
    Debug.errorsave(e, "");
    mb.append(reger.core.ErrorDissect.dissect(e, request, ""));
}


mb.append("Starting by using object.<br>");
reger.core.bandwidthtest.BandwidthTest bwtest = new reger.core.bandwidthtest.BandwidthTest();
bwtest.doTask();
mb.append("wasSuccessfulTest = " + bwtest.wasSuccessfulTest + "<br>");
mb.append("kbps = " + bwtest.speedInKbps + "<br>");



mb.append("<br><br><br><br><br>");

out.print(mb.toString());

%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
            StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/

%>

<%//@ include file="../globalfooter.jsp" %>

