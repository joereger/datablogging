<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.PUBLICSITE;
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEDONTRECORD;
pageProps.pathToAppRoot="";
/*----------------------------------------------------*/
%>

<%
//Done for previews
if (request.getParameter("ispreview")!=null && request.getParameter("ispreview").equals("1")){
    pageProps.siteSection=pageProps.MARKETINGSITE;
}
%>

<%@ include file="globalheader.jsp" %>

<%@ page import="java.io.IOException,
                 reger.core.db.Db,
                 java.awt.*,
                 java.text.DecimalFormat,
                 reger.mega.FieldType,
                 java.awt.image.BufferedImage" %>
<%@ page import="java.io.OutputStream" %>
<%@ page import="javax.servlet.ServletException" %>
<%@ page import="javax.servlet.http.HttpServlet" %>
<%@ page import="javax.servlet.http.HttpServletRequest" %>
<%@ page import="javax.servlet.http.HttpServletResponse" %>
<%@ page import="org.jfree.chart.*" %>
<%@ page import="org.jfree.chart.plot.*" %>
<%@ page import="org.jfree.chart.axis.*" %>
<%@ page import="org.jfree.data.*" %>
<%@ page import="org.jfree.data.category.*" %>
<%@ page import="org.jfree.data.general.*" %>
<%@ page import="org.jfree.data.xy.*" %>
<%@ page import="org.jfree.data.time.*" %>
<%@ page import="org.jfree.data.Range.*" %>
<%@ page import="org.jfree.chart.renderer.*" %>
<%@ page import="org.jfree.chart.renderer.xy.*" %>
<%@ page import="org.jfree.chart.labels.*" %>



<%
//@todo Verify that there is ample password protection on charts for private logs, draft entries, etc.

//Create our output stream to the browser
OutputStream outStream = response.getOutputStream();

try {

    //Determine whether or not this is a preview of a chart.
    boolean ispreview = false;
    if (request.getParameter("ispreview")!=null && request.getParameter("ispreview").equals("1")){
        ispreview=true;
    }

    //Get the chart and load its data
    reger.mega.MegaChart megaChart = new reger.mega.MegaChart(request);
    if (ispreview){
        megaChart.setMegaChartSeriesAsPreview();
    } else {
        megaChart.loadMegaChartSeriesData(userSession);
    }

    //Get the chart
    JFreeChart chart = reger.mega.MegaChartFactory.get(megaChart);

    //Chart bg color
    Color col1 = new Color(255, 255, 255);
    chart.setBackgroundPaint(col1);
    //Plot bg color
    Plot plot = chart.getPlot();
    Color col2 = new Color(250, 250, 250, 255);
    plot.setBackgroundPaint(col2);

    //Output to browser
    response.setContentType("image/png");

    //Chart size
    int chartwidth=600;
    int chartheight=300;
    if (megaChart.getChartsize()==reger.Vars.CHARTSIZEMINISCULE) {
        chartwidth=200;
        chartheight=125;
    } else if (megaChart.getChartsize()==reger.Vars.CHARTSIZESMALL) {
        chartwidth=400;
        chartheight=250;
    } else if (megaChart.getChartsize()==reger.Vars.CHARTSIZEMEDIUM) {
        chartwidth=600;
        chartheight=300;
    } else if (megaChart.getChartsize()==reger.Vars.CHARTSIZELARGE) {
        chartwidth=900;
        chartheight=600;
    } else if (megaChart.getChartsize()==reger.Vars.CHARTSIZEMASSIVE) {
        chartwidth=1200;
        chartheight=1000;
    }

    //Create a bufferedimage from the chart
    BufferedImage bufImg = chart.createBufferedImage(chartwidth, chartheight);
    //Encode as a PNG
    byte[] imgBytes = ChartUtilities.encodeAsPNG(bufImg);
    //Write to the browser
    outStream.write(imgBytes);

    //Record the bytesOutput to the database
    int bytesOutput = imgBytes.length;
    reger.Bandwidth.addActivity(userSession, bytesOutput);
    Debug.debug(5, "", "graph.log<br>bytesOutput=" + bytesOutput);

    //Chart End
} catch (Exception e) {
    Debug.errorsave(e, "");
}

//Close the output stream
outStream.close();

%>