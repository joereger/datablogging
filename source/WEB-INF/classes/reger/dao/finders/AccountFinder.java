package reger.dao.finders;

import reger.core.db.Db;
import java.util.ArrayList;
import reger.dao.db.AccountDAO;

/**
 * Finder for the 'account' DAO
 * 
 * DO NOT EDIT MANUALLY
 * 
 *   ______             ____  _____         _     ________        __   _   _   
 *  |_   _ `.          |_   \|_   _|       / |_  |_   __  |      |  ] (_) / |_ 
 *    | | `. \  .--.     |   \ | |   .--. `| |-'   | |_ \_|  .--.| |  __ `| |-'
 *    | |  | |/ .'`\ \   | |\ \| | / .'`\ \| |     |  _| _ / /'`\' | [  | | |  
 *   _| |_.' /| \__. |  _| |_\   |_| \__. || |,   _| |__/ || \__/  |  | | | |, 
 *  |______.'  '.__.'  |_____|\____|'.__.' \__/  |________| '.__.;__][___]\__/
 * 
 */

public class AccountFinder {


    public static ArrayList<AccountDAO> findByAccountid(int accountid) {
        return findByAccountid(accountid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountid(int accountid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeid(int accounttypeid) {
        return findByAccounttypeid(accounttypeid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeid(int accounttypeid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername(String customservername) {
        return findByCustomservername(customservername, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername(String customservername, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlid(int plid) {
        return findByPlid(plid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlid(int plid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtml(String homepagehtml) {
        return findByHomepagehtml(homepagehtml, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtml(String homepagehtml, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitle(String homepagetitle) {
        return findByHomepagetitle(homepagetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitle(String homepagetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedate(java.util.Calendar createdate) {
        return findByCreatedate(createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedate(java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneid(String timezoneid) {
        return findByTimezoneid(timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneid(String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopup(int jspopup) {
        return findByJspopup(jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopup(int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendar(boolean homepagecalendar) {
        return findByHomepagecalendar(homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendar(boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatus(boolean messagesstatus) {
        return findByMessagesstatus(messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatus(boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapproval(boolean messagesapproval) {
        return findByMessagesapproval(messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapproval(boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintools(boolean admintools) {
        return findByAdmintools(admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintools(boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscom(boolean pingweblogscom) {
        return findByPingweblogscom(pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscom(boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometab(boolean showhometab) {
        return findByShowhometab(showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometab(boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtext(String hometabtext) {
        return findByHometabtext(hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtext(String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintab(boolean showlogintab) {
        return findByShowlogintab(showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintab(boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummary(int displaycharsinsummary) {
        return findByDisplaycharsinsummary(displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummary(int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentries(int displaynumberofentries) {
        return findByDisplaynumberofentries(displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentries(int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinks(boolean userelatedlinks) {
        return findByUserelatedlinks(userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinks(boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitle(String favesitetitle) {
        return findByFavesitetitle(favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitle(String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteon(boolean favesiteon) {
        return findByFavesiteon(favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteon(boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisday(boolean onthisday) {
        return findByOnthisday(onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisday(boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletter(int emailnewsletter) {
        return findByEmailnewsletter(emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletter(int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhour(int emailsendhour) {
        return findByEmailsendhour(emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhour(int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlycharge(double monthlycharge) {
        return findByMonthlycharge(monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlycharge(double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteon(boolean issearchmysiteon) {
        return findByIssearchmysiteon(issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteon(boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackon(boolean istrackbackon) {
        return findByIstrackbackon(istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackon(boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectory(boolean islistedindirectory) {
        return findByIslistedindirectory(islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectory(boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapproval(boolean trackbackrequiresapproval) {
        return findByTrackbackrequiresapproval(trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapproval(boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodon(int istimeperiodon) {
        return findByIstimeperiodon(istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodon(int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturl(String accounturl) {
        return findByAccounturl(accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturl(String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccount(boolean isactiveaccount) {
        return findByIsactiveaccount(isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccount(boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapproval(boolean isnewpendingadminapproval) {
        return findByIsnewpendingadminapproval(isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapproval(boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateid(int hptemplateid) {
        return findByHptemplateid(hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateid(int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateid(int entlisttemplateid) {
        return findByEntlisttemplateid(entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateid(int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateid(int sitetemplateid) {
        return findBySitetemplateid(sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateid(int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2(String customservername2) {
        return findByCustomservername2(customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2(String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3(String customservername3) {
        return findByCustomservername3(customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3(String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemail(String accountemail) {
        return findByAccountemail(accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemail(String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubject(String newslettersubject) {
        return findByNewslettersubject(newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubject(String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEncryptedlicense(String encryptedlicense) {
        return findByEncryptedlicense(encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEncryptedlicense(String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsbillingokencrypted(String isbillingokencrypted) {
        return findByIsbillingokencrypted(isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsbillingokencrypted(String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByBillingerror(String billingerror) {
        return findByBillingerror(billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByBillingerror(String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByLastbillingcheck(java.util.Calendar lastbillingcheck) {
        return findByLastbillingcheck(lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByLastbillingcheck(java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByGooglemapsapikey(String googlemapsapikey) {
        return findByGooglemapsapikey(googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByGooglemapsapikey(String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMaxspaceinbytes(double maxspaceinbytes) {
        return findByMaxspaceinbytes(maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMaxspaceinbytes(double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidAccounttypeid(int accountid, int accounttypeid) {
        return findByAccountidAccounttypeid(accountid, accounttypeid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidAccounttypeid(int accountid, int accounttypeid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', accounttypeid='"+accounttypeid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidCustomservername(int accountid, String customservername) {
        return findByAccountidCustomservername(accountid, customservername, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidCustomservername(int accountid, String customservername, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', customservername='"+reger.core.Util.cleanForSQL(customservername)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidPlid(int accountid, int plid) {
        return findByAccountidPlid(accountid, plid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidPlid(int accountid, int plid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', plid='"+plid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidHomepagehtml(int accountid, String homepagehtml) {
        return findByAccountidHomepagehtml(accountid, homepagehtml, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidHomepagehtml(int accountid, String homepagehtml, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidHomepagetitle(int accountid, String homepagetitle) {
        return findByAccountidHomepagetitle(accountid, homepagetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidHomepagetitle(int accountid, String homepagetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidCreatedate(int accountid, java.util.Calendar createdate) {
        return findByAccountidCreatedate(accountid, createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidCreatedate(int accountid, java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidTimezoneid(int accountid, String timezoneid) {
        return findByAccountidTimezoneid(accountid, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidTimezoneid(int accountid, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidJspopup(int accountid, int jspopup) {
        return findByAccountidJspopup(accountid, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidJspopup(int accountid, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidHomepagecalendar(int accountid, boolean homepagecalendar) {
        return findByAccountidHomepagecalendar(accountid, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidHomepagecalendar(int accountid, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidMessagesstatus(int accountid, boolean messagesstatus) {
        return findByAccountidMessagesstatus(accountid, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidMessagesstatus(int accountid, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidMessagesapproval(int accountid, boolean messagesapproval) {
        return findByAccountidMessagesapproval(accountid, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidMessagesapproval(int accountid, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidAdmintools(int accountid, boolean admintools) {
        return findByAccountidAdmintools(accountid, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidAdmintools(int accountid, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidPingweblogscom(int accountid, boolean pingweblogscom) {
        return findByAccountidPingweblogscom(accountid, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidPingweblogscom(int accountid, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidShowhometab(int accountid, boolean showhometab) {
        return findByAccountidShowhometab(accountid, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidShowhometab(int accountid, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidHometabtext(int accountid, String hometabtext) {
        return findByAccountidHometabtext(accountid, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidHometabtext(int accountid, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidShowlogintab(int accountid, boolean showlogintab) {
        return findByAccountidShowlogintab(accountid, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidShowlogintab(int accountid, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidDisplaycharsinsummary(int accountid, int displaycharsinsummary) {
        return findByAccountidDisplaycharsinsummary(accountid, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidDisplaycharsinsummary(int accountid, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidDisplaynumberofentries(int accountid, int displaynumberofentries) {
        return findByAccountidDisplaynumberofentries(accountid, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidDisplaynumberofentries(int accountid, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidUserelatedlinks(int accountid, boolean userelatedlinks) {
        return findByAccountidUserelatedlinks(accountid, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidUserelatedlinks(int accountid, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidFavesitetitle(int accountid, String favesitetitle) {
        return findByAccountidFavesitetitle(accountid, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidFavesitetitle(int accountid, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidFavesiteon(int accountid, boolean favesiteon) {
        return findByAccountidFavesiteon(accountid, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidFavesiteon(int accountid, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidOnthisday(int accountid, boolean onthisday) {
        return findByAccountidOnthisday(accountid, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidOnthisday(int accountid, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidEmailnewsletter(int accountid, int emailnewsletter) {
        return findByAccountidEmailnewsletter(accountid, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidEmailnewsletter(int accountid, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidEmailsendhour(int accountid, int emailsendhour) {
        return findByAccountidEmailsendhour(accountid, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidEmailsendhour(int accountid, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidMonthlycharge(int accountid, double monthlycharge) {
        return findByAccountidMonthlycharge(accountid, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidMonthlycharge(int accountid, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIssearchmysiteon(int accountid, boolean issearchmysiteon) {
        return findByAccountidIssearchmysiteon(accountid, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIssearchmysiteon(int accountid, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIstrackbackon(int accountid, boolean istrackbackon) {
        return findByAccountidIstrackbackon(accountid, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIstrackbackon(int accountid, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIslistedindirectory(int accountid, boolean islistedindirectory) {
        return findByAccountidIslistedindirectory(accountid, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIslistedindirectory(int accountid, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidTrackbackrequiresapproval(int accountid, boolean trackbackrequiresapproval) {
        return findByAccountidTrackbackrequiresapproval(accountid, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidTrackbackrequiresapproval(int accountid, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIstimeperiodon(int accountid, int istimeperiodon) {
        return findByAccountidIstimeperiodon(accountid, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIstimeperiodon(int accountid, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidAccounturl(int accountid, String accounturl) {
        return findByAccountidAccounturl(accountid, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidAccounturl(int accountid, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIsactiveaccount(int accountid, boolean isactiveaccount) {
        return findByAccountidIsactiveaccount(accountid, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIsactiveaccount(int accountid, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIsnewpendingadminapproval(int accountid, boolean isnewpendingadminapproval) {
        return findByAccountidIsnewpendingadminapproval(accountid, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIsnewpendingadminapproval(int accountid, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidHptemplateid(int accountid, int hptemplateid) {
        return findByAccountidHptemplateid(accountid, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidHptemplateid(int accountid, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidEntlisttemplateid(int accountid, int entlisttemplateid) {
        return findByAccountidEntlisttemplateid(accountid, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidEntlisttemplateid(int accountid, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidSitetemplateid(int accountid, int sitetemplateid) {
        return findByAccountidSitetemplateid(accountid, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidSitetemplateid(int accountid, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidCustomservername2(int accountid, String customservername2) {
        return findByAccountidCustomservername2(accountid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidCustomservername2(int accountid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidCustomservername3(int accountid, String customservername3) {
        return findByAccountidCustomservername3(accountid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidCustomservername3(int accountid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidAccountemail(int accountid, String accountemail) {
        return findByAccountidAccountemail(accountid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidAccountemail(int accountid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidNewslettersubject(int accountid, String newslettersubject) {
        return findByAccountidNewslettersubject(accountid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidNewslettersubject(int accountid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidEncryptedlicense(int accountid, String encryptedlicense) {
        return findByAccountidEncryptedlicense(accountid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidEncryptedlicense(int accountid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidIsbillingokencrypted(int accountid, String isbillingokencrypted) {
        return findByAccountidIsbillingokencrypted(accountid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidIsbillingokencrypted(int accountid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidBillingerror(int accountid, String billingerror) {
        return findByAccountidBillingerror(accountid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidBillingerror(int accountid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidLastbillingcheck(int accountid, java.util.Calendar lastbillingcheck) {
        return findByAccountidLastbillingcheck(accountid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidLastbillingcheck(int accountid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidGooglemapsapikey(int accountid, String googlemapsapikey) {
        return findByAccountidGooglemapsapikey(accountid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidGooglemapsapikey(int accountid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountidMaxspaceinbytes(int accountid, double maxspaceinbytes) {
        return findByAccountidMaxspaceinbytes(accountid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountidMaxspaceinbytes(int accountid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountid='"+accountid+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCustomservername(int accounttypeid, String customservername) {
        return findByAccounttypeidCustomservername(accounttypeid, customservername, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCustomservername(int accounttypeid, String customservername, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', customservername='"+reger.core.Util.cleanForSQL(customservername)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidPlid(int accounttypeid, int plid) {
        return findByAccounttypeidPlid(accounttypeid, plid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidPlid(int accounttypeid, int plid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', plid='"+plid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHomepagehtml(int accounttypeid, String homepagehtml) {
        return findByAccounttypeidHomepagehtml(accounttypeid, homepagehtml, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHomepagehtml(int accounttypeid, String homepagehtml, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHomepagetitle(int accounttypeid, String homepagetitle) {
        return findByAccounttypeidHomepagetitle(accounttypeid, homepagetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHomepagetitle(int accounttypeid, String homepagetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCreatedate(int accounttypeid, java.util.Calendar createdate) {
        return findByAccounttypeidCreatedate(accounttypeid, createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCreatedate(int accounttypeid, java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidTimezoneid(int accounttypeid, String timezoneid) {
        return findByAccounttypeidTimezoneid(accounttypeid, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidTimezoneid(int accounttypeid, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidJspopup(int accounttypeid, int jspopup) {
        return findByAccounttypeidJspopup(accounttypeid, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidJspopup(int accounttypeid, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHomepagecalendar(int accounttypeid, boolean homepagecalendar) {
        return findByAccounttypeidHomepagecalendar(accounttypeid, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHomepagecalendar(int accounttypeid, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMessagesstatus(int accounttypeid, boolean messagesstatus) {
        return findByAccounttypeidMessagesstatus(accounttypeid, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMessagesstatus(int accounttypeid, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMessagesapproval(int accounttypeid, boolean messagesapproval) {
        return findByAccounttypeidMessagesapproval(accounttypeid, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMessagesapproval(int accounttypeid, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidAdmintools(int accounttypeid, boolean admintools) {
        return findByAccounttypeidAdmintools(accounttypeid, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidAdmintools(int accounttypeid, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidPingweblogscom(int accounttypeid, boolean pingweblogscom) {
        return findByAccounttypeidPingweblogscom(accounttypeid, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidPingweblogscom(int accounttypeid, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidShowhometab(int accounttypeid, boolean showhometab) {
        return findByAccounttypeidShowhometab(accounttypeid, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidShowhometab(int accounttypeid, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHometabtext(int accounttypeid, String hometabtext) {
        return findByAccounttypeidHometabtext(accounttypeid, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHometabtext(int accounttypeid, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidShowlogintab(int accounttypeid, boolean showlogintab) {
        return findByAccounttypeidShowlogintab(accounttypeid, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidShowlogintab(int accounttypeid, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidDisplaycharsinsummary(int accounttypeid, int displaycharsinsummary) {
        return findByAccounttypeidDisplaycharsinsummary(accounttypeid, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidDisplaycharsinsummary(int accounttypeid, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidDisplaynumberofentries(int accounttypeid, int displaynumberofentries) {
        return findByAccounttypeidDisplaynumberofentries(accounttypeid, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidDisplaynumberofentries(int accounttypeid, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidUserelatedlinks(int accounttypeid, boolean userelatedlinks) {
        return findByAccounttypeidUserelatedlinks(accounttypeid, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidUserelatedlinks(int accounttypeid, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidFavesitetitle(int accounttypeid, String favesitetitle) {
        return findByAccounttypeidFavesitetitle(accounttypeid, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidFavesitetitle(int accounttypeid, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidFavesiteon(int accounttypeid, boolean favesiteon) {
        return findByAccounttypeidFavesiteon(accounttypeid, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidFavesiteon(int accounttypeid, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidOnthisday(int accounttypeid, boolean onthisday) {
        return findByAccounttypeidOnthisday(accounttypeid, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidOnthisday(int accounttypeid, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEmailnewsletter(int accounttypeid, int emailnewsletter) {
        return findByAccounttypeidEmailnewsletter(accounttypeid, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEmailnewsletter(int accounttypeid, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEmailsendhour(int accounttypeid, int emailsendhour) {
        return findByAccounttypeidEmailsendhour(accounttypeid, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEmailsendhour(int accounttypeid, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMonthlycharge(int accounttypeid, double monthlycharge) {
        return findByAccounttypeidMonthlycharge(accounttypeid, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMonthlycharge(int accounttypeid, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIssearchmysiteon(int accounttypeid, boolean issearchmysiteon) {
        return findByAccounttypeidIssearchmysiteon(accounttypeid, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIssearchmysiteon(int accounttypeid, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIstrackbackon(int accounttypeid, boolean istrackbackon) {
        return findByAccounttypeidIstrackbackon(accounttypeid, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIstrackbackon(int accounttypeid, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIslistedindirectory(int accounttypeid, boolean islistedindirectory) {
        return findByAccounttypeidIslistedindirectory(accounttypeid, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIslistedindirectory(int accounttypeid, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidTrackbackrequiresapproval(int accounttypeid, boolean trackbackrequiresapproval) {
        return findByAccounttypeidTrackbackrequiresapproval(accounttypeid, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidTrackbackrequiresapproval(int accounttypeid, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIstimeperiodon(int accounttypeid, int istimeperiodon) {
        return findByAccounttypeidIstimeperiodon(accounttypeid, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIstimeperiodon(int accounttypeid, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidAccounturl(int accounttypeid, String accounturl) {
        return findByAccounttypeidAccounturl(accounttypeid, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidAccounturl(int accounttypeid, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIsactiveaccount(int accounttypeid, boolean isactiveaccount) {
        return findByAccounttypeidIsactiveaccount(accounttypeid, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIsactiveaccount(int accounttypeid, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIsnewpendingadminapproval(int accounttypeid, boolean isnewpendingadminapproval) {
        return findByAccounttypeidIsnewpendingadminapproval(accounttypeid, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIsnewpendingadminapproval(int accounttypeid, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHptemplateid(int accounttypeid, int hptemplateid) {
        return findByAccounttypeidHptemplateid(accounttypeid, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidHptemplateid(int accounttypeid, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEntlisttemplateid(int accounttypeid, int entlisttemplateid) {
        return findByAccounttypeidEntlisttemplateid(accounttypeid, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEntlisttemplateid(int accounttypeid, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidSitetemplateid(int accounttypeid, int sitetemplateid) {
        return findByAccounttypeidSitetemplateid(accounttypeid, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidSitetemplateid(int accounttypeid, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCustomservername2(int accounttypeid, String customservername2) {
        return findByAccounttypeidCustomservername2(accounttypeid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCustomservername2(int accounttypeid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCustomservername3(int accounttypeid, String customservername3) {
        return findByAccounttypeidCustomservername3(accounttypeid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidCustomservername3(int accounttypeid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidAccountemail(int accounttypeid, String accountemail) {
        return findByAccounttypeidAccountemail(accounttypeid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidAccountemail(int accounttypeid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidNewslettersubject(int accounttypeid, String newslettersubject) {
        return findByAccounttypeidNewslettersubject(accounttypeid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidNewslettersubject(int accounttypeid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEncryptedlicense(int accounttypeid, String encryptedlicense) {
        return findByAccounttypeidEncryptedlicense(accounttypeid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidEncryptedlicense(int accounttypeid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIsbillingokencrypted(int accounttypeid, String isbillingokencrypted) {
        return findByAccounttypeidIsbillingokencrypted(accounttypeid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidIsbillingokencrypted(int accounttypeid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidBillingerror(int accounttypeid, String billingerror) {
        return findByAccounttypeidBillingerror(accounttypeid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidBillingerror(int accounttypeid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidLastbillingcheck(int accounttypeid, java.util.Calendar lastbillingcheck) {
        return findByAccounttypeidLastbillingcheck(accounttypeid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidLastbillingcheck(int accounttypeid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidGooglemapsapikey(int accounttypeid, String googlemapsapikey) {
        return findByAccounttypeidGooglemapsapikey(accounttypeid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidGooglemapsapikey(int accounttypeid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMaxspaceinbytes(int accounttypeid, double maxspaceinbytes) {
        return findByAccounttypeidMaxspaceinbytes(accounttypeid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounttypeidMaxspaceinbytes(int accounttypeid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounttypeid='"+accounttypeid+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernamePlid(String customservername, int plid) {
        return findByCustomservernamePlid(customservername, plid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernamePlid(String customservername, int plid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', plid='"+plid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameHomepagehtml(String customservername, String homepagehtml) {
        return findByCustomservernameHomepagehtml(customservername, homepagehtml, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameHomepagehtml(String customservername, String homepagehtml, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameHomepagetitle(String customservername, String homepagetitle) {
        return findByCustomservernameHomepagetitle(customservername, homepagetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameHomepagetitle(String customservername, String homepagetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameCreatedate(String customservername, java.util.Calendar createdate) {
        return findByCustomservernameCreatedate(customservername, createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameCreatedate(String customservername, java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameTimezoneid(String customservername, String timezoneid) {
        return findByCustomservernameTimezoneid(customservername, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameTimezoneid(String customservername, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameJspopup(String customservername, int jspopup) {
        return findByCustomservernameJspopup(customservername, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameJspopup(String customservername, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameHomepagecalendar(String customservername, boolean homepagecalendar) {
        return findByCustomservernameHomepagecalendar(customservername, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameHomepagecalendar(String customservername, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameMessagesstatus(String customservername, boolean messagesstatus) {
        return findByCustomservernameMessagesstatus(customservername, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameMessagesstatus(String customservername, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameMessagesapproval(String customservername, boolean messagesapproval) {
        return findByCustomservernameMessagesapproval(customservername, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameMessagesapproval(String customservername, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameAdmintools(String customservername, boolean admintools) {
        return findByCustomservernameAdmintools(customservername, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameAdmintools(String customservername, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernamePingweblogscom(String customservername, boolean pingweblogscom) {
        return findByCustomservernamePingweblogscom(customservername, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernamePingweblogscom(String customservername, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameShowhometab(String customservername, boolean showhometab) {
        return findByCustomservernameShowhometab(customservername, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameShowhometab(String customservername, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameHometabtext(String customservername, String hometabtext) {
        return findByCustomservernameHometabtext(customservername, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameHometabtext(String customservername, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameShowlogintab(String customservername, boolean showlogintab) {
        return findByCustomservernameShowlogintab(customservername, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameShowlogintab(String customservername, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameDisplaycharsinsummary(String customservername, int displaycharsinsummary) {
        return findByCustomservernameDisplaycharsinsummary(customservername, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameDisplaycharsinsummary(String customservername, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameDisplaynumberofentries(String customservername, int displaynumberofentries) {
        return findByCustomservernameDisplaynumberofentries(customservername, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameDisplaynumberofentries(String customservername, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameUserelatedlinks(String customservername, boolean userelatedlinks) {
        return findByCustomservernameUserelatedlinks(customservername, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameUserelatedlinks(String customservername, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameFavesitetitle(String customservername, String favesitetitle) {
        return findByCustomservernameFavesitetitle(customservername, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameFavesitetitle(String customservername, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameFavesiteon(String customservername, boolean favesiteon) {
        return findByCustomservernameFavesiteon(customservername, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameFavesiteon(String customservername, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameOnthisday(String customservername, boolean onthisday) {
        return findByCustomservernameOnthisday(customservername, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameOnthisday(String customservername, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameEmailnewsletter(String customservername, int emailnewsletter) {
        return findByCustomservernameEmailnewsletter(customservername, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameEmailnewsletter(String customservername, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameEmailsendhour(String customservername, int emailsendhour) {
        return findByCustomservernameEmailsendhour(customservername, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameEmailsendhour(String customservername, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameMonthlycharge(String customservername, double monthlycharge) {
        return findByCustomservernameMonthlycharge(customservername, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameMonthlycharge(String customservername, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIssearchmysiteon(String customservername, boolean issearchmysiteon) {
        return findByCustomservernameIssearchmysiteon(customservername, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIssearchmysiteon(String customservername, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIstrackbackon(String customservername, boolean istrackbackon) {
        return findByCustomservernameIstrackbackon(customservername, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIstrackbackon(String customservername, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIslistedindirectory(String customservername, boolean islistedindirectory) {
        return findByCustomservernameIslistedindirectory(customservername, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIslistedindirectory(String customservername, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameTrackbackrequiresapproval(String customservername, boolean trackbackrequiresapproval) {
        return findByCustomservernameTrackbackrequiresapproval(customservername, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameTrackbackrequiresapproval(String customservername, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIstimeperiodon(String customservername, int istimeperiodon) {
        return findByCustomservernameIstimeperiodon(customservername, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIstimeperiodon(String customservername, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameAccounturl(String customservername, String accounturl) {
        return findByCustomservernameAccounturl(customservername, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameAccounturl(String customservername, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIsactiveaccount(String customservername, boolean isactiveaccount) {
        return findByCustomservernameIsactiveaccount(customservername, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIsactiveaccount(String customservername, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIsnewpendingadminapproval(String customservername, boolean isnewpendingadminapproval) {
        return findByCustomservernameIsnewpendingadminapproval(customservername, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIsnewpendingadminapproval(String customservername, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameHptemplateid(String customservername, int hptemplateid) {
        return findByCustomservernameHptemplateid(customservername, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameHptemplateid(String customservername, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameEntlisttemplateid(String customservername, int entlisttemplateid) {
        return findByCustomservernameEntlisttemplateid(customservername, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameEntlisttemplateid(String customservername, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameSitetemplateid(String customservername, int sitetemplateid) {
        return findByCustomservernameSitetemplateid(customservername, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameSitetemplateid(String customservername, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameCustomservername2(String customservername, String customservername2) {
        return findByCustomservernameCustomservername2(customservername, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameCustomservername2(String customservername, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameCustomservername3(String customservername, String customservername3) {
        return findByCustomservernameCustomservername3(customservername, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameCustomservername3(String customservername, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameAccountemail(String customservername, String accountemail) {
        return findByCustomservernameAccountemail(customservername, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameAccountemail(String customservername, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameNewslettersubject(String customservername, String newslettersubject) {
        return findByCustomservernameNewslettersubject(customservername, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameNewslettersubject(String customservername, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameEncryptedlicense(String customservername, String encryptedlicense) {
        return findByCustomservernameEncryptedlicense(customservername, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameEncryptedlicense(String customservername, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameIsbillingokencrypted(String customservername, String isbillingokencrypted) {
        return findByCustomservernameIsbillingokencrypted(customservername, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameIsbillingokencrypted(String customservername, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameBillingerror(String customservername, String billingerror) {
        return findByCustomservernameBillingerror(customservername, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameBillingerror(String customservername, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameLastbillingcheck(String customservername, java.util.Calendar lastbillingcheck) {
        return findByCustomservernameLastbillingcheck(customservername, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameLastbillingcheck(String customservername, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameGooglemapsapikey(String customservername, String googlemapsapikey) {
        return findByCustomservernameGooglemapsapikey(customservername, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameGooglemapsapikey(String customservername, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservernameMaxspaceinbytes(String customservername, double maxspaceinbytes) {
        return findByCustomservernameMaxspaceinbytes(customservername, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservernameMaxspaceinbytes(String customservername, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername='"+reger.core.Util.cleanForSQL(customservername)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidHomepagehtml(int plid, String homepagehtml) {
        return findByPlidHomepagehtml(plid, homepagehtml, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidHomepagehtml(int plid, String homepagehtml, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidHomepagetitle(int plid, String homepagetitle) {
        return findByPlidHomepagetitle(plid, homepagetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidHomepagetitle(int plid, String homepagetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidCreatedate(int plid, java.util.Calendar createdate) {
        return findByPlidCreatedate(plid, createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidCreatedate(int plid, java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidTimezoneid(int plid, String timezoneid) {
        return findByPlidTimezoneid(plid, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidTimezoneid(int plid, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidJspopup(int plid, int jspopup) {
        return findByPlidJspopup(plid, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidJspopup(int plid, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidHomepagecalendar(int plid, boolean homepagecalendar) {
        return findByPlidHomepagecalendar(plid, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidHomepagecalendar(int plid, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidMessagesstatus(int plid, boolean messagesstatus) {
        return findByPlidMessagesstatus(plid, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidMessagesstatus(int plid, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidMessagesapproval(int plid, boolean messagesapproval) {
        return findByPlidMessagesapproval(plid, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidMessagesapproval(int plid, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidAdmintools(int plid, boolean admintools) {
        return findByPlidAdmintools(plid, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidAdmintools(int plid, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidPingweblogscom(int plid, boolean pingweblogscom) {
        return findByPlidPingweblogscom(plid, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidPingweblogscom(int plid, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidShowhometab(int plid, boolean showhometab) {
        return findByPlidShowhometab(plid, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidShowhometab(int plid, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidHometabtext(int plid, String hometabtext) {
        return findByPlidHometabtext(plid, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidHometabtext(int plid, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidShowlogintab(int plid, boolean showlogintab) {
        return findByPlidShowlogintab(plid, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidShowlogintab(int plid, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidDisplaycharsinsummary(int plid, int displaycharsinsummary) {
        return findByPlidDisplaycharsinsummary(plid, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidDisplaycharsinsummary(int plid, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidDisplaynumberofentries(int plid, int displaynumberofentries) {
        return findByPlidDisplaynumberofentries(plid, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidDisplaynumberofentries(int plid, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidUserelatedlinks(int plid, boolean userelatedlinks) {
        return findByPlidUserelatedlinks(plid, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidUserelatedlinks(int plid, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidFavesitetitle(int plid, String favesitetitle) {
        return findByPlidFavesitetitle(plid, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidFavesitetitle(int plid, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidFavesiteon(int plid, boolean favesiteon) {
        return findByPlidFavesiteon(plid, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidFavesiteon(int plid, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidOnthisday(int plid, boolean onthisday) {
        return findByPlidOnthisday(plid, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidOnthisday(int plid, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidEmailnewsletter(int plid, int emailnewsletter) {
        return findByPlidEmailnewsletter(plid, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidEmailnewsletter(int plid, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidEmailsendhour(int plid, int emailsendhour) {
        return findByPlidEmailsendhour(plid, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidEmailsendhour(int plid, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidMonthlycharge(int plid, double monthlycharge) {
        return findByPlidMonthlycharge(plid, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidMonthlycharge(int plid, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIssearchmysiteon(int plid, boolean issearchmysiteon) {
        return findByPlidIssearchmysiteon(plid, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIssearchmysiteon(int plid, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIstrackbackon(int plid, boolean istrackbackon) {
        return findByPlidIstrackbackon(plid, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIstrackbackon(int plid, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIslistedindirectory(int plid, boolean islistedindirectory) {
        return findByPlidIslistedindirectory(plid, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIslistedindirectory(int plid, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidTrackbackrequiresapproval(int plid, boolean trackbackrequiresapproval) {
        return findByPlidTrackbackrequiresapproval(plid, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidTrackbackrequiresapproval(int plid, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIstimeperiodon(int plid, int istimeperiodon) {
        return findByPlidIstimeperiodon(plid, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIstimeperiodon(int plid, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidAccounturl(int plid, String accounturl) {
        return findByPlidAccounturl(plid, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidAccounturl(int plid, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIsactiveaccount(int plid, boolean isactiveaccount) {
        return findByPlidIsactiveaccount(plid, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIsactiveaccount(int plid, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIsnewpendingadminapproval(int plid, boolean isnewpendingadminapproval) {
        return findByPlidIsnewpendingadminapproval(plid, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIsnewpendingadminapproval(int plid, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidHptemplateid(int plid, int hptemplateid) {
        return findByPlidHptemplateid(plid, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidHptemplateid(int plid, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidEntlisttemplateid(int plid, int entlisttemplateid) {
        return findByPlidEntlisttemplateid(plid, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidEntlisttemplateid(int plid, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidSitetemplateid(int plid, int sitetemplateid) {
        return findByPlidSitetemplateid(plid, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidSitetemplateid(int plid, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidCustomservername2(int plid, String customservername2) {
        return findByPlidCustomservername2(plid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidCustomservername2(int plid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidCustomservername3(int plid, String customservername3) {
        return findByPlidCustomservername3(plid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidCustomservername3(int plid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidAccountemail(int plid, String accountemail) {
        return findByPlidAccountemail(plid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidAccountemail(int plid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidNewslettersubject(int plid, String newslettersubject) {
        return findByPlidNewslettersubject(plid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidNewslettersubject(int plid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidEncryptedlicense(int plid, String encryptedlicense) {
        return findByPlidEncryptedlicense(plid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidEncryptedlicense(int plid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidIsbillingokencrypted(int plid, String isbillingokencrypted) {
        return findByPlidIsbillingokencrypted(plid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidIsbillingokencrypted(int plid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidBillingerror(int plid, String billingerror) {
        return findByPlidBillingerror(plid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidBillingerror(int plid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidLastbillingcheck(int plid, java.util.Calendar lastbillingcheck) {
        return findByPlidLastbillingcheck(plid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidLastbillingcheck(int plid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidGooglemapsapikey(int plid, String googlemapsapikey) {
        return findByPlidGooglemapsapikey(plid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidGooglemapsapikey(int plid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPlidMaxspaceinbytes(int plid, double maxspaceinbytes) {
        return findByPlidMaxspaceinbytes(plid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPlidMaxspaceinbytes(int plid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE plid='"+plid+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHomepagetitle(String homepagehtml, String homepagetitle) {
        return findByHomepagehtmlHomepagetitle(homepagehtml, homepagetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHomepagetitle(String homepagehtml, String homepagetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlCreatedate(String homepagehtml, java.util.Calendar createdate) {
        return findByHomepagehtmlCreatedate(homepagehtml, createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlCreatedate(String homepagehtml, java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlTimezoneid(String homepagehtml, String timezoneid) {
        return findByHomepagehtmlTimezoneid(homepagehtml, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlTimezoneid(String homepagehtml, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlJspopup(String homepagehtml, int jspopup) {
        return findByHomepagehtmlJspopup(homepagehtml, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlJspopup(String homepagehtml, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHomepagecalendar(String homepagehtml, boolean homepagecalendar) {
        return findByHomepagehtmlHomepagecalendar(homepagehtml, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHomepagecalendar(String homepagehtml, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMessagesstatus(String homepagehtml, boolean messagesstatus) {
        return findByHomepagehtmlMessagesstatus(homepagehtml, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMessagesstatus(String homepagehtml, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMessagesapproval(String homepagehtml, boolean messagesapproval) {
        return findByHomepagehtmlMessagesapproval(homepagehtml, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMessagesapproval(String homepagehtml, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlAdmintools(String homepagehtml, boolean admintools) {
        return findByHomepagehtmlAdmintools(homepagehtml, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlAdmintools(String homepagehtml, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlPingweblogscom(String homepagehtml, boolean pingweblogscom) {
        return findByHomepagehtmlPingweblogscom(homepagehtml, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlPingweblogscom(String homepagehtml, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlShowhometab(String homepagehtml, boolean showhometab) {
        return findByHomepagehtmlShowhometab(homepagehtml, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlShowhometab(String homepagehtml, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHometabtext(String homepagehtml, String hometabtext) {
        return findByHomepagehtmlHometabtext(homepagehtml, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHometabtext(String homepagehtml, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlShowlogintab(String homepagehtml, boolean showlogintab) {
        return findByHomepagehtmlShowlogintab(homepagehtml, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlShowlogintab(String homepagehtml, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlDisplaycharsinsummary(String homepagehtml, int displaycharsinsummary) {
        return findByHomepagehtmlDisplaycharsinsummary(homepagehtml, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlDisplaycharsinsummary(String homepagehtml, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlDisplaynumberofentries(String homepagehtml, int displaynumberofentries) {
        return findByHomepagehtmlDisplaynumberofentries(homepagehtml, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlDisplaynumberofentries(String homepagehtml, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlUserelatedlinks(String homepagehtml, boolean userelatedlinks) {
        return findByHomepagehtmlUserelatedlinks(homepagehtml, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlUserelatedlinks(String homepagehtml, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlFavesitetitle(String homepagehtml, String favesitetitle) {
        return findByHomepagehtmlFavesitetitle(homepagehtml, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlFavesitetitle(String homepagehtml, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlFavesiteon(String homepagehtml, boolean favesiteon) {
        return findByHomepagehtmlFavesiteon(homepagehtml, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlFavesiteon(String homepagehtml, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlOnthisday(String homepagehtml, boolean onthisday) {
        return findByHomepagehtmlOnthisday(homepagehtml, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlOnthisday(String homepagehtml, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEmailnewsletter(String homepagehtml, int emailnewsletter) {
        return findByHomepagehtmlEmailnewsletter(homepagehtml, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEmailnewsletter(String homepagehtml, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEmailsendhour(String homepagehtml, int emailsendhour) {
        return findByHomepagehtmlEmailsendhour(homepagehtml, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEmailsendhour(String homepagehtml, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMonthlycharge(String homepagehtml, double monthlycharge) {
        return findByHomepagehtmlMonthlycharge(homepagehtml, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMonthlycharge(String homepagehtml, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIssearchmysiteon(String homepagehtml, boolean issearchmysiteon) {
        return findByHomepagehtmlIssearchmysiteon(homepagehtml, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIssearchmysiteon(String homepagehtml, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIstrackbackon(String homepagehtml, boolean istrackbackon) {
        return findByHomepagehtmlIstrackbackon(homepagehtml, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIstrackbackon(String homepagehtml, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIslistedindirectory(String homepagehtml, boolean islistedindirectory) {
        return findByHomepagehtmlIslistedindirectory(homepagehtml, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIslistedindirectory(String homepagehtml, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlTrackbackrequiresapproval(String homepagehtml, boolean trackbackrequiresapproval) {
        return findByHomepagehtmlTrackbackrequiresapproval(homepagehtml, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlTrackbackrequiresapproval(String homepagehtml, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIstimeperiodon(String homepagehtml, int istimeperiodon) {
        return findByHomepagehtmlIstimeperiodon(homepagehtml, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIstimeperiodon(String homepagehtml, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlAccounturl(String homepagehtml, String accounturl) {
        return findByHomepagehtmlAccounturl(homepagehtml, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlAccounturl(String homepagehtml, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIsactiveaccount(String homepagehtml, boolean isactiveaccount) {
        return findByHomepagehtmlIsactiveaccount(homepagehtml, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIsactiveaccount(String homepagehtml, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIsnewpendingadminapproval(String homepagehtml, boolean isnewpendingadminapproval) {
        return findByHomepagehtmlIsnewpendingadminapproval(homepagehtml, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIsnewpendingadminapproval(String homepagehtml, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHptemplateid(String homepagehtml, int hptemplateid) {
        return findByHomepagehtmlHptemplateid(homepagehtml, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlHptemplateid(String homepagehtml, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEntlisttemplateid(String homepagehtml, int entlisttemplateid) {
        return findByHomepagehtmlEntlisttemplateid(homepagehtml, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEntlisttemplateid(String homepagehtml, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlSitetemplateid(String homepagehtml, int sitetemplateid) {
        return findByHomepagehtmlSitetemplateid(homepagehtml, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlSitetemplateid(String homepagehtml, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlCustomservername2(String homepagehtml, String customservername2) {
        return findByHomepagehtmlCustomservername2(homepagehtml, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlCustomservername2(String homepagehtml, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlCustomservername3(String homepagehtml, String customservername3) {
        return findByHomepagehtmlCustomservername3(homepagehtml, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlCustomservername3(String homepagehtml, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlAccountemail(String homepagehtml, String accountemail) {
        return findByHomepagehtmlAccountemail(homepagehtml, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlAccountemail(String homepagehtml, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlNewslettersubject(String homepagehtml, String newslettersubject) {
        return findByHomepagehtmlNewslettersubject(homepagehtml, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlNewslettersubject(String homepagehtml, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEncryptedlicense(String homepagehtml, String encryptedlicense) {
        return findByHomepagehtmlEncryptedlicense(homepagehtml, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlEncryptedlicense(String homepagehtml, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIsbillingokencrypted(String homepagehtml, String isbillingokencrypted) {
        return findByHomepagehtmlIsbillingokencrypted(homepagehtml, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlIsbillingokencrypted(String homepagehtml, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlBillingerror(String homepagehtml, String billingerror) {
        return findByHomepagehtmlBillingerror(homepagehtml, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlBillingerror(String homepagehtml, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlLastbillingcheck(String homepagehtml, java.util.Calendar lastbillingcheck) {
        return findByHomepagehtmlLastbillingcheck(homepagehtml, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlLastbillingcheck(String homepagehtml, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlGooglemapsapikey(String homepagehtml, String googlemapsapikey) {
        return findByHomepagehtmlGooglemapsapikey(homepagehtml, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlGooglemapsapikey(String homepagehtml, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMaxspaceinbytes(String homepagehtml, double maxspaceinbytes) {
        return findByHomepagehtmlMaxspaceinbytes(homepagehtml, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagehtmlMaxspaceinbytes(String homepagehtml, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagehtml='"+reger.core.Util.cleanForSQL(homepagehtml)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleCreatedate(String homepagetitle, java.util.Calendar createdate) {
        return findByHomepagetitleCreatedate(homepagetitle, createdate, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleCreatedate(String homepagetitle, java.util.Calendar createdate, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleTimezoneid(String homepagetitle, String timezoneid) {
        return findByHomepagetitleTimezoneid(homepagetitle, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleTimezoneid(String homepagetitle, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleJspopup(String homepagetitle, int jspopup) {
        return findByHomepagetitleJspopup(homepagetitle, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleJspopup(String homepagetitle, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleHomepagecalendar(String homepagetitle, boolean homepagecalendar) {
        return findByHomepagetitleHomepagecalendar(homepagetitle, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleHomepagecalendar(String homepagetitle, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMessagesstatus(String homepagetitle, boolean messagesstatus) {
        return findByHomepagetitleMessagesstatus(homepagetitle, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMessagesstatus(String homepagetitle, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMessagesapproval(String homepagetitle, boolean messagesapproval) {
        return findByHomepagetitleMessagesapproval(homepagetitle, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMessagesapproval(String homepagetitle, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleAdmintools(String homepagetitle, boolean admintools) {
        return findByHomepagetitleAdmintools(homepagetitle, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleAdmintools(String homepagetitle, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitlePingweblogscom(String homepagetitle, boolean pingweblogscom) {
        return findByHomepagetitlePingweblogscom(homepagetitle, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitlePingweblogscom(String homepagetitle, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleShowhometab(String homepagetitle, boolean showhometab) {
        return findByHomepagetitleShowhometab(homepagetitle, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleShowhometab(String homepagetitle, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleHometabtext(String homepagetitle, String hometabtext) {
        return findByHomepagetitleHometabtext(homepagetitle, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleHometabtext(String homepagetitle, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleShowlogintab(String homepagetitle, boolean showlogintab) {
        return findByHomepagetitleShowlogintab(homepagetitle, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleShowlogintab(String homepagetitle, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleDisplaycharsinsummary(String homepagetitle, int displaycharsinsummary) {
        return findByHomepagetitleDisplaycharsinsummary(homepagetitle, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleDisplaycharsinsummary(String homepagetitle, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleDisplaynumberofentries(String homepagetitle, int displaynumberofentries) {
        return findByHomepagetitleDisplaynumberofentries(homepagetitle, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleDisplaynumberofentries(String homepagetitle, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleUserelatedlinks(String homepagetitle, boolean userelatedlinks) {
        return findByHomepagetitleUserelatedlinks(homepagetitle, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleUserelatedlinks(String homepagetitle, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleFavesitetitle(String homepagetitle, String favesitetitle) {
        return findByHomepagetitleFavesitetitle(homepagetitle, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleFavesitetitle(String homepagetitle, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleFavesiteon(String homepagetitle, boolean favesiteon) {
        return findByHomepagetitleFavesiteon(homepagetitle, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleFavesiteon(String homepagetitle, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleOnthisday(String homepagetitle, boolean onthisday) {
        return findByHomepagetitleOnthisday(homepagetitle, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleOnthisday(String homepagetitle, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEmailnewsletter(String homepagetitle, int emailnewsletter) {
        return findByHomepagetitleEmailnewsletter(homepagetitle, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEmailnewsletter(String homepagetitle, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEmailsendhour(String homepagetitle, int emailsendhour) {
        return findByHomepagetitleEmailsendhour(homepagetitle, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEmailsendhour(String homepagetitle, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMonthlycharge(String homepagetitle, double monthlycharge) {
        return findByHomepagetitleMonthlycharge(homepagetitle, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMonthlycharge(String homepagetitle, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIssearchmysiteon(String homepagetitle, boolean issearchmysiteon) {
        return findByHomepagetitleIssearchmysiteon(homepagetitle, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIssearchmysiteon(String homepagetitle, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIstrackbackon(String homepagetitle, boolean istrackbackon) {
        return findByHomepagetitleIstrackbackon(homepagetitle, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIstrackbackon(String homepagetitle, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIslistedindirectory(String homepagetitle, boolean islistedindirectory) {
        return findByHomepagetitleIslistedindirectory(homepagetitle, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIslistedindirectory(String homepagetitle, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleTrackbackrequiresapproval(String homepagetitle, boolean trackbackrequiresapproval) {
        return findByHomepagetitleTrackbackrequiresapproval(homepagetitle, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleTrackbackrequiresapproval(String homepagetitle, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIstimeperiodon(String homepagetitle, int istimeperiodon) {
        return findByHomepagetitleIstimeperiodon(homepagetitle, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIstimeperiodon(String homepagetitle, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleAccounturl(String homepagetitle, String accounturl) {
        return findByHomepagetitleAccounturl(homepagetitle, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleAccounturl(String homepagetitle, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIsactiveaccount(String homepagetitle, boolean isactiveaccount) {
        return findByHomepagetitleIsactiveaccount(homepagetitle, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIsactiveaccount(String homepagetitle, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIsnewpendingadminapproval(String homepagetitle, boolean isnewpendingadminapproval) {
        return findByHomepagetitleIsnewpendingadminapproval(homepagetitle, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIsnewpendingadminapproval(String homepagetitle, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleHptemplateid(String homepagetitle, int hptemplateid) {
        return findByHomepagetitleHptemplateid(homepagetitle, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleHptemplateid(String homepagetitle, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEntlisttemplateid(String homepagetitle, int entlisttemplateid) {
        return findByHomepagetitleEntlisttemplateid(homepagetitle, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEntlisttemplateid(String homepagetitle, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleSitetemplateid(String homepagetitle, int sitetemplateid) {
        return findByHomepagetitleSitetemplateid(homepagetitle, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleSitetemplateid(String homepagetitle, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleCustomservername2(String homepagetitle, String customservername2) {
        return findByHomepagetitleCustomservername2(homepagetitle, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleCustomservername2(String homepagetitle, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleCustomservername3(String homepagetitle, String customservername3) {
        return findByHomepagetitleCustomservername3(homepagetitle, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleCustomservername3(String homepagetitle, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleAccountemail(String homepagetitle, String accountemail) {
        return findByHomepagetitleAccountemail(homepagetitle, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleAccountemail(String homepagetitle, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleNewslettersubject(String homepagetitle, String newslettersubject) {
        return findByHomepagetitleNewslettersubject(homepagetitle, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleNewslettersubject(String homepagetitle, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEncryptedlicense(String homepagetitle, String encryptedlicense) {
        return findByHomepagetitleEncryptedlicense(homepagetitle, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleEncryptedlicense(String homepagetitle, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIsbillingokencrypted(String homepagetitle, String isbillingokencrypted) {
        return findByHomepagetitleIsbillingokencrypted(homepagetitle, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleIsbillingokencrypted(String homepagetitle, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleBillingerror(String homepagetitle, String billingerror) {
        return findByHomepagetitleBillingerror(homepagetitle, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleBillingerror(String homepagetitle, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleLastbillingcheck(String homepagetitle, java.util.Calendar lastbillingcheck) {
        return findByHomepagetitleLastbillingcheck(homepagetitle, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleLastbillingcheck(String homepagetitle, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleGooglemapsapikey(String homepagetitle, String googlemapsapikey) {
        return findByHomepagetitleGooglemapsapikey(homepagetitle, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleGooglemapsapikey(String homepagetitle, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMaxspaceinbytes(String homepagetitle, double maxspaceinbytes) {
        return findByHomepagetitleMaxspaceinbytes(homepagetitle, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagetitleMaxspaceinbytes(String homepagetitle, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagetitle='"+reger.core.Util.cleanForSQL(homepagetitle)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateTimezoneid(java.util.Calendar createdate, String timezoneid) {
        return findByCreatedateTimezoneid(createdate, timezoneid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateTimezoneid(java.util.Calendar createdate, String timezoneid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateJspopup(java.util.Calendar createdate, int jspopup) {
        return findByCreatedateJspopup(createdate, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateJspopup(java.util.Calendar createdate, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateHomepagecalendar(java.util.Calendar createdate, boolean homepagecalendar) {
        return findByCreatedateHomepagecalendar(createdate, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateHomepagecalendar(java.util.Calendar createdate, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateMessagesstatus(java.util.Calendar createdate, boolean messagesstatus) {
        return findByCreatedateMessagesstatus(createdate, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateMessagesstatus(java.util.Calendar createdate, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateMessagesapproval(java.util.Calendar createdate, boolean messagesapproval) {
        return findByCreatedateMessagesapproval(createdate, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateMessagesapproval(java.util.Calendar createdate, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateAdmintools(java.util.Calendar createdate, boolean admintools) {
        return findByCreatedateAdmintools(createdate, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateAdmintools(java.util.Calendar createdate, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedatePingweblogscom(java.util.Calendar createdate, boolean pingweblogscom) {
        return findByCreatedatePingweblogscom(createdate, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedatePingweblogscom(java.util.Calendar createdate, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateShowhometab(java.util.Calendar createdate, boolean showhometab) {
        return findByCreatedateShowhometab(createdate, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateShowhometab(java.util.Calendar createdate, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateHometabtext(java.util.Calendar createdate, String hometabtext) {
        return findByCreatedateHometabtext(createdate, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateHometabtext(java.util.Calendar createdate, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateShowlogintab(java.util.Calendar createdate, boolean showlogintab) {
        return findByCreatedateShowlogintab(createdate, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateShowlogintab(java.util.Calendar createdate, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateDisplaycharsinsummary(java.util.Calendar createdate, int displaycharsinsummary) {
        return findByCreatedateDisplaycharsinsummary(createdate, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateDisplaycharsinsummary(java.util.Calendar createdate, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateDisplaynumberofentries(java.util.Calendar createdate, int displaynumberofentries) {
        return findByCreatedateDisplaynumberofentries(createdate, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateDisplaynumberofentries(java.util.Calendar createdate, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateUserelatedlinks(java.util.Calendar createdate, boolean userelatedlinks) {
        return findByCreatedateUserelatedlinks(createdate, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateUserelatedlinks(java.util.Calendar createdate, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateFavesitetitle(java.util.Calendar createdate, String favesitetitle) {
        return findByCreatedateFavesitetitle(createdate, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateFavesitetitle(java.util.Calendar createdate, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateFavesiteon(java.util.Calendar createdate, boolean favesiteon) {
        return findByCreatedateFavesiteon(createdate, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateFavesiteon(java.util.Calendar createdate, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateOnthisday(java.util.Calendar createdate, boolean onthisday) {
        return findByCreatedateOnthisday(createdate, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateOnthisday(java.util.Calendar createdate, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateEmailnewsletter(java.util.Calendar createdate, int emailnewsletter) {
        return findByCreatedateEmailnewsletter(createdate, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateEmailnewsletter(java.util.Calendar createdate, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateEmailsendhour(java.util.Calendar createdate, int emailsendhour) {
        return findByCreatedateEmailsendhour(createdate, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateEmailsendhour(java.util.Calendar createdate, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateMonthlycharge(java.util.Calendar createdate, double monthlycharge) {
        return findByCreatedateMonthlycharge(createdate, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateMonthlycharge(java.util.Calendar createdate, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIssearchmysiteon(java.util.Calendar createdate, boolean issearchmysiteon) {
        return findByCreatedateIssearchmysiteon(createdate, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIssearchmysiteon(java.util.Calendar createdate, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIstrackbackon(java.util.Calendar createdate, boolean istrackbackon) {
        return findByCreatedateIstrackbackon(createdate, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIstrackbackon(java.util.Calendar createdate, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIslistedindirectory(java.util.Calendar createdate, boolean islistedindirectory) {
        return findByCreatedateIslistedindirectory(createdate, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIslistedindirectory(java.util.Calendar createdate, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateTrackbackrequiresapproval(java.util.Calendar createdate, boolean trackbackrequiresapproval) {
        return findByCreatedateTrackbackrequiresapproval(createdate, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateTrackbackrequiresapproval(java.util.Calendar createdate, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIstimeperiodon(java.util.Calendar createdate, int istimeperiodon) {
        return findByCreatedateIstimeperiodon(createdate, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIstimeperiodon(java.util.Calendar createdate, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateAccounturl(java.util.Calendar createdate, String accounturl) {
        return findByCreatedateAccounturl(createdate, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateAccounturl(java.util.Calendar createdate, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIsactiveaccount(java.util.Calendar createdate, boolean isactiveaccount) {
        return findByCreatedateIsactiveaccount(createdate, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIsactiveaccount(java.util.Calendar createdate, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIsnewpendingadminapproval(java.util.Calendar createdate, boolean isnewpendingadminapproval) {
        return findByCreatedateIsnewpendingadminapproval(createdate, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIsnewpendingadminapproval(java.util.Calendar createdate, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateHptemplateid(java.util.Calendar createdate, int hptemplateid) {
        return findByCreatedateHptemplateid(createdate, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateHptemplateid(java.util.Calendar createdate, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateEntlisttemplateid(java.util.Calendar createdate, int entlisttemplateid) {
        return findByCreatedateEntlisttemplateid(createdate, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateEntlisttemplateid(java.util.Calendar createdate, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateSitetemplateid(java.util.Calendar createdate, int sitetemplateid) {
        return findByCreatedateSitetemplateid(createdate, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateSitetemplateid(java.util.Calendar createdate, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateCustomservername2(java.util.Calendar createdate, String customservername2) {
        return findByCreatedateCustomservername2(createdate, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateCustomservername2(java.util.Calendar createdate, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateCustomservername3(java.util.Calendar createdate, String customservername3) {
        return findByCreatedateCustomservername3(createdate, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateCustomservername3(java.util.Calendar createdate, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateAccountemail(java.util.Calendar createdate, String accountemail) {
        return findByCreatedateAccountemail(createdate, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateAccountemail(java.util.Calendar createdate, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateNewslettersubject(java.util.Calendar createdate, String newslettersubject) {
        return findByCreatedateNewslettersubject(createdate, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateNewslettersubject(java.util.Calendar createdate, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateEncryptedlicense(java.util.Calendar createdate, String encryptedlicense) {
        return findByCreatedateEncryptedlicense(createdate, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateEncryptedlicense(java.util.Calendar createdate, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateIsbillingokencrypted(java.util.Calendar createdate, String isbillingokencrypted) {
        return findByCreatedateIsbillingokencrypted(createdate, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateIsbillingokencrypted(java.util.Calendar createdate, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateBillingerror(java.util.Calendar createdate, String billingerror) {
        return findByCreatedateBillingerror(createdate, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateBillingerror(java.util.Calendar createdate, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateLastbillingcheck(java.util.Calendar createdate, java.util.Calendar lastbillingcheck) {
        return findByCreatedateLastbillingcheck(createdate, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateLastbillingcheck(java.util.Calendar createdate, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateGooglemapsapikey(java.util.Calendar createdate, String googlemapsapikey) {
        return findByCreatedateGooglemapsapikey(createdate, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateGooglemapsapikey(java.util.Calendar createdate, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCreatedateMaxspaceinbytes(java.util.Calendar createdate, double maxspaceinbytes) {
        return findByCreatedateMaxspaceinbytes(createdate, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCreatedateMaxspaceinbytes(java.util.Calendar createdate, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE createdate='"+reger.core.TimeUtils.dateformatfordb(createdate)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidJspopup(String timezoneid, int jspopup) {
        return findByTimezoneidJspopup(timezoneid, jspopup, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidJspopup(String timezoneid, int jspopup, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', jspopup='"+jspopup+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidHomepagecalendar(String timezoneid, boolean homepagecalendar) {
        return findByTimezoneidHomepagecalendar(timezoneid, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidHomepagecalendar(String timezoneid, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidMessagesstatus(String timezoneid, boolean messagesstatus) {
        return findByTimezoneidMessagesstatus(timezoneid, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidMessagesstatus(String timezoneid, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidMessagesapproval(String timezoneid, boolean messagesapproval) {
        return findByTimezoneidMessagesapproval(timezoneid, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidMessagesapproval(String timezoneid, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidAdmintools(String timezoneid, boolean admintools) {
        return findByTimezoneidAdmintools(timezoneid, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidAdmintools(String timezoneid, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidPingweblogscom(String timezoneid, boolean pingweblogscom) {
        return findByTimezoneidPingweblogscom(timezoneid, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidPingweblogscom(String timezoneid, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidShowhometab(String timezoneid, boolean showhometab) {
        return findByTimezoneidShowhometab(timezoneid, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidShowhometab(String timezoneid, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidHometabtext(String timezoneid, String hometabtext) {
        return findByTimezoneidHometabtext(timezoneid, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidHometabtext(String timezoneid, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidShowlogintab(String timezoneid, boolean showlogintab) {
        return findByTimezoneidShowlogintab(timezoneid, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidShowlogintab(String timezoneid, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidDisplaycharsinsummary(String timezoneid, int displaycharsinsummary) {
        return findByTimezoneidDisplaycharsinsummary(timezoneid, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidDisplaycharsinsummary(String timezoneid, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidDisplaynumberofentries(String timezoneid, int displaynumberofentries) {
        return findByTimezoneidDisplaynumberofentries(timezoneid, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidDisplaynumberofentries(String timezoneid, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidUserelatedlinks(String timezoneid, boolean userelatedlinks) {
        return findByTimezoneidUserelatedlinks(timezoneid, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidUserelatedlinks(String timezoneid, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidFavesitetitle(String timezoneid, String favesitetitle) {
        return findByTimezoneidFavesitetitle(timezoneid, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidFavesitetitle(String timezoneid, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidFavesiteon(String timezoneid, boolean favesiteon) {
        return findByTimezoneidFavesiteon(timezoneid, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidFavesiteon(String timezoneid, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidOnthisday(String timezoneid, boolean onthisday) {
        return findByTimezoneidOnthisday(timezoneid, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidOnthisday(String timezoneid, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidEmailnewsletter(String timezoneid, int emailnewsletter) {
        return findByTimezoneidEmailnewsletter(timezoneid, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidEmailnewsletter(String timezoneid, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidEmailsendhour(String timezoneid, int emailsendhour) {
        return findByTimezoneidEmailsendhour(timezoneid, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidEmailsendhour(String timezoneid, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidMonthlycharge(String timezoneid, double monthlycharge) {
        return findByTimezoneidMonthlycharge(timezoneid, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidMonthlycharge(String timezoneid, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIssearchmysiteon(String timezoneid, boolean issearchmysiteon) {
        return findByTimezoneidIssearchmysiteon(timezoneid, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIssearchmysiteon(String timezoneid, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIstrackbackon(String timezoneid, boolean istrackbackon) {
        return findByTimezoneidIstrackbackon(timezoneid, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIstrackbackon(String timezoneid, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIslistedindirectory(String timezoneid, boolean islistedindirectory) {
        return findByTimezoneidIslistedindirectory(timezoneid, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIslistedindirectory(String timezoneid, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidTrackbackrequiresapproval(String timezoneid, boolean trackbackrequiresapproval) {
        return findByTimezoneidTrackbackrequiresapproval(timezoneid, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidTrackbackrequiresapproval(String timezoneid, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIstimeperiodon(String timezoneid, int istimeperiodon) {
        return findByTimezoneidIstimeperiodon(timezoneid, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIstimeperiodon(String timezoneid, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidAccounturl(String timezoneid, String accounturl) {
        return findByTimezoneidAccounturl(timezoneid, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidAccounturl(String timezoneid, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIsactiveaccount(String timezoneid, boolean isactiveaccount) {
        return findByTimezoneidIsactiveaccount(timezoneid, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIsactiveaccount(String timezoneid, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIsnewpendingadminapproval(String timezoneid, boolean isnewpendingadminapproval) {
        return findByTimezoneidIsnewpendingadminapproval(timezoneid, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIsnewpendingadminapproval(String timezoneid, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidHptemplateid(String timezoneid, int hptemplateid) {
        return findByTimezoneidHptemplateid(timezoneid, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidHptemplateid(String timezoneid, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidEntlisttemplateid(String timezoneid, int entlisttemplateid) {
        return findByTimezoneidEntlisttemplateid(timezoneid, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidEntlisttemplateid(String timezoneid, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidSitetemplateid(String timezoneid, int sitetemplateid) {
        return findByTimezoneidSitetemplateid(timezoneid, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidSitetemplateid(String timezoneid, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidCustomservername2(String timezoneid, String customservername2) {
        return findByTimezoneidCustomservername2(timezoneid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidCustomservername2(String timezoneid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidCustomservername3(String timezoneid, String customservername3) {
        return findByTimezoneidCustomservername3(timezoneid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidCustomservername3(String timezoneid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidAccountemail(String timezoneid, String accountemail) {
        return findByTimezoneidAccountemail(timezoneid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidAccountemail(String timezoneid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidNewslettersubject(String timezoneid, String newslettersubject) {
        return findByTimezoneidNewslettersubject(timezoneid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidNewslettersubject(String timezoneid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidEncryptedlicense(String timezoneid, String encryptedlicense) {
        return findByTimezoneidEncryptedlicense(timezoneid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidEncryptedlicense(String timezoneid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidIsbillingokencrypted(String timezoneid, String isbillingokencrypted) {
        return findByTimezoneidIsbillingokencrypted(timezoneid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidIsbillingokencrypted(String timezoneid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidBillingerror(String timezoneid, String billingerror) {
        return findByTimezoneidBillingerror(timezoneid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidBillingerror(String timezoneid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidLastbillingcheck(String timezoneid, java.util.Calendar lastbillingcheck) {
        return findByTimezoneidLastbillingcheck(timezoneid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidLastbillingcheck(String timezoneid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidGooglemapsapikey(String timezoneid, String googlemapsapikey) {
        return findByTimezoneidGooglemapsapikey(timezoneid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidGooglemapsapikey(String timezoneid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTimezoneidMaxspaceinbytes(String timezoneid, double maxspaceinbytes) {
        return findByTimezoneidMaxspaceinbytes(timezoneid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTimezoneidMaxspaceinbytes(String timezoneid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE timezoneid='"+reger.core.Util.cleanForSQL(timezoneid)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupHomepagecalendar(int jspopup, boolean homepagecalendar) {
        return findByJspopupHomepagecalendar(jspopup, homepagecalendar, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupHomepagecalendar(int jspopup, boolean homepagecalendar, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupMessagesstatus(int jspopup, boolean messagesstatus) {
        return findByJspopupMessagesstatus(jspopup, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupMessagesstatus(int jspopup, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupMessagesapproval(int jspopup, boolean messagesapproval) {
        return findByJspopupMessagesapproval(jspopup, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupMessagesapproval(int jspopup, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupAdmintools(int jspopup, boolean admintools) {
        return findByJspopupAdmintools(jspopup, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupAdmintools(int jspopup, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupPingweblogscom(int jspopup, boolean pingweblogscom) {
        return findByJspopupPingweblogscom(jspopup, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupPingweblogscom(int jspopup, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupShowhometab(int jspopup, boolean showhometab) {
        return findByJspopupShowhometab(jspopup, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupShowhometab(int jspopup, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupHometabtext(int jspopup, String hometabtext) {
        return findByJspopupHometabtext(jspopup, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupHometabtext(int jspopup, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupShowlogintab(int jspopup, boolean showlogintab) {
        return findByJspopupShowlogintab(jspopup, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupShowlogintab(int jspopup, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupDisplaycharsinsummary(int jspopup, int displaycharsinsummary) {
        return findByJspopupDisplaycharsinsummary(jspopup, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupDisplaycharsinsummary(int jspopup, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupDisplaynumberofentries(int jspopup, int displaynumberofentries) {
        return findByJspopupDisplaynumberofentries(jspopup, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupDisplaynumberofentries(int jspopup, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupUserelatedlinks(int jspopup, boolean userelatedlinks) {
        return findByJspopupUserelatedlinks(jspopup, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupUserelatedlinks(int jspopup, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupFavesitetitle(int jspopup, String favesitetitle) {
        return findByJspopupFavesitetitle(jspopup, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupFavesitetitle(int jspopup, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupFavesiteon(int jspopup, boolean favesiteon) {
        return findByJspopupFavesiteon(jspopup, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupFavesiteon(int jspopup, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupOnthisday(int jspopup, boolean onthisday) {
        return findByJspopupOnthisday(jspopup, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupOnthisday(int jspopup, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupEmailnewsletter(int jspopup, int emailnewsletter) {
        return findByJspopupEmailnewsletter(jspopup, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupEmailnewsletter(int jspopup, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupEmailsendhour(int jspopup, int emailsendhour) {
        return findByJspopupEmailsendhour(jspopup, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupEmailsendhour(int jspopup, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupMonthlycharge(int jspopup, double monthlycharge) {
        return findByJspopupMonthlycharge(jspopup, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupMonthlycharge(int jspopup, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIssearchmysiteon(int jspopup, boolean issearchmysiteon) {
        return findByJspopupIssearchmysiteon(jspopup, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIssearchmysiteon(int jspopup, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIstrackbackon(int jspopup, boolean istrackbackon) {
        return findByJspopupIstrackbackon(jspopup, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIstrackbackon(int jspopup, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIslistedindirectory(int jspopup, boolean islistedindirectory) {
        return findByJspopupIslistedindirectory(jspopup, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIslistedindirectory(int jspopup, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupTrackbackrequiresapproval(int jspopup, boolean trackbackrequiresapproval) {
        return findByJspopupTrackbackrequiresapproval(jspopup, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupTrackbackrequiresapproval(int jspopup, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIstimeperiodon(int jspopup, int istimeperiodon) {
        return findByJspopupIstimeperiodon(jspopup, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIstimeperiodon(int jspopup, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupAccounturl(int jspopup, String accounturl) {
        return findByJspopupAccounturl(jspopup, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupAccounturl(int jspopup, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIsactiveaccount(int jspopup, boolean isactiveaccount) {
        return findByJspopupIsactiveaccount(jspopup, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIsactiveaccount(int jspopup, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIsnewpendingadminapproval(int jspopup, boolean isnewpendingadminapproval) {
        return findByJspopupIsnewpendingadminapproval(jspopup, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIsnewpendingadminapproval(int jspopup, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupHptemplateid(int jspopup, int hptemplateid) {
        return findByJspopupHptemplateid(jspopup, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupHptemplateid(int jspopup, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupEntlisttemplateid(int jspopup, int entlisttemplateid) {
        return findByJspopupEntlisttemplateid(jspopup, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupEntlisttemplateid(int jspopup, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupSitetemplateid(int jspopup, int sitetemplateid) {
        return findByJspopupSitetemplateid(jspopup, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupSitetemplateid(int jspopup, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupCustomservername2(int jspopup, String customservername2) {
        return findByJspopupCustomservername2(jspopup, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupCustomservername2(int jspopup, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupCustomservername3(int jspopup, String customservername3) {
        return findByJspopupCustomservername3(jspopup, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupCustomservername3(int jspopup, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupAccountemail(int jspopup, String accountemail) {
        return findByJspopupAccountemail(jspopup, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupAccountemail(int jspopup, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupNewslettersubject(int jspopup, String newslettersubject) {
        return findByJspopupNewslettersubject(jspopup, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupNewslettersubject(int jspopup, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupEncryptedlicense(int jspopup, String encryptedlicense) {
        return findByJspopupEncryptedlicense(jspopup, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupEncryptedlicense(int jspopup, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupIsbillingokencrypted(int jspopup, String isbillingokencrypted) {
        return findByJspopupIsbillingokencrypted(jspopup, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupIsbillingokencrypted(int jspopup, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupBillingerror(int jspopup, String billingerror) {
        return findByJspopupBillingerror(jspopup, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupBillingerror(int jspopup, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupLastbillingcheck(int jspopup, java.util.Calendar lastbillingcheck) {
        return findByJspopupLastbillingcheck(jspopup, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupLastbillingcheck(int jspopup, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupGooglemapsapikey(int jspopup, String googlemapsapikey) {
        return findByJspopupGooglemapsapikey(jspopup, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupGooglemapsapikey(int jspopup, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByJspopupMaxspaceinbytes(int jspopup, double maxspaceinbytes) {
        return findByJspopupMaxspaceinbytes(jspopup, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByJspopupMaxspaceinbytes(int jspopup, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE jspopup='"+jspopup+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMessagesstatus(boolean homepagecalendar, boolean messagesstatus) {
        return findByHomepagecalendarMessagesstatus(homepagecalendar, messagesstatus, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMessagesstatus(boolean homepagecalendar, boolean messagesstatus, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMessagesapproval(boolean homepagecalendar, boolean messagesapproval) {
        return findByHomepagecalendarMessagesapproval(homepagecalendar, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMessagesapproval(boolean homepagecalendar, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarAdmintools(boolean homepagecalendar, boolean admintools) {
        return findByHomepagecalendarAdmintools(homepagecalendar, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarAdmintools(boolean homepagecalendar, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarPingweblogscom(boolean homepagecalendar, boolean pingweblogscom) {
        return findByHomepagecalendarPingweblogscom(homepagecalendar, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarPingweblogscom(boolean homepagecalendar, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarShowhometab(boolean homepagecalendar, boolean showhometab) {
        return findByHomepagecalendarShowhometab(homepagecalendar, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarShowhometab(boolean homepagecalendar, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarHometabtext(boolean homepagecalendar, String hometabtext) {
        return findByHomepagecalendarHometabtext(homepagecalendar, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarHometabtext(boolean homepagecalendar, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarShowlogintab(boolean homepagecalendar, boolean showlogintab) {
        return findByHomepagecalendarShowlogintab(homepagecalendar, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarShowlogintab(boolean homepagecalendar, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarDisplaycharsinsummary(boolean homepagecalendar, int displaycharsinsummary) {
        return findByHomepagecalendarDisplaycharsinsummary(homepagecalendar, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarDisplaycharsinsummary(boolean homepagecalendar, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarDisplaynumberofentries(boolean homepagecalendar, int displaynumberofentries) {
        return findByHomepagecalendarDisplaynumberofentries(homepagecalendar, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarDisplaynumberofentries(boolean homepagecalendar, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarUserelatedlinks(boolean homepagecalendar, boolean userelatedlinks) {
        return findByHomepagecalendarUserelatedlinks(homepagecalendar, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarUserelatedlinks(boolean homepagecalendar, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarFavesitetitle(boolean homepagecalendar, String favesitetitle) {
        return findByHomepagecalendarFavesitetitle(homepagecalendar, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarFavesitetitle(boolean homepagecalendar, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarFavesiteon(boolean homepagecalendar, boolean favesiteon) {
        return findByHomepagecalendarFavesiteon(homepagecalendar, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarFavesiteon(boolean homepagecalendar, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarOnthisday(boolean homepagecalendar, boolean onthisday) {
        return findByHomepagecalendarOnthisday(homepagecalendar, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarOnthisday(boolean homepagecalendar, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEmailnewsletter(boolean homepagecalendar, int emailnewsletter) {
        return findByHomepagecalendarEmailnewsletter(homepagecalendar, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEmailnewsletter(boolean homepagecalendar, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEmailsendhour(boolean homepagecalendar, int emailsendhour) {
        return findByHomepagecalendarEmailsendhour(homepagecalendar, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEmailsendhour(boolean homepagecalendar, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMonthlycharge(boolean homepagecalendar, double monthlycharge) {
        return findByHomepagecalendarMonthlycharge(homepagecalendar, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMonthlycharge(boolean homepagecalendar, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIssearchmysiteon(boolean homepagecalendar, boolean issearchmysiteon) {
        return findByHomepagecalendarIssearchmysiteon(homepagecalendar, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIssearchmysiteon(boolean homepagecalendar, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIstrackbackon(boolean homepagecalendar, boolean istrackbackon) {
        return findByHomepagecalendarIstrackbackon(homepagecalendar, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIstrackbackon(boolean homepagecalendar, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIslistedindirectory(boolean homepagecalendar, boolean islistedindirectory) {
        return findByHomepagecalendarIslistedindirectory(homepagecalendar, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIslistedindirectory(boolean homepagecalendar, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarTrackbackrequiresapproval(boolean homepagecalendar, boolean trackbackrequiresapproval) {
        return findByHomepagecalendarTrackbackrequiresapproval(homepagecalendar, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarTrackbackrequiresapproval(boolean homepagecalendar, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIstimeperiodon(boolean homepagecalendar, int istimeperiodon) {
        return findByHomepagecalendarIstimeperiodon(homepagecalendar, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIstimeperiodon(boolean homepagecalendar, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarAccounturl(boolean homepagecalendar, String accounturl) {
        return findByHomepagecalendarAccounturl(homepagecalendar, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarAccounturl(boolean homepagecalendar, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIsactiveaccount(boolean homepagecalendar, boolean isactiveaccount) {
        return findByHomepagecalendarIsactiveaccount(homepagecalendar, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIsactiveaccount(boolean homepagecalendar, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIsnewpendingadminapproval(boolean homepagecalendar, boolean isnewpendingadminapproval) {
        return findByHomepagecalendarIsnewpendingadminapproval(homepagecalendar, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIsnewpendingadminapproval(boolean homepagecalendar, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarHptemplateid(boolean homepagecalendar, int hptemplateid) {
        return findByHomepagecalendarHptemplateid(homepagecalendar, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarHptemplateid(boolean homepagecalendar, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEntlisttemplateid(boolean homepagecalendar, int entlisttemplateid) {
        return findByHomepagecalendarEntlisttemplateid(homepagecalendar, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEntlisttemplateid(boolean homepagecalendar, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarSitetemplateid(boolean homepagecalendar, int sitetemplateid) {
        return findByHomepagecalendarSitetemplateid(homepagecalendar, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarSitetemplateid(boolean homepagecalendar, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarCustomservername2(boolean homepagecalendar, String customservername2) {
        return findByHomepagecalendarCustomservername2(homepagecalendar, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarCustomservername2(boolean homepagecalendar, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarCustomservername3(boolean homepagecalendar, String customservername3) {
        return findByHomepagecalendarCustomservername3(homepagecalendar, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarCustomservername3(boolean homepagecalendar, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarAccountemail(boolean homepagecalendar, String accountemail) {
        return findByHomepagecalendarAccountemail(homepagecalendar, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarAccountemail(boolean homepagecalendar, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarNewslettersubject(boolean homepagecalendar, String newslettersubject) {
        return findByHomepagecalendarNewslettersubject(homepagecalendar, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarNewslettersubject(boolean homepagecalendar, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEncryptedlicense(boolean homepagecalendar, String encryptedlicense) {
        return findByHomepagecalendarEncryptedlicense(homepagecalendar, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarEncryptedlicense(boolean homepagecalendar, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIsbillingokencrypted(boolean homepagecalendar, String isbillingokencrypted) {
        return findByHomepagecalendarIsbillingokencrypted(homepagecalendar, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarIsbillingokencrypted(boolean homepagecalendar, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarBillingerror(boolean homepagecalendar, String billingerror) {
        return findByHomepagecalendarBillingerror(homepagecalendar, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarBillingerror(boolean homepagecalendar, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarLastbillingcheck(boolean homepagecalendar, java.util.Calendar lastbillingcheck) {
        return findByHomepagecalendarLastbillingcheck(homepagecalendar, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarLastbillingcheck(boolean homepagecalendar, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarGooglemapsapikey(boolean homepagecalendar, String googlemapsapikey) {
        return findByHomepagecalendarGooglemapsapikey(homepagecalendar, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarGooglemapsapikey(boolean homepagecalendar, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMaxspaceinbytes(boolean homepagecalendar, double maxspaceinbytes) {
        return findByHomepagecalendarMaxspaceinbytes(homepagecalendar, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHomepagecalendarMaxspaceinbytes(boolean homepagecalendar, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE homepagecalendar='"+reger.core.Util.booleanAsSQLText(homepagecalendar)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusMessagesapproval(boolean messagesstatus, boolean messagesapproval) {
        return findByMessagesstatusMessagesapproval(messagesstatus, messagesapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusMessagesapproval(boolean messagesstatus, boolean messagesapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusAdmintools(boolean messagesstatus, boolean admintools) {
        return findByMessagesstatusAdmintools(messagesstatus, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusAdmintools(boolean messagesstatus, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusPingweblogscom(boolean messagesstatus, boolean pingweblogscom) {
        return findByMessagesstatusPingweblogscom(messagesstatus, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusPingweblogscom(boolean messagesstatus, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusShowhometab(boolean messagesstatus, boolean showhometab) {
        return findByMessagesstatusShowhometab(messagesstatus, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusShowhometab(boolean messagesstatus, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusHometabtext(boolean messagesstatus, String hometabtext) {
        return findByMessagesstatusHometabtext(messagesstatus, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusHometabtext(boolean messagesstatus, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusShowlogintab(boolean messagesstatus, boolean showlogintab) {
        return findByMessagesstatusShowlogintab(messagesstatus, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusShowlogintab(boolean messagesstatus, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusDisplaycharsinsummary(boolean messagesstatus, int displaycharsinsummary) {
        return findByMessagesstatusDisplaycharsinsummary(messagesstatus, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusDisplaycharsinsummary(boolean messagesstatus, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusDisplaynumberofentries(boolean messagesstatus, int displaynumberofentries) {
        return findByMessagesstatusDisplaynumberofentries(messagesstatus, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusDisplaynumberofentries(boolean messagesstatus, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusUserelatedlinks(boolean messagesstatus, boolean userelatedlinks) {
        return findByMessagesstatusUserelatedlinks(messagesstatus, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusUserelatedlinks(boolean messagesstatus, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusFavesitetitle(boolean messagesstatus, String favesitetitle) {
        return findByMessagesstatusFavesitetitle(messagesstatus, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusFavesitetitle(boolean messagesstatus, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusFavesiteon(boolean messagesstatus, boolean favesiteon) {
        return findByMessagesstatusFavesiteon(messagesstatus, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusFavesiteon(boolean messagesstatus, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusOnthisday(boolean messagesstatus, boolean onthisday) {
        return findByMessagesstatusOnthisday(messagesstatus, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusOnthisday(boolean messagesstatus, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEmailnewsletter(boolean messagesstatus, int emailnewsletter) {
        return findByMessagesstatusEmailnewsletter(messagesstatus, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEmailnewsletter(boolean messagesstatus, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEmailsendhour(boolean messagesstatus, int emailsendhour) {
        return findByMessagesstatusEmailsendhour(messagesstatus, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEmailsendhour(boolean messagesstatus, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusMonthlycharge(boolean messagesstatus, double monthlycharge) {
        return findByMessagesstatusMonthlycharge(messagesstatus, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusMonthlycharge(boolean messagesstatus, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIssearchmysiteon(boolean messagesstatus, boolean issearchmysiteon) {
        return findByMessagesstatusIssearchmysiteon(messagesstatus, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIssearchmysiteon(boolean messagesstatus, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIstrackbackon(boolean messagesstatus, boolean istrackbackon) {
        return findByMessagesstatusIstrackbackon(messagesstatus, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIstrackbackon(boolean messagesstatus, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIslistedindirectory(boolean messagesstatus, boolean islistedindirectory) {
        return findByMessagesstatusIslistedindirectory(messagesstatus, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIslistedindirectory(boolean messagesstatus, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusTrackbackrequiresapproval(boolean messagesstatus, boolean trackbackrequiresapproval) {
        return findByMessagesstatusTrackbackrequiresapproval(messagesstatus, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusTrackbackrequiresapproval(boolean messagesstatus, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIstimeperiodon(boolean messagesstatus, int istimeperiodon) {
        return findByMessagesstatusIstimeperiodon(messagesstatus, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIstimeperiodon(boolean messagesstatus, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusAccounturl(boolean messagesstatus, String accounturl) {
        return findByMessagesstatusAccounturl(messagesstatus, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusAccounturl(boolean messagesstatus, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIsactiveaccount(boolean messagesstatus, boolean isactiveaccount) {
        return findByMessagesstatusIsactiveaccount(messagesstatus, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIsactiveaccount(boolean messagesstatus, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIsnewpendingadminapproval(boolean messagesstatus, boolean isnewpendingadminapproval) {
        return findByMessagesstatusIsnewpendingadminapproval(messagesstatus, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIsnewpendingadminapproval(boolean messagesstatus, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusHptemplateid(boolean messagesstatus, int hptemplateid) {
        return findByMessagesstatusHptemplateid(messagesstatus, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusHptemplateid(boolean messagesstatus, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEntlisttemplateid(boolean messagesstatus, int entlisttemplateid) {
        return findByMessagesstatusEntlisttemplateid(messagesstatus, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEntlisttemplateid(boolean messagesstatus, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusSitetemplateid(boolean messagesstatus, int sitetemplateid) {
        return findByMessagesstatusSitetemplateid(messagesstatus, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusSitetemplateid(boolean messagesstatus, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusCustomservername2(boolean messagesstatus, String customservername2) {
        return findByMessagesstatusCustomservername2(messagesstatus, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusCustomservername2(boolean messagesstatus, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusCustomservername3(boolean messagesstatus, String customservername3) {
        return findByMessagesstatusCustomservername3(messagesstatus, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusCustomservername3(boolean messagesstatus, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusAccountemail(boolean messagesstatus, String accountemail) {
        return findByMessagesstatusAccountemail(messagesstatus, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusAccountemail(boolean messagesstatus, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusNewslettersubject(boolean messagesstatus, String newslettersubject) {
        return findByMessagesstatusNewslettersubject(messagesstatus, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusNewslettersubject(boolean messagesstatus, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEncryptedlicense(boolean messagesstatus, String encryptedlicense) {
        return findByMessagesstatusEncryptedlicense(messagesstatus, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusEncryptedlicense(boolean messagesstatus, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIsbillingokencrypted(boolean messagesstatus, String isbillingokencrypted) {
        return findByMessagesstatusIsbillingokencrypted(messagesstatus, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusIsbillingokencrypted(boolean messagesstatus, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusBillingerror(boolean messagesstatus, String billingerror) {
        return findByMessagesstatusBillingerror(messagesstatus, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusBillingerror(boolean messagesstatus, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusLastbillingcheck(boolean messagesstatus, java.util.Calendar lastbillingcheck) {
        return findByMessagesstatusLastbillingcheck(messagesstatus, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusLastbillingcheck(boolean messagesstatus, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusGooglemapsapikey(boolean messagesstatus, String googlemapsapikey) {
        return findByMessagesstatusGooglemapsapikey(messagesstatus, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusGooglemapsapikey(boolean messagesstatus, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesstatusMaxspaceinbytes(boolean messagesstatus, double maxspaceinbytes) {
        return findByMessagesstatusMaxspaceinbytes(messagesstatus, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesstatusMaxspaceinbytes(boolean messagesstatus, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesstatus='"+reger.core.Util.booleanAsSQLText(messagesstatus)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalAdmintools(boolean messagesapproval, boolean admintools) {
        return findByMessagesapprovalAdmintools(messagesapproval, admintools, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalAdmintools(boolean messagesapproval, boolean admintools, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalPingweblogscom(boolean messagesapproval, boolean pingweblogscom) {
        return findByMessagesapprovalPingweblogscom(messagesapproval, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalPingweblogscom(boolean messagesapproval, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalShowhometab(boolean messagesapproval, boolean showhometab) {
        return findByMessagesapprovalShowhometab(messagesapproval, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalShowhometab(boolean messagesapproval, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalHometabtext(boolean messagesapproval, String hometabtext) {
        return findByMessagesapprovalHometabtext(messagesapproval, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalHometabtext(boolean messagesapproval, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalShowlogintab(boolean messagesapproval, boolean showlogintab) {
        return findByMessagesapprovalShowlogintab(messagesapproval, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalShowlogintab(boolean messagesapproval, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalDisplaycharsinsummary(boolean messagesapproval, int displaycharsinsummary) {
        return findByMessagesapprovalDisplaycharsinsummary(messagesapproval, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalDisplaycharsinsummary(boolean messagesapproval, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalDisplaynumberofentries(boolean messagesapproval, int displaynumberofentries) {
        return findByMessagesapprovalDisplaynumberofentries(messagesapproval, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalDisplaynumberofentries(boolean messagesapproval, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalUserelatedlinks(boolean messagesapproval, boolean userelatedlinks) {
        return findByMessagesapprovalUserelatedlinks(messagesapproval, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalUserelatedlinks(boolean messagesapproval, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalFavesitetitle(boolean messagesapproval, String favesitetitle) {
        return findByMessagesapprovalFavesitetitle(messagesapproval, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalFavesitetitle(boolean messagesapproval, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalFavesiteon(boolean messagesapproval, boolean favesiteon) {
        return findByMessagesapprovalFavesiteon(messagesapproval, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalFavesiteon(boolean messagesapproval, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalOnthisday(boolean messagesapproval, boolean onthisday) {
        return findByMessagesapprovalOnthisday(messagesapproval, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalOnthisday(boolean messagesapproval, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEmailnewsletter(boolean messagesapproval, int emailnewsletter) {
        return findByMessagesapprovalEmailnewsletter(messagesapproval, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEmailnewsletter(boolean messagesapproval, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEmailsendhour(boolean messagesapproval, int emailsendhour) {
        return findByMessagesapprovalEmailsendhour(messagesapproval, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEmailsendhour(boolean messagesapproval, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalMonthlycharge(boolean messagesapproval, double monthlycharge) {
        return findByMessagesapprovalMonthlycharge(messagesapproval, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalMonthlycharge(boolean messagesapproval, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIssearchmysiteon(boolean messagesapproval, boolean issearchmysiteon) {
        return findByMessagesapprovalIssearchmysiteon(messagesapproval, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIssearchmysiteon(boolean messagesapproval, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIstrackbackon(boolean messagesapproval, boolean istrackbackon) {
        return findByMessagesapprovalIstrackbackon(messagesapproval, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIstrackbackon(boolean messagesapproval, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIslistedindirectory(boolean messagesapproval, boolean islistedindirectory) {
        return findByMessagesapprovalIslistedindirectory(messagesapproval, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIslistedindirectory(boolean messagesapproval, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalTrackbackrequiresapproval(boolean messagesapproval, boolean trackbackrequiresapproval) {
        return findByMessagesapprovalTrackbackrequiresapproval(messagesapproval, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalTrackbackrequiresapproval(boolean messagesapproval, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIstimeperiodon(boolean messagesapproval, int istimeperiodon) {
        return findByMessagesapprovalIstimeperiodon(messagesapproval, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIstimeperiodon(boolean messagesapproval, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalAccounturl(boolean messagesapproval, String accounturl) {
        return findByMessagesapprovalAccounturl(messagesapproval, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalAccounturl(boolean messagesapproval, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIsactiveaccount(boolean messagesapproval, boolean isactiveaccount) {
        return findByMessagesapprovalIsactiveaccount(messagesapproval, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIsactiveaccount(boolean messagesapproval, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIsnewpendingadminapproval(boolean messagesapproval, boolean isnewpendingadminapproval) {
        return findByMessagesapprovalIsnewpendingadminapproval(messagesapproval, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIsnewpendingadminapproval(boolean messagesapproval, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalHptemplateid(boolean messagesapproval, int hptemplateid) {
        return findByMessagesapprovalHptemplateid(messagesapproval, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalHptemplateid(boolean messagesapproval, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEntlisttemplateid(boolean messagesapproval, int entlisttemplateid) {
        return findByMessagesapprovalEntlisttemplateid(messagesapproval, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEntlisttemplateid(boolean messagesapproval, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalSitetemplateid(boolean messagesapproval, int sitetemplateid) {
        return findByMessagesapprovalSitetemplateid(messagesapproval, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalSitetemplateid(boolean messagesapproval, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalCustomservername2(boolean messagesapproval, String customservername2) {
        return findByMessagesapprovalCustomservername2(messagesapproval, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalCustomservername2(boolean messagesapproval, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalCustomservername3(boolean messagesapproval, String customservername3) {
        return findByMessagesapprovalCustomservername3(messagesapproval, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalCustomservername3(boolean messagesapproval, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalAccountemail(boolean messagesapproval, String accountemail) {
        return findByMessagesapprovalAccountemail(messagesapproval, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalAccountemail(boolean messagesapproval, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalNewslettersubject(boolean messagesapproval, String newslettersubject) {
        return findByMessagesapprovalNewslettersubject(messagesapproval, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalNewslettersubject(boolean messagesapproval, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEncryptedlicense(boolean messagesapproval, String encryptedlicense) {
        return findByMessagesapprovalEncryptedlicense(messagesapproval, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalEncryptedlicense(boolean messagesapproval, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIsbillingokencrypted(boolean messagesapproval, String isbillingokencrypted) {
        return findByMessagesapprovalIsbillingokencrypted(messagesapproval, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalIsbillingokencrypted(boolean messagesapproval, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalBillingerror(boolean messagesapproval, String billingerror) {
        return findByMessagesapprovalBillingerror(messagesapproval, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalBillingerror(boolean messagesapproval, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalLastbillingcheck(boolean messagesapproval, java.util.Calendar lastbillingcheck) {
        return findByMessagesapprovalLastbillingcheck(messagesapproval, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalLastbillingcheck(boolean messagesapproval, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalGooglemapsapikey(boolean messagesapproval, String googlemapsapikey) {
        return findByMessagesapprovalGooglemapsapikey(messagesapproval, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalGooglemapsapikey(boolean messagesapproval, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalMaxspaceinbytes(boolean messagesapproval, double maxspaceinbytes) {
        return findByMessagesapprovalMaxspaceinbytes(messagesapproval, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMessagesapprovalMaxspaceinbytes(boolean messagesapproval, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE messagesapproval='"+reger.core.Util.booleanAsSQLText(messagesapproval)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsPingweblogscom(boolean admintools, boolean pingweblogscom) {
        return findByAdmintoolsPingweblogscom(admintools, pingweblogscom, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsPingweblogscom(boolean admintools, boolean pingweblogscom, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsShowhometab(boolean admintools, boolean showhometab) {
        return findByAdmintoolsShowhometab(admintools, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsShowhometab(boolean admintools, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsHometabtext(boolean admintools, String hometabtext) {
        return findByAdmintoolsHometabtext(admintools, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsHometabtext(boolean admintools, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsShowlogintab(boolean admintools, boolean showlogintab) {
        return findByAdmintoolsShowlogintab(admintools, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsShowlogintab(boolean admintools, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsDisplaycharsinsummary(boolean admintools, int displaycharsinsummary) {
        return findByAdmintoolsDisplaycharsinsummary(admintools, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsDisplaycharsinsummary(boolean admintools, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsDisplaynumberofentries(boolean admintools, int displaynumberofentries) {
        return findByAdmintoolsDisplaynumberofentries(admintools, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsDisplaynumberofentries(boolean admintools, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsUserelatedlinks(boolean admintools, boolean userelatedlinks) {
        return findByAdmintoolsUserelatedlinks(admintools, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsUserelatedlinks(boolean admintools, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsFavesitetitle(boolean admintools, String favesitetitle) {
        return findByAdmintoolsFavesitetitle(admintools, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsFavesitetitle(boolean admintools, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsFavesiteon(boolean admintools, boolean favesiteon) {
        return findByAdmintoolsFavesiteon(admintools, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsFavesiteon(boolean admintools, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsOnthisday(boolean admintools, boolean onthisday) {
        return findByAdmintoolsOnthisday(admintools, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsOnthisday(boolean admintools, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEmailnewsletter(boolean admintools, int emailnewsletter) {
        return findByAdmintoolsEmailnewsletter(admintools, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEmailnewsletter(boolean admintools, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEmailsendhour(boolean admintools, int emailsendhour) {
        return findByAdmintoolsEmailsendhour(admintools, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEmailsendhour(boolean admintools, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsMonthlycharge(boolean admintools, double monthlycharge) {
        return findByAdmintoolsMonthlycharge(admintools, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsMonthlycharge(boolean admintools, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIssearchmysiteon(boolean admintools, boolean issearchmysiteon) {
        return findByAdmintoolsIssearchmysiteon(admintools, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIssearchmysiteon(boolean admintools, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIstrackbackon(boolean admintools, boolean istrackbackon) {
        return findByAdmintoolsIstrackbackon(admintools, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIstrackbackon(boolean admintools, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIslistedindirectory(boolean admintools, boolean islistedindirectory) {
        return findByAdmintoolsIslistedindirectory(admintools, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIslistedindirectory(boolean admintools, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsTrackbackrequiresapproval(boolean admintools, boolean trackbackrequiresapproval) {
        return findByAdmintoolsTrackbackrequiresapproval(admintools, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsTrackbackrequiresapproval(boolean admintools, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIstimeperiodon(boolean admintools, int istimeperiodon) {
        return findByAdmintoolsIstimeperiodon(admintools, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIstimeperiodon(boolean admintools, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsAccounturl(boolean admintools, String accounturl) {
        return findByAdmintoolsAccounturl(admintools, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsAccounturl(boolean admintools, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIsactiveaccount(boolean admintools, boolean isactiveaccount) {
        return findByAdmintoolsIsactiveaccount(admintools, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIsactiveaccount(boolean admintools, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIsnewpendingadminapproval(boolean admintools, boolean isnewpendingadminapproval) {
        return findByAdmintoolsIsnewpendingadminapproval(admintools, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIsnewpendingadminapproval(boolean admintools, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsHptemplateid(boolean admintools, int hptemplateid) {
        return findByAdmintoolsHptemplateid(admintools, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsHptemplateid(boolean admintools, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEntlisttemplateid(boolean admintools, int entlisttemplateid) {
        return findByAdmintoolsEntlisttemplateid(admintools, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEntlisttemplateid(boolean admintools, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsSitetemplateid(boolean admintools, int sitetemplateid) {
        return findByAdmintoolsSitetemplateid(admintools, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsSitetemplateid(boolean admintools, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsCustomservername2(boolean admintools, String customservername2) {
        return findByAdmintoolsCustomservername2(admintools, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsCustomservername2(boolean admintools, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsCustomservername3(boolean admintools, String customservername3) {
        return findByAdmintoolsCustomservername3(admintools, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsCustomservername3(boolean admintools, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsAccountemail(boolean admintools, String accountemail) {
        return findByAdmintoolsAccountemail(admintools, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsAccountemail(boolean admintools, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsNewslettersubject(boolean admintools, String newslettersubject) {
        return findByAdmintoolsNewslettersubject(admintools, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsNewslettersubject(boolean admintools, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEncryptedlicense(boolean admintools, String encryptedlicense) {
        return findByAdmintoolsEncryptedlicense(admintools, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsEncryptedlicense(boolean admintools, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIsbillingokencrypted(boolean admintools, String isbillingokencrypted) {
        return findByAdmintoolsIsbillingokencrypted(admintools, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsIsbillingokencrypted(boolean admintools, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsBillingerror(boolean admintools, String billingerror) {
        return findByAdmintoolsBillingerror(admintools, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsBillingerror(boolean admintools, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsLastbillingcheck(boolean admintools, java.util.Calendar lastbillingcheck) {
        return findByAdmintoolsLastbillingcheck(admintools, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsLastbillingcheck(boolean admintools, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsGooglemapsapikey(boolean admintools, String googlemapsapikey) {
        return findByAdmintoolsGooglemapsapikey(admintools, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsGooglemapsapikey(boolean admintools, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAdmintoolsMaxspaceinbytes(boolean admintools, double maxspaceinbytes) {
        return findByAdmintoolsMaxspaceinbytes(admintools, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAdmintoolsMaxspaceinbytes(boolean admintools, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE admintools='"+reger.core.Util.booleanAsSQLText(admintools)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomShowhometab(boolean pingweblogscom, boolean showhometab) {
        return findByPingweblogscomShowhometab(pingweblogscom, showhometab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomShowhometab(boolean pingweblogscom, boolean showhometab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomHometabtext(boolean pingweblogscom, String hometabtext) {
        return findByPingweblogscomHometabtext(pingweblogscom, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomHometabtext(boolean pingweblogscom, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomShowlogintab(boolean pingweblogscom, boolean showlogintab) {
        return findByPingweblogscomShowlogintab(pingweblogscom, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomShowlogintab(boolean pingweblogscom, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomDisplaycharsinsummary(boolean pingweblogscom, int displaycharsinsummary) {
        return findByPingweblogscomDisplaycharsinsummary(pingweblogscom, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomDisplaycharsinsummary(boolean pingweblogscom, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomDisplaynumberofentries(boolean pingweblogscom, int displaynumberofentries) {
        return findByPingweblogscomDisplaynumberofentries(pingweblogscom, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomDisplaynumberofentries(boolean pingweblogscom, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomUserelatedlinks(boolean pingweblogscom, boolean userelatedlinks) {
        return findByPingweblogscomUserelatedlinks(pingweblogscom, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomUserelatedlinks(boolean pingweblogscom, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomFavesitetitle(boolean pingweblogscom, String favesitetitle) {
        return findByPingweblogscomFavesitetitle(pingweblogscom, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomFavesitetitle(boolean pingweblogscom, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomFavesiteon(boolean pingweblogscom, boolean favesiteon) {
        return findByPingweblogscomFavesiteon(pingweblogscom, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomFavesiteon(boolean pingweblogscom, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomOnthisday(boolean pingweblogscom, boolean onthisday) {
        return findByPingweblogscomOnthisday(pingweblogscom, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomOnthisday(boolean pingweblogscom, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEmailnewsletter(boolean pingweblogscom, int emailnewsletter) {
        return findByPingweblogscomEmailnewsletter(pingweblogscom, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEmailnewsletter(boolean pingweblogscom, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEmailsendhour(boolean pingweblogscom, int emailsendhour) {
        return findByPingweblogscomEmailsendhour(pingweblogscom, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEmailsendhour(boolean pingweblogscom, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomMonthlycharge(boolean pingweblogscom, double monthlycharge) {
        return findByPingweblogscomMonthlycharge(pingweblogscom, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomMonthlycharge(boolean pingweblogscom, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIssearchmysiteon(boolean pingweblogscom, boolean issearchmysiteon) {
        return findByPingweblogscomIssearchmysiteon(pingweblogscom, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIssearchmysiteon(boolean pingweblogscom, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIstrackbackon(boolean pingweblogscom, boolean istrackbackon) {
        return findByPingweblogscomIstrackbackon(pingweblogscom, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIstrackbackon(boolean pingweblogscom, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIslistedindirectory(boolean pingweblogscom, boolean islistedindirectory) {
        return findByPingweblogscomIslistedindirectory(pingweblogscom, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIslistedindirectory(boolean pingweblogscom, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomTrackbackrequiresapproval(boolean pingweblogscom, boolean trackbackrequiresapproval) {
        return findByPingweblogscomTrackbackrequiresapproval(pingweblogscom, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomTrackbackrequiresapproval(boolean pingweblogscom, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIstimeperiodon(boolean pingweblogscom, int istimeperiodon) {
        return findByPingweblogscomIstimeperiodon(pingweblogscom, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIstimeperiodon(boolean pingweblogscom, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomAccounturl(boolean pingweblogscom, String accounturl) {
        return findByPingweblogscomAccounturl(pingweblogscom, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomAccounturl(boolean pingweblogscom, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIsactiveaccount(boolean pingweblogscom, boolean isactiveaccount) {
        return findByPingweblogscomIsactiveaccount(pingweblogscom, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIsactiveaccount(boolean pingweblogscom, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIsnewpendingadminapproval(boolean pingweblogscom, boolean isnewpendingadminapproval) {
        return findByPingweblogscomIsnewpendingadminapproval(pingweblogscom, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIsnewpendingadminapproval(boolean pingweblogscom, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomHptemplateid(boolean pingweblogscom, int hptemplateid) {
        return findByPingweblogscomHptemplateid(pingweblogscom, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomHptemplateid(boolean pingweblogscom, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEntlisttemplateid(boolean pingweblogscom, int entlisttemplateid) {
        return findByPingweblogscomEntlisttemplateid(pingweblogscom, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEntlisttemplateid(boolean pingweblogscom, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomSitetemplateid(boolean pingweblogscom, int sitetemplateid) {
        return findByPingweblogscomSitetemplateid(pingweblogscom, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomSitetemplateid(boolean pingweblogscom, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomCustomservername2(boolean pingweblogscom, String customservername2) {
        return findByPingweblogscomCustomservername2(pingweblogscom, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomCustomservername2(boolean pingweblogscom, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomCustomservername3(boolean pingweblogscom, String customservername3) {
        return findByPingweblogscomCustomservername3(pingweblogscom, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomCustomservername3(boolean pingweblogscom, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomAccountemail(boolean pingweblogscom, String accountemail) {
        return findByPingweblogscomAccountemail(pingweblogscom, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomAccountemail(boolean pingweblogscom, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomNewslettersubject(boolean pingweblogscom, String newslettersubject) {
        return findByPingweblogscomNewslettersubject(pingweblogscom, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomNewslettersubject(boolean pingweblogscom, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEncryptedlicense(boolean pingweblogscom, String encryptedlicense) {
        return findByPingweblogscomEncryptedlicense(pingweblogscom, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomEncryptedlicense(boolean pingweblogscom, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIsbillingokencrypted(boolean pingweblogscom, String isbillingokencrypted) {
        return findByPingweblogscomIsbillingokencrypted(pingweblogscom, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomIsbillingokencrypted(boolean pingweblogscom, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomBillingerror(boolean pingweblogscom, String billingerror) {
        return findByPingweblogscomBillingerror(pingweblogscom, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomBillingerror(boolean pingweblogscom, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomLastbillingcheck(boolean pingweblogscom, java.util.Calendar lastbillingcheck) {
        return findByPingweblogscomLastbillingcheck(pingweblogscom, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomLastbillingcheck(boolean pingweblogscom, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomGooglemapsapikey(boolean pingweblogscom, String googlemapsapikey) {
        return findByPingweblogscomGooglemapsapikey(pingweblogscom, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomGooglemapsapikey(boolean pingweblogscom, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByPingweblogscomMaxspaceinbytes(boolean pingweblogscom, double maxspaceinbytes) {
        return findByPingweblogscomMaxspaceinbytes(pingweblogscom, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByPingweblogscomMaxspaceinbytes(boolean pingweblogscom, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE pingweblogscom='"+reger.core.Util.booleanAsSQLText(pingweblogscom)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabHometabtext(boolean showhometab, String hometabtext) {
        return findByShowhometabHometabtext(showhometab, hometabtext, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabHometabtext(boolean showhometab, String hometabtext, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabShowlogintab(boolean showhometab, boolean showlogintab) {
        return findByShowhometabShowlogintab(showhometab, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabShowlogintab(boolean showhometab, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabDisplaycharsinsummary(boolean showhometab, int displaycharsinsummary) {
        return findByShowhometabDisplaycharsinsummary(showhometab, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabDisplaycharsinsummary(boolean showhometab, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabDisplaynumberofentries(boolean showhometab, int displaynumberofentries) {
        return findByShowhometabDisplaynumberofentries(showhometab, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabDisplaynumberofentries(boolean showhometab, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabUserelatedlinks(boolean showhometab, boolean userelatedlinks) {
        return findByShowhometabUserelatedlinks(showhometab, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabUserelatedlinks(boolean showhometab, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabFavesitetitle(boolean showhometab, String favesitetitle) {
        return findByShowhometabFavesitetitle(showhometab, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabFavesitetitle(boolean showhometab, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabFavesiteon(boolean showhometab, boolean favesiteon) {
        return findByShowhometabFavesiteon(showhometab, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabFavesiteon(boolean showhometab, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabOnthisday(boolean showhometab, boolean onthisday) {
        return findByShowhometabOnthisday(showhometab, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabOnthisday(boolean showhometab, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabEmailnewsletter(boolean showhometab, int emailnewsletter) {
        return findByShowhometabEmailnewsletter(showhometab, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabEmailnewsletter(boolean showhometab, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabEmailsendhour(boolean showhometab, int emailsendhour) {
        return findByShowhometabEmailsendhour(showhometab, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabEmailsendhour(boolean showhometab, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabMonthlycharge(boolean showhometab, double monthlycharge) {
        return findByShowhometabMonthlycharge(showhometab, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabMonthlycharge(boolean showhometab, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIssearchmysiteon(boolean showhometab, boolean issearchmysiteon) {
        return findByShowhometabIssearchmysiteon(showhometab, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIssearchmysiteon(boolean showhometab, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIstrackbackon(boolean showhometab, boolean istrackbackon) {
        return findByShowhometabIstrackbackon(showhometab, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIstrackbackon(boolean showhometab, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIslistedindirectory(boolean showhometab, boolean islistedindirectory) {
        return findByShowhometabIslistedindirectory(showhometab, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIslistedindirectory(boolean showhometab, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabTrackbackrequiresapproval(boolean showhometab, boolean trackbackrequiresapproval) {
        return findByShowhometabTrackbackrequiresapproval(showhometab, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabTrackbackrequiresapproval(boolean showhometab, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIstimeperiodon(boolean showhometab, int istimeperiodon) {
        return findByShowhometabIstimeperiodon(showhometab, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIstimeperiodon(boolean showhometab, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabAccounturl(boolean showhometab, String accounturl) {
        return findByShowhometabAccounturl(showhometab, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabAccounturl(boolean showhometab, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIsactiveaccount(boolean showhometab, boolean isactiveaccount) {
        return findByShowhometabIsactiveaccount(showhometab, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIsactiveaccount(boolean showhometab, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIsnewpendingadminapproval(boolean showhometab, boolean isnewpendingadminapproval) {
        return findByShowhometabIsnewpendingadminapproval(showhometab, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIsnewpendingadminapproval(boolean showhometab, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabHptemplateid(boolean showhometab, int hptemplateid) {
        return findByShowhometabHptemplateid(showhometab, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabHptemplateid(boolean showhometab, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabEntlisttemplateid(boolean showhometab, int entlisttemplateid) {
        return findByShowhometabEntlisttemplateid(showhometab, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabEntlisttemplateid(boolean showhometab, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabSitetemplateid(boolean showhometab, int sitetemplateid) {
        return findByShowhometabSitetemplateid(showhometab, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabSitetemplateid(boolean showhometab, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabCustomservername2(boolean showhometab, String customservername2) {
        return findByShowhometabCustomservername2(showhometab, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabCustomservername2(boolean showhometab, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabCustomservername3(boolean showhometab, String customservername3) {
        return findByShowhometabCustomservername3(showhometab, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabCustomservername3(boolean showhometab, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabAccountemail(boolean showhometab, String accountemail) {
        return findByShowhometabAccountemail(showhometab, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabAccountemail(boolean showhometab, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabNewslettersubject(boolean showhometab, String newslettersubject) {
        return findByShowhometabNewslettersubject(showhometab, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabNewslettersubject(boolean showhometab, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabEncryptedlicense(boolean showhometab, String encryptedlicense) {
        return findByShowhometabEncryptedlicense(showhometab, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabEncryptedlicense(boolean showhometab, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabIsbillingokencrypted(boolean showhometab, String isbillingokencrypted) {
        return findByShowhometabIsbillingokencrypted(showhometab, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabIsbillingokencrypted(boolean showhometab, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabBillingerror(boolean showhometab, String billingerror) {
        return findByShowhometabBillingerror(showhometab, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabBillingerror(boolean showhometab, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabLastbillingcheck(boolean showhometab, java.util.Calendar lastbillingcheck) {
        return findByShowhometabLastbillingcheck(showhometab, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabLastbillingcheck(boolean showhometab, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabGooglemapsapikey(boolean showhometab, String googlemapsapikey) {
        return findByShowhometabGooglemapsapikey(showhometab, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabGooglemapsapikey(boolean showhometab, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowhometabMaxspaceinbytes(boolean showhometab, double maxspaceinbytes) {
        return findByShowhometabMaxspaceinbytes(showhometab, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowhometabMaxspaceinbytes(boolean showhometab, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showhometab='"+reger.core.Util.booleanAsSQLText(showhometab)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextShowlogintab(String hometabtext, boolean showlogintab) {
        return findByHometabtextShowlogintab(hometabtext, showlogintab, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextShowlogintab(String hometabtext, boolean showlogintab, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextDisplaycharsinsummary(String hometabtext, int displaycharsinsummary) {
        return findByHometabtextDisplaycharsinsummary(hometabtext, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextDisplaycharsinsummary(String hometabtext, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextDisplaynumberofentries(String hometabtext, int displaynumberofentries) {
        return findByHometabtextDisplaynumberofentries(hometabtext, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextDisplaynumberofentries(String hometabtext, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextUserelatedlinks(String hometabtext, boolean userelatedlinks) {
        return findByHometabtextUserelatedlinks(hometabtext, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextUserelatedlinks(String hometabtext, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextFavesitetitle(String hometabtext, String favesitetitle) {
        return findByHometabtextFavesitetitle(hometabtext, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextFavesitetitle(String hometabtext, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextFavesiteon(String hometabtext, boolean favesiteon) {
        return findByHometabtextFavesiteon(hometabtext, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextFavesiteon(String hometabtext, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextOnthisday(String hometabtext, boolean onthisday) {
        return findByHometabtextOnthisday(hometabtext, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextOnthisday(String hometabtext, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextEmailnewsletter(String hometabtext, int emailnewsletter) {
        return findByHometabtextEmailnewsletter(hometabtext, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextEmailnewsletter(String hometabtext, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextEmailsendhour(String hometabtext, int emailsendhour) {
        return findByHometabtextEmailsendhour(hometabtext, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextEmailsendhour(String hometabtext, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextMonthlycharge(String hometabtext, double monthlycharge) {
        return findByHometabtextMonthlycharge(hometabtext, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextMonthlycharge(String hometabtext, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIssearchmysiteon(String hometabtext, boolean issearchmysiteon) {
        return findByHometabtextIssearchmysiteon(hometabtext, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIssearchmysiteon(String hometabtext, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIstrackbackon(String hometabtext, boolean istrackbackon) {
        return findByHometabtextIstrackbackon(hometabtext, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIstrackbackon(String hometabtext, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIslistedindirectory(String hometabtext, boolean islistedindirectory) {
        return findByHometabtextIslistedindirectory(hometabtext, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIslistedindirectory(String hometabtext, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextTrackbackrequiresapproval(String hometabtext, boolean trackbackrequiresapproval) {
        return findByHometabtextTrackbackrequiresapproval(hometabtext, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextTrackbackrequiresapproval(String hometabtext, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIstimeperiodon(String hometabtext, int istimeperiodon) {
        return findByHometabtextIstimeperiodon(hometabtext, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIstimeperiodon(String hometabtext, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextAccounturl(String hometabtext, String accounturl) {
        return findByHometabtextAccounturl(hometabtext, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextAccounturl(String hometabtext, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIsactiveaccount(String hometabtext, boolean isactiveaccount) {
        return findByHometabtextIsactiveaccount(hometabtext, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIsactiveaccount(String hometabtext, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIsnewpendingadminapproval(String hometabtext, boolean isnewpendingadminapproval) {
        return findByHometabtextIsnewpendingadminapproval(hometabtext, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIsnewpendingadminapproval(String hometabtext, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextHptemplateid(String hometabtext, int hptemplateid) {
        return findByHometabtextHptemplateid(hometabtext, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextHptemplateid(String hometabtext, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextEntlisttemplateid(String hometabtext, int entlisttemplateid) {
        return findByHometabtextEntlisttemplateid(hometabtext, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextEntlisttemplateid(String hometabtext, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextSitetemplateid(String hometabtext, int sitetemplateid) {
        return findByHometabtextSitetemplateid(hometabtext, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextSitetemplateid(String hometabtext, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextCustomservername2(String hometabtext, String customservername2) {
        return findByHometabtextCustomservername2(hometabtext, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextCustomservername2(String hometabtext, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextCustomservername3(String hometabtext, String customservername3) {
        return findByHometabtextCustomservername3(hometabtext, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextCustomservername3(String hometabtext, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextAccountemail(String hometabtext, String accountemail) {
        return findByHometabtextAccountemail(hometabtext, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextAccountemail(String hometabtext, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextNewslettersubject(String hometabtext, String newslettersubject) {
        return findByHometabtextNewslettersubject(hometabtext, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextNewslettersubject(String hometabtext, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextEncryptedlicense(String hometabtext, String encryptedlicense) {
        return findByHometabtextEncryptedlicense(hometabtext, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextEncryptedlicense(String hometabtext, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextIsbillingokencrypted(String hometabtext, String isbillingokencrypted) {
        return findByHometabtextIsbillingokencrypted(hometabtext, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextIsbillingokencrypted(String hometabtext, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextBillingerror(String hometabtext, String billingerror) {
        return findByHometabtextBillingerror(hometabtext, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextBillingerror(String hometabtext, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextLastbillingcheck(String hometabtext, java.util.Calendar lastbillingcheck) {
        return findByHometabtextLastbillingcheck(hometabtext, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextLastbillingcheck(String hometabtext, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextGooglemapsapikey(String hometabtext, String googlemapsapikey) {
        return findByHometabtextGooglemapsapikey(hometabtext, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextGooglemapsapikey(String hometabtext, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHometabtextMaxspaceinbytes(String hometabtext, double maxspaceinbytes) {
        return findByHometabtextMaxspaceinbytes(hometabtext, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHometabtextMaxspaceinbytes(String hometabtext, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hometabtext='"+reger.core.Util.cleanForSQL(hometabtext)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabDisplaycharsinsummary(boolean showlogintab, int displaycharsinsummary) {
        return findByShowlogintabDisplaycharsinsummary(showlogintab, displaycharsinsummary, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabDisplaycharsinsummary(boolean showlogintab, int displaycharsinsummary, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', displaycharsinsummary='"+displaycharsinsummary+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabDisplaynumberofentries(boolean showlogintab, int displaynumberofentries) {
        return findByShowlogintabDisplaynumberofentries(showlogintab, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabDisplaynumberofentries(boolean showlogintab, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabUserelatedlinks(boolean showlogintab, boolean userelatedlinks) {
        return findByShowlogintabUserelatedlinks(showlogintab, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabUserelatedlinks(boolean showlogintab, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabFavesitetitle(boolean showlogintab, String favesitetitle) {
        return findByShowlogintabFavesitetitle(showlogintab, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabFavesitetitle(boolean showlogintab, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabFavesiteon(boolean showlogintab, boolean favesiteon) {
        return findByShowlogintabFavesiteon(showlogintab, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabFavesiteon(boolean showlogintab, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabOnthisday(boolean showlogintab, boolean onthisday) {
        return findByShowlogintabOnthisday(showlogintab, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabOnthisday(boolean showlogintab, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabEmailnewsletter(boolean showlogintab, int emailnewsletter) {
        return findByShowlogintabEmailnewsletter(showlogintab, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabEmailnewsletter(boolean showlogintab, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabEmailsendhour(boolean showlogintab, int emailsendhour) {
        return findByShowlogintabEmailsendhour(showlogintab, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabEmailsendhour(boolean showlogintab, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabMonthlycharge(boolean showlogintab, double monthlycharge) {
        return findByShowlogintabMonthlycharge(showlogintab, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabMonthlycharge(boolean showlogintab, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIssearchmysiteon(boolean showlogintab, boolean issearchmysiteon) {
        return findByShowlogintabIssearchmysiteon(showlogintab, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIssearchmysiteon(boolean showlogintab, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIstrackbackon(boolean showlogintab, boolean istrackbackon) {
        return findByShowlogintabIstrackbackon(showlogintab, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIstrackbackon(boolean showlogintab, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIslistedindirectory(boolean showlogintab, boolean islistedindirectory) {
        return findByShowlogintabIslistedindirectory(showlogintab, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIslistedindirectory(boolean showlogintab, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabTrackbackrequiresapproval(boolean showlogintab, boolean trackbackrequiresapproval) {
        return findByShowlogintabTrackbackrequiresapproval(showlogintab, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabTrackbackrequiresapproval(boolean showlogintab, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIstimeperiodon(boolean showlogintab, int istimeperiodon) {
        return findByShowlogintabIstimeperiodon(showlogintab, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIstimeperiodon(boolean showlogintab, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabAccounturl(boolean showlogintab, String accounturl) {
        return findByShowlogintabAccounturl(showlogintab, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabAccounturl(boolean showlogintab, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIsactiveaccount(boolean showlogintab, boolean isactiveaccount) {
        return findByShowlogintabIsactiveaccount(showlogintab, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIsactiveaccount(boolean showlogintab, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIsnewpendingadminapproval(boolean showlogintab, boolean isnewpendingadminapproval) {
        return findByShowlogintabIsnewpendingadminapproval(showlogintab, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIsnewpendingadminapproval(boolean showlogintab, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabHptemplateid(boolean showlogintab, int hptemplateid) {
        return findByShowlogintabHptemplateid(showlogintab, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabHptemplateid(boolean showlogintab, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabEntlisttemplateid(boolean showlogintab, int entlisttemplateid) {
        return findByShowlogintabEntlisttemplateid(showlogintab, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabEntlisttemplateid(boolean showlogintab, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabSitetemplateid(boolean showlogintab, int sitetemplateid) {
        return findByShowlogintabSitetemplateid(showlogintab, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabSitetemplateid(boolean showlogintab, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabCustomservername2(boolean showlogintab, String customservername2) {
        return findByShowlogintabCustomservername2(showlogintab, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabCustomservername2(boolean showlogintab, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabCustomservername3(boolean showlogintab, String customservername3) {
        return findByShowlogintabCustomservername3(showlogintab, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabCustomservername3(boolean showlogintab, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabAccountemail(boolean showlogintab, String accountemail) {
        return findByShowlogintabAccountemail(showlogintab, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabAccountemail(boolean showlogintab, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabNewslettersubject(boolean showlogintab, String newslettersubject) {
        return findByShowlogintabNewslettersubject(showlogintab, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabNewslettersubject(boolean showlogintab, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabEncryptedlicense(boolean showlogintab, String encryptedlicense) {
        return findByShowlogintabEncryptedlicense(showlogintab, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabEncryptedlicense(boolean showlogintab, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabIsbillingokencrypted(boolean showlogintab, String isbillingokencrypted) {
        return findByShowlogintabIsbillingokencrypted(showlogintab, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabIsbillingokencrypted(boolean showlogintab, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabBillingerror(boolean showlogintab, String billingerror) {
        return findByShowlogintabBillingerror(showlogintab, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabBillingerror(boolean showlogintab, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabLastbillingcheck(boolean showlogintab, java.util.Calendar lastbillingcheck) {
        return findByShowlogintabLastbillingcheck(showlogintab, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabLastbillingcheck(boolean showlogintab, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabGooglemapsapikey(boolean showlogintab, String googlemapsapikey) {
        return findByShowlogintabGooglemapsapikey(showlogintab, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabGooglemapsapikey(boolean showlogintab, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByShowlogintabMaxspaceinbytes(boolean showlogintab, double maxspaceinbytes) {
        return findByShowlogintabMaxspaceinbytes(showlogintab, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByShowlogintabMaxspaceinbytes(boolean showlogintab, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE showlogintab='"+reger.core.Util.booleanAsSQLText(showlogintab)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryDisplaynumberofentries(int displaycharsinsummary, int displaynumberofentries) {
        return findByDisplaycharsinsummaryDisplaynumberofentries(displaycharsinsummary, displaynumberofentries, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryDisplaynumberofentries(int displaycharsinsummary, int displaynumberofentries, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', displaynumberofentries='"+displaynumberofentries+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryUserelatedlinks(int displaycharsinsummary, boolean userelatedlinks) {
        return findByDisplaycharsinsummaryUserelatedlinks(displaycharsinsummary, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryUserelatedlinks(int displaycharsinsummary, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryFavesitetitle(int displaycharsinsummary, String favesitetitle) {
        return findByDisplaycharsinsummaryFavesitetitle(displaycharsinsummary, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryFavesitetitle(int displaycharsinsummary, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryFavesiteon(int displaycharsinsummary, boolean favesiteon) {
        return findByDisplaycharsinsummaryFavesiteon(displaycharsinsummary, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryFavesiteon(int displaycharsinsummary, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryOnthisday(int displaycharsinsummary, boolean onthisday) {
        return findByDisplaycharsinsummaryOnthisday(displaycharsinsummary, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryOnthisday(int displaycharsinsummary, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEmailnewsletter(int displaycharsinsummary, int emailnewsletter) {
        return findByDisplaycharsinsummaryEmailnewsletter(displaycharsinsummary, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEmailnewsletter(int displaycharsinsummary, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEmailsendhour(int displaycharsinsummary, int emailsendhour) {
        return findByDisplaycharsinsummaryEmailsendhour(displaycharsinsummary, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEmailsendhour(int displaycharsinsummary, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryMonthlycharge(int displaycharsinsummary, double monthlycharge) {
        return findByDisplaycharsinsummaryMonthlycharge(displaycharsinsummary, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryMonthlycharge(int displaycharsinsummary, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIssearchmysiteon(int displaycharsinsummary, boolean issearchmysiteon) {
        return findByDisplaycharsinsummaryIssearchmysiteon(displaycharsinsummary, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIssearchmysiteon(int displaycharsinsummary, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIstrackbackon(int displaycharsinsummary, boolean istrackbackon) {
        return findByDisplaycharsinsummaryIstrackbackon(displaycharsinsummary, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIstrackbackon(int displaycharsinsummary, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIslistedindirectory(int displaycharsinsummary, boolean islistedindirectory) {
        return findByDisplaycharsinsummaryIslistedindirectory(displaycharsinsummary, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIslistedindirectory(int displaycharsinsummary, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryTrackbackrequiresapproval(int displaycharsinsummary, boolean trackbackrequiresapproval) {
        return findByDisplaycharsinsummaryTrackbackrequiresapproval(displaycharsinsummary, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryTrackbackrequiresapproval(int displaycharsinsummary, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIstimeperiodon(int displaycharsinsummary, int istimeperiodon) {
        return findByDisplaycharsinsummaryIstimeperiodon(displaycharsinsummary, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIstimeperiodon(int displaycharsinsummary, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryAccounturl(int displaycharsinsummary, String accounturl) {
        return findByDisplaycharsinsummaryAccounturl(displaycharsinsummary, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryAccounturl(int displaycharsinsummary, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIsactiveaccount(int displaycharsinsummary, boolean isactiveaccount) {
        return findByDisplaycharsinsummaryIsactiveaccount(displaycharsinsummary, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIsactiveaccount(int displaycharsinsummary, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIsnewpendingadminapproval(int displaycharsinsummary, boolean isnewpendingadminapproval) {
        return findByDisplaycharsinsummaryIsnewpendingadminapproval(displaycharsinsummary, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIsnewpendingadminapproval(int displaycharsinsummary, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryHptemplateid(int displaycharsinsummary, int hptemplateid) {
        return findByDisplaycharsinsummaryHptemplateid(displaycharsinsummary, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryHptemplateid(int displaycharsinsummary, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEntlisttemplateid(int displaycharsinsummary, int entlisttemplateid) {
        return findByDisplaycharsinsummaryEntlisttemplateid(displaycharsinsummary, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEntlisttemplateid(int displaycharsinsummary, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummarySitetemplateid(int displaycharsinsummary, int sitetemplateid) {
        return findByDisplaycharsinsummarySitetemplateid(displaycharsinsummary, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummarySitetemplateid(int displaycharsinsummary, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryCustomservername2(int displaycharsinsummary, String customservername2) {
        return findByDisplaycharsinsummaryCustomservername2(displaycharsinsummary, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryCustomservername2(int displaycharsinsummary, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryCustomservername3(int displaycharsinsummary, String customservername3) {
        return findByDisplaycharsinsummaryCustomservername3(displaycharsinsummary, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryCustomservername3(int displaycharsinsummary, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryAccountemail(int displaycharsinsummary, String accountemail) {
        return findByDisplaycharsinsummaryAccountemail(displaycharsinsummary, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryAccountemail(int displaycharsinsummary, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryNewslettersubject(int displaycharsinsummary, String newslettersubject) {
        return findByDisplaycharsinsummaryNewslettersubject(displaycharsinsummary, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryNewslettersubject(int displaycharsinsummary, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEncryptedlicense(int displaycharsinsummary, String encryptedlicense) {
        return findByDisplaycharsinsummaryEncryptedlicense(displaycharsinsummary, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryEncryptedlicense(int displaycharsinsummary, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIsbillingokencrypted(int displaycharsinsummary, String isbillingokencrypted) {
        return findByDisplaycharsinsummaryIsbillingokencrypted(displaycharsinsummary, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryIsbillingokencrypted(int displaycharsinsummary, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryBillingerror(int displaycharsinsummary, String billingerror) {
        return findByDisplaycharsinsummaryBillingerror(displaycharsinsummary, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryBillingerror(int displaycharsinsummary, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryLastbillingcheck(int displaycharsinsummary, java.util.Calendar lastbillingcheck) {
        return findByDisplaycharsinsummaryLastbillingcheck(displaycharsinsummary, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryLastbillingcheck(int displaycharsinsummary, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryGooglemapsapikey(int displaycharsinsummary, String googlemapsapikey) {
        return findByDisplaycharsinsummaryGooglemapsapikey(displaycharsinsummary, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryGooglemapsapikey(int displaycharsinsummary, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryMaxspaceinbytes(int displaycharsinsummary, double maxspaceinbytes) {
        return findByDisplaycharsinsummaryMaxspaceinbytes(displaycharsinsummary, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaycharsinsummaryMaxspaceinbytes(int displaycharsinsummary, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaycharsinsummary='"+displaycharsinsummary+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesUserelatedlinks(int displaynumberofentries, boolean userelatedlinks) {
        return findByDisplaynumberofentriesUserelatedlinks(displaynumberofentries, userelatedlinks, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesUserelatedlinks(int displaynumberofentries, boolean userelatedlinks, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesFavesitetitle(int displaynumberofentries, String favesitetitle) {
        return findByDisplaynumberofentriesFavesitetitle(displaynumberofentries, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesFavesitetitle(int displaynumberofentries, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesFavesiteon(int displaynumberofentries, boolean favesiteon) {
        return findByDisplaynumberofentriesFavesiteon(displaynumberofentries, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesFavesiteon(int displaynumberofentries, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesOnthisday(int displaynumberofentries, boolean onthisday) {
        return findByDisplaynumberofentriesOnthisday(displaynumberofentries, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesOnthisday(int displaynumberofentries, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEmailnewsletter(int displaynumberofentries, int emailnewsletter) {
        return findByDisplaynumberofentriesEmailnewsletter(displaynumberofentries, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEmailnewsletter(int displaynumberofentries, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEmailsendhour(int displaynumberofentries, int emailsendhour) {
        return findByDisplaynumberofentriesEmailsendhour(displaynumberofentries, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEmailsendhour(int displaynumberofentries, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesMonthlycharge(int displaynumberofentries, double monthlycharge) {
        return findByDisplaynumberofentriesMonthlycharge(displaynumberofentries, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesMonthlycharge(int displaynumberofentries, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIssearchmysiteon(int displaynumberofentries, boolean issearchmysiteon) {
        return findByDisplaynumberofentriesIssearchmysiteon(displaynumberofentries, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIssearchmysiteon(int displaynumberofentries, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIstrackbackon(int displaynumberofentries, boolean istrackbackon) {
        return findByDisplaynumberofentriesIstrackbackon(displaynumberofentries, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIstrackbackon(int displaynumberofentries, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIslistedindirectory(int displaynumberofentries, boolean islistedindirectory) {
        return findByDisplaynumberofentriesIslistedindirectory(displaynumberofentries, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIslistedindirectory(int displaynumberofentries, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesTrackbackrequiresapproval(int displaynumberofentries, boolean trackbackrequiresapproval) {
        return findByDisplaynumberofentriesTrackbackrequiresapproval(displaynumberofentries, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesTrackbackrequiresapproval(int displaynumberofentries, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIstimeperiodon(int displaynumberofentries, int istimeperiodon) {
        return findByDisplaynumberofentriesIstimeperiodon(displaynumberofentries, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIstimeperiodon(int displaynumberofentries, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesAccounturl(int displaynumberofentries, String accounturl) {
        return findByDisplaynumberofentriesAccounturl(displaynumberofentries, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesAccounturl(int displaynumberofentries, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIsactiveaccount(int displaynumberofentries, boolean isactiveaccount) {
        return findByDisplaynumberofentriesIsactiveaccount(displaynumberofentries, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIsactiveaccount(int displaynumberofentries, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIsnewpendingadminapproval(int displaynumberofentries, boolean isnewpendingadminapproval) {
        return findByDisplaynumberofentriesIsnewpendingadminapproval(displaynumberofentries, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIsnewpendingadminapproval(int displaynumberofentries, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesHptemplateid(int displaynumberofentries, int hptemplateid) {
        return findByDisplaynumberofentriesHptemplateid(displaynumberofentries, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesHptemplateid(int displaynumberofentries, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEntlisttemplateid(int displaynumberofentries, int entlisttemplateid) {
        return findByDisplaynumberofentriesEntlisttemplateid(displaynumberofentries, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEntlisttemplateid(int displaynumberofentries, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesSitetemplateid(int displaynumberofentries, int sitetemplateid) {
        return findByDisplaynumberofentriesSitetemplateid(displaynumberofentries, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesSitetemplateid(int displaynumberofentries, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesCustomservername2(int displaynumberofentries, String customservername2) {
        return findByDisplaynumberofentriesCustomservername2(displaynumberofentries, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesCustomservername2(int displaynumberofentries, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesCustomservername3(int displaynumberofentries, String customservername3) {
        return findByDisplaynumberofentriesCustomservername3(displaynumberofentries, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesCustomservername3(int displaynumberofentries, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesAccountemail(int displaynumberofentries, String accountemail) {
        return findByDisplaynumberofentriesAccountemail(displaynumberofentries, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesAccountemail(int displaynumberofentries, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesNewslettersubject(int displaynumberofentries, String newslettersubject) {
        return findByDisplaynumberofentriesNewslettersubject(displaynumberofentries, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesNewslettersubject(int displaynumberofentries, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEncryptedlicense(int displaynumberofentries, String encryptedlicense) {
        return findByDisplaynumberofentriesEncryptedlicense(displaynumberofentries, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesEncryptedlicense(int displaynumberofentries, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIsbillingokencrypted(int displaynumberofentries, String isbillingokencrypted) {
        return findByDisplaynumberofentriesIsbillingokencrypted(displaynumberofentries, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesIsbillingokencrypted(int displaynumberofentries, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesBillingerror(int displaynumberofentries, String billingerror) {
        return findByDisplaynumberofentriesBillingerror(displaynumberofentries, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesBillingerror(int displaynumberofentries, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesLastbillingcheck(int displaynumberofentries, java.util.Calendar lastbillingcheck) {
        return findByDisplaynumberofentriesLastbillingcheck(displaynumberofentries, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesLastbillingcheck(int displaynumberofentries, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesGooglemapsapikey(int displaynumberofentries, String googlemapsapikey) {
        return findByDisplaynumberofentriesGooglemapsapikey(displaynumberofentries, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesGooglemapsapikey(int displaynumberofentries, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesMaxspaceinbytes(int displaynumberofentries, double maxspaceinbytes) {
        return findByDisplaynumberofentriesMaxspaceinbytes(displaynumberofentries, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByDisplaynumberofentriesMaxspaceinbytes(int displaynumberofentries, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE displaynumberofentries='"+displaynumberofentries+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksFavesitetitle(boolean userelatedlinks, String favesitetitle) {
        return findByUserelatedlinksFavesitetitle(userelatedlinks, favesitetitle, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksFavesitetitle(boolean userelatedlinks, String favesitetitle, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksFavesiteon(boolean userelatedlinks, boolean favesiteon) {
        return findByUserelatedlinksFavesiteon(userelatedlinks, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksFavesiteon(boolean userelatedlinks, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksOnthisday(boolean userelatedlinks, boolean onthisday) {
        return findByUserelatedlinksOnthisday(userelatedlinks, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksOnthisday(boolean userelatedlinks, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEmailnewsletter(boolean userelatedlinks, int emailnewsletter) {
        return findByUserelatedlinksEmailnewsletter(userelatedlinks, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEmailnewsletter(boolean userelatedlinks, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEmailsendhour(boolean userelatedlinks, int emailsendhour) {
        return findByUserelatedlinksEmailsendhour(userelatedlinks, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEmailsendhour(boolean userelatedlinks, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksMonthlycharge(boolean userelatedlinks, double monthlycharge) {
        return findByUserelatedlinksMonthlycharge(userelatedlinks, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksMonthlycharge(boolean userelatedlinks, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIssearchmysiteon(boolean userelatedlinks, boolean issearchmysiteon) {
        return findByUserelatedlinksIssearchmysiteon(userelatedlinks, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIssearchmysiteon(boolean userelatedlinks, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIstrackbackon(boolean userelatedlinks, boolean istrackbackon) {
        return findByUserelatedlinksIstrackbackon(userelatedlinks, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIstrackbackon(boolean userelatedlinks, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIslistedindirectory(boolean userelatedlinks, boolean islistedindirectory) {
        return findByUserelatedlinksIslistedindirectory(userelatedlinks, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIslistedindirectory(boolean userelatedlinks, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksTrackbackrequiresapproval(boolean userelatedlinks, boolean trackbackrequiresapproval) {
        return findByUserelatedlinksTrackbackrequiresapproval(userelatedlinks, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksTrackbackrequiresapproval(boolean userelatedlinks, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIstimeperiodon(boolean userelatedlinks, int istimeperiodon) {
        return findByUserelatedlinksIstimeperiodon(userelatedlinks, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIstimeperiodon(boolean userelatedlinks, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksAccounturl(boolean userelatedlinks, String accounturl) {
        return findByUserelatedlinksAccounturl(userelatedlinks, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksAccounturl(boolean userelatedlinks, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIsactiveaccount(boolean userelatedlinks, boolean isactiveaccount) {
        return findByUserelatedlinksIsactiveaccount(userelatedlinks, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIsactiveaccount(boolean userelatedlinks, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIsnewpendingadminapproval(boolean userelatedlinks, boolean isnewpendingadminapproval) {
        return findByUserelatedlinksIsnewpendingadminapproval(userelatedlinks, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIsnewpendingadminapproval(boolean userelatedlinks, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksHptemplateid(boolean userelatedlinks, int hptemplateid) {
        return findByUserelatedlinksHptemplateid(userelatedlinks, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksHptemplateid(boolean userelatedlinks, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEntlisttemplateid(boolean userelatedlinks, int entlisttemplateid) {
        return findByUserelatedlinksEntlisttemplateid(userelatedlinks, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEntlisttemplateid(boolean userelatedlinks, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksSitetemplateid(boolean userelatedlinks, int sitetemplateid) {
        return findByUserelatedlinksSitetemplateid(userelatedlinks, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksSitetemplateid(boolean userelatedlinks, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksCustomservername2(boolean userelatedlinks, String customservername2) {
        return findByUserelatedlinksCustomservername2(userelatedlinks, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksCustomservername2(boolean userelatedlinks, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksCustomservername3(boolean userelatedlinks, String customservername3) {
        return findByUserelatedlinksCustomservername3(userelatedlinks, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksCustomservername3(boolean userelatedlinks, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksAccountemail(boolean userelatedlinks, String accountemail) {
        return findByUserelatedlinksAccountemail(userelatedlinks, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksAccountemail(boolean userelatedlinks, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksNewslettersubject(boolean userelatedlinks, String newslettersubject) {
        return findByUserelatedlinksNewslettersubject(userelatedlinks, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksNewslettersubject(boolean userelatedlinks, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEncryptedlicense(boolean userelatedlinks, String encryptedlicense) {
        return findByUserelatedlinksEncryptedlicense(userelatedlinks, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksEncryptedlicense(boolean userelatedlinks, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIsbillingokencrypted(boolean userelatedlinks, String isbillingokencrypted) {
        return findByUserelatedlinksIsbillingokencrypted(userelatedlinks, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksIsbillingokencrypted(boolean userelatedlinks, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksBillingerror(boolean userelatedlinks, String billingerror) {
        return findByUserelatedlinksBillingerror(userelatedlinks, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksBillingerror(boolean userelatedlinks, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksLastbillingcheck(boolean userelatedlinks, java.util.Calendar lastbillingcheck) {
        return findByUserelatedlinksLastbillingcheck(userelatedlinks, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksLastbillingcheck(boolean userelatedlinks, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksGooglemapsapikey(boolean userelatedlinks, String googlemapsapikey) {
        return findByUserelatedlinksGooglemapsapikey(userelatedlinks, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksGooglemapsapikey(boolean userelatedlinks, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksMaxspaceinbytes(boolean userelatedlinks, double maxspaceinbytes) {
        return findByUserelatedlinksMaxspaceinbytes(userelatedlinks, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByUserelatedlinksMaxspaceinbytes(boolean userelatedlinks, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE userelatedlinks='"+reger.core.Util.booleanAsSQLText(userelatedlinks)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleFavesiteon(String favesitetitle, boolean favesiteon) {
        return findByFavesitetitleFavesiteon(favesitetitle, favesiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleFavesiteon(String favesitetitle, boolean favesiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleOnthisday(String favesitetitle, boolean onthisday) {
        return findByFavesitetitleOnthisday(favesitetitle, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleOnthisday(String favesitetitle, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEmailnewsletter(String favesitetitle, int emailnewsletter) {
        return findByFavesitetitleEmailnewsletter(favesitetitle, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEmailnewsletter(String favesitetitle, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEmailsendhour(String favesitetitle, int emailsendhour) {
        return findByFavesitetitleEmailsendhour(favesitetitle, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEmailsendhour(String favesitetitle, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleMonthlycharge(String favesitetitle, double monthlycharge) {
        return findByFavesitetitleMonthlycharge(favesitetitle, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleMonthlycharge(String favesitetitle, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIssearchmysiteon(String favesitetitle, boolean issearchmysiteon) {
        return findByFavesitetitleIssearchmysiteon(favesitetitle, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIssearchmysiteon(String favesitetitle, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIstrackbackon(String favesitetitle, boolean istrackbackon) {
        return findByFavesitetitleIstrackbackon(favesitetitle, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIstrackbackon(String favesitetitle, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIslistedindirectory(String favesitetitle, boolean islistedindirectory) {
        return findByFavesitetitleIslistedindirectory(favesitetitle, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIslistedindirectory(String favesitetitle, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleTrackbackrequiresapproval(String favesitetitle, boolean trackbackrequiresapproval) {
        return findByFavesitetitleTrackbackrequiresapproval(favesitetitle, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleTrackbackrequiresapproval(String favesitetitle, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIstimeperiodon(String favesitetitle, int istimeperiodon) {
        return findByFavesitetitleIstimeperiodon(favesitetitle, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIstimeperiodon(String favesitetitle, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleAccounturl(String favesitetitle, String accounturl) {
        return findByFavesitetitleAccounturl(favesitetitle, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleAccounturl(String favesitetitle, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIsactiveaccount(String favesitetitle, boolean isactiveaccount) {
        return findByFavesitetitleIsactiveaccount(favesitetitle, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIsactiveaccount(String favesitetitle, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIsnewpendingadminapproval(String favesitetitle, boolean isnewpendingadminapproval) {
        return findByFavesitetitleIsnewpendingadminapproval(favesitetitle, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIsnewpendingadminapproval(String favesitetitle, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleHptemplateid(String favesitetitle, int hptemplateid) {
        return findByFavesitetitleHptemplateid(favesitetitle, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleHptemplateid(String favesitetitle, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEntlisttemplateid(String favesitetitle, int entlisttemplateid) {
        return findByFavesitetitleEntlisttemplateid(favesitetitle, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEntlisttemplateid(String favesitetitle, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleSitetemplateid(String favesitetitle, int sitetemplateid) {
        return findByFavesitetitleSitetemplateid(favesitetitle, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleSitetemplateid(String favesitetitle, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleCustomservername2(String favesitetitle, String customservername2) {
        return findByFavesitetitleCustomservername2(favesitetitle, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleCustomservername2(String favesitetitle, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleCustomservername3(String favesitetitle, String customservername3) {
        return findByFavesitetitleCustomservername3(favesitetitle, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleCustomservername3(String favesitetitle, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleAccountemail(String favesitetitle, String accountemail) {
        return findByFavesitetitleAccountemail(favesitetitle, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleAccountemail(String favesitetitle, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleNewslettersubject(String favesitetitle, String newslettersubject) {
        return findByFavesitetitleNewslettersubject(favesitetitle, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleNewslettersubject(String favesitetitle, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEncryptedlicense(String favesitetitle, String encryptedlicense) {
        return findByFavesitetitleEncryptedlicense(favesitetitle, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleEncryptedlicense(String favesitetitle, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIsbillingokencrypted(String favesitetitle, String isbillingokencrypted) {
        return findByFavesitetitleIsbillingokencrypted(favesitetitle, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleIsbillingokencrypted(String favesitetitle, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleBillingerror(String favesitetitle, String billingerror) {
        return findByFavesitetitleBillingerror(favesitetitle, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleBillingerror(String favesitetitle, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleLastbillingcheck(String favesitetitle, java.util.Calendar lastbillingcheck) {
        return findByFavesitetitleLastbillingcheck(favesitetitle, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleLastbillingcheck(String favesitetitle, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleGooglemapsapikey(String favesitetitle, String googlemapsapikey) {
        return findByFavesitetitleGooglemapsapikey(favesitetitle, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleGooglemapsapikey(String favesitetitle, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesitetitleMaxspaceinbytes(String favesitetitle, double maxspaceinbytes) {
        return findByFavesitetitleMaxspaceinbytes(favesitetitle, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesitetitleMaxspaceinbytes(String favesitetitle, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesitetitle='"+reger.core.Util.cleanForSQL(favesitetitle)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonOnthisday(boolean favesiteon, boolean onthisday) {
        return findByFavesiteonOnthisday(favesiteon, onthisday, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonOnthisday(boolean favesiteon, boolean onthisday, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonEmailnewsletter(boolean favesiteon, int emailnewsletter) {
        return findByFavesiteonEmailnewsletter(favesiteon, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonEmailnewsletter(boolean favesiteon, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonEmailsendhour(boolean favesiteon, int emailsendhour) {
        return findByFavesiteonEmailsendhour(favesiteon, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonEmailsendhour(boolean favesiteon, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonMonthlycharge(boolean favesiteon, double monthlycharge) {
        return findByFavesiteonMonthlycharge(favesiteon, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonMonthlycharge(boolean favesiteon, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIssearchmysiteon(boolean favesiteon, boolean issearchmysiteon) {
        return findByFavesiteonIssearchmysiteon(favesiteon, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIssearchmysiteon(boolean favesiteon, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIstrackbackon(boolean favesiteon, boolean istrackbackon) {
        return findByFavesiteonIstrackbackon(favesiteon, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIstrackbackon(boolean favesiteon, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIslistedindirectory(boolean favesiteon, boolean islistedindirectory) {
        return findByFavesiteonIslistedindirectory(favesiteon, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIslistedindirectory(boolean favesiteon, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonTrackbackrequiresapproval(boolean favesiteon, boolean trackbackrequiresapproval) {
        return findByFavesiteonTrackbackrequiresapproval(favesiteon, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonTrackbackrequiresapproval(boolean favesiteon, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIstimeperiodon(boolean favesiteon, int istimeperiodon) {
        return findByFavesiteonIstimeperiodon(favesiteon, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIstimeperiodon(boolean favesiteon, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonAccounturl(boolean favesiteon, String accounturl) {
        return findByFavesiteonAccounturl(favesiteon, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonAccounturl(boolean favesiteon, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIsactiveaccount(boolean favesiteon, boolean isactiveaccount) {
        return findByFavesiteonIsactiveaccount(favesiteon, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIsactiveaccount(boolean favesiteon, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIsnewpendingadminapproval(boolean favesiteon, boolean isnewpendingadminapproval) {
        return findByFavesiteonIsnewpendingadminapproval(favesiteon, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIsnewpendingadminapproval(boolean favesiteon, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonHptemplateid(boolean favesiteon, int hptemplateid) {
        return findByFavesiteonHptemplateid(favesiteon, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonHptemplateid(boolean favesiteon, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonEntlisttemplateid(boolean favesiteon, int entlisttemplateid) {
        return findByFavesiteonEntlisttemplateid(favesiteon, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonEntlisttemplateid(boolean favesiteon, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonSitetemplateid(boolean favesiteon, int sitetemplateid) {
        return findByFavesiteonSitetemplateid(favesiteon, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonSitetemplateid(boolean favesiteon, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonCustomservername2(boolean favesiteon, String customservername2) {
        return findByFavesiteonCustomservername2(favesiteon, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonCustomservername2(boolean favesiteon, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonCustomservername3(boolean favesiteon, String customservername3) {
        return findByFavesiteonCustomservername3(favesiteon, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonCustomservername3(boolean favesiteon, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonAccountemail(boolean favesiteon, String accountemail) {
        return findByFavesiteonAccountemail(favesiteon, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonAccountemail(boolean favesiteon, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonNewslettersubject(boolean favesiteon, String newslettersubject) {
        return findByFavesiteonNewslettersubject(favesiteon, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonNewslettersubject(boolean favesiteon, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonEncryptedlicense(boolean favesiteon, String encryptedlicense) {
        return findByFavesiteonEncryptedlicense(favesiteon, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonEncryptedlicense(boolean favesiteon, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonIsbillingokencrypted(boolean favesiteon, String isbillingokencrypted) {
        return findByFavesiteonIsbillingokencrypted(favesiteon, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonIsbillingokencrypted(boolean favesiteon, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonBillingerror(boolean favesiteon, String billingerror) {
        return findByFavesiteonBillingerror(favesiteon, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonBillingerror(boolean favesiteon, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonLastbillingcheck(boolean favesiteon, java.util.Calendar lastbillingcheck) {
        return findByFavesiteonLastbillingcheck(favesiteon, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonLastbillingcheck(boolean favesiteon, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonGooglemapsapikey(boolean favesiteon, String googlemapsapikey) {
        return findByFavesiteonGooglemapsapikey(favesiteon, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonGooglemapsapikey(boolean favesiteon, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByFavesiteonMaxspaceinbytes(boolean favesiteon, double maxspaceinbytes) {
        return findByFavesiteonMaxspaceinbytes(favesiteon, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByFavesiteonMaxspaceinbytes(boolean favesiteon, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE favesiteon='"+reger.core.Util.booleanAsSQLText(favesiteon)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayEmailnewsletter(boolean onthisday, int emailnewsletter) {
        return findByOnthisdayEmailnewsletter(onthisday, emailnewsletter, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayEmailnewsletter(boolean onthisday, int emailnewsletter, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', emailnewsletter='"+emailnewsletter+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayEmailsendhour(boolean onthisday, int emailsendhour) {
        return findByOnthisdayEmailsendhour(onthisday, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayEmailsendhour(boolean onthisday, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayMonthlycharge(boolean onthisday, double monthlycharge) {
        return findByOnthisdayMonthlycharge(onthisday, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayMonthlycharge(boolean onthisday, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIssearchmysiteon(boolean onthisday, boolean issearchmysiteon) {
        return findByOnthisdayIssearchmysiteon(onthisday, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIssearchmysiteon(boolean onthisday, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIstrackbackon(boolean onthisday, boolean istrackbackon) {
        return findByOnthisdayIstrackbackon(onthisday, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIstrackbackon(boolean onthisday, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIslistedindirectory(boolean onthisday, boolean islistedindirectory) {
        return findByOnthisdayIslistedindirectory(onthisday, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIslistedindirectory(boolean onthisday, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayTrackbackrequiresapproval(boolean onthisday, boolean trackbackrequiresapproval) {
        return findByOnthisdayTrackbackrequiresapproval(onthisday, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayTrackbackrequiresapproval(boolean onthisday, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIstimeperiodon(boolean onthisday, int istimeperiodon) {
        return findByOnthisdayIstimeperiodon(onthisday, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIstimeperiodon(boolean onthisday, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayAccounturl(boolean onthisday, String accounturl) {
        return findByOnthisdayAccounturl(onthisday, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayAccounturl(boolean onthisday, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIsactiveaccount(boolean onthisday, boolean isactiveaccount) {
        return findByOnthisdayIsactiveaccount(onthisday, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIsactiveaccount(boolean onthisday, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIsnewpendingadminapproval(boolean onthisday, boolean isnewpendingadminapproval) {
        return findByOnthisdayIsnewpendingadminapproval(onthisday, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIsnewpendingadminapproval(boolean onthisday, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayHptemplateid(boolean onthisday, int hptemplateid) {
        return findByOnthisdayHptemplateid(onthisday, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayHptemplateid(boolean onthisday, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayEntlisttemplateid(boolean onthisday, int entlisttemplateid) {
        return findByOnthisdayEntlisttemplateid(onthisday, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayEntlisttemplateid(boolean onthisday, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdaySitetemplateid(boolean onthisday, int sitetemplateid) {
        return findByOnthisdaySitetemplateid(onthisday, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdaySitetemplateid(boolean onthisday, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayCustomservername2(boolean onthisday, String customservername2) {
        return findByOnthisdayCustomservername2(onthisday, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayCustomservername2(boolean onthisday, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayCustomservername3(boolean onthisday, String customservername3) {
        return findByOnthisdayCustomservername3(onthisday, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayCustomservername3(boolean onthisday, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayAccountemail(boolean onthisday, String accountemail) {
        return findByOnthisdayAccountemail(onthisday, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayAccountemail(boolean onthisday, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayNewslettersubject(boolean onthisday, String newslettersubject) {
        return findByOnthisdayNewslettersubject(onthisday, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayNewslettersubject(boolean onthisday, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayEncryptedlicense(boolean onthisday, String encryptedlicense) {
        return findByOnthisdayEncryptedlicense(onthisday, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayEncryptedlicense(boolean onthisday, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayIsbillingokencrypted(boolean onthisday, String isbillingokencrypted) {
        return findByOnthisdayIsbillingokencrypted(onthisday, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayIsbillingokencrypted(boolean onthisday, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayBillingerror(boolean onthisday, String billingerror) {
        return findByOnthisdayBillingerror(onthisday, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayBillingerror(boolean onthisday, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayLastbillingcheck(boolean onthisday, java.util.Calendar lastbillingcheck) {
        return findByOnthisdayLastbillingcheck(onthisday, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayLastbillingcheck(boolean onthisday, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayGooglemapsapikey(boolean onthisday, String googlemapsapikey) {
        return findByOnthisdayGooglemapsapikey(onthisday, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayGooglemapsapikey(boolean onthisday, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByOnthisdayMaxspaceinbytes(boolean onthisday, double maxspaceinbytes) {
        return findByOnthisdayMaxspaceinbytes(onthisday, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByOnthisdayMaxspaceinbytes(boolean onthisday, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE onthisday='"+reger.core.Util.booleanAsSQLText(onthisday)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterEmailsendhour(int emailnewsletter, int emailsendhour) {
        return findByEmailnewsletterEmailsendhour(emailnewsletter, emailsendhour, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterEmailsendhour(int emailnewsletter, int emailsendhour, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', emailsendhour='"+emailsendhour+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterMonthlycharge(int emailnewsletter, double monthlycharge) {
        return findByEmailnewsletterMonthlycharge(emailnewsletter, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterMonthlycharge(int emailnewsletter, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIssearchmysiteon(int emailnewsletter, boolean issearchmysiteon) {
        return findByEmailnewsletterIssearchmysiteon(emailnewsletter, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIssearchmysiteon(int emailnewsletter, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIstrackbackon(int emailnewsletter, boolean istrackbackon) {
        return findByEmailnewsletterIstrackbackon(emailnewsletter, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIstrackbackon(int emailnewsletter, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIslistedindirectory(int emailnewsletter, boolean islistedindirectory) {
        return findByEmailnewsletterIslistedindirectory(emailnewsletter, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIslistedindirectory(int emailnewsletter, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterTrackbackrequiresapproval(int emailnewsletter, boolean trackbackrequiresapproval) {
        return findByEmailnewsletterTrackbackrequiresapproval(emailnewsletter, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterTrackbackrequiresapproval(int emailnewsletter, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIstimeperiodon(int emailnewsletter, int istimeperiodon) {
        return findByEmailnewsletterIstimeperiodon(emailnewsletter, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIstimeperiodon(int emailnewsletter, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterAccounturl(int emailnewsletter, String accounturl) {
        return findByEmailnewsletterAccounturl(emailnewsletter, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterAccounturl(int emailnewsletter, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIsactiveaccount(int emailnewsletter, boolean isactiveaccount) {
        return findByEmailnewsletterIsactiveaccount(emailnewsletter, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIsactiveaccount(int emailnewsletter, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIsnewpendingadminapproval(int emailnewsletter, boolean isnewpendingadminapproval) {
        return findByEmailnewsletterIsnewpendingadminapproval(emailnewsletter, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIsnewpendingadminapproval(int emailnewsletter, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterHptemplateid(int emailnewsletter, int hptemplateid) {
        return findByEmailnewsletterHptemplateid(emailnewsletter, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterHptemplateid(int emailnewsletter, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterEntlisttemplateid(int emailnewsletter, int entlisttemplateid) {
        return findByEmailnewsletterEntlisttemplateid(emailnewsletter, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterEntlisttemplateid(int emailnewsletter, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterSitetemplateid(int emailnewsletter, int sitetemplateid) {
        return findByEmailnewsletterSitetemplateid(emailnewsletter, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterSitetemplateid(int emailnewsletter, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterCustomservername2(int emailnewsletter, String customservername2) {
        return findByEmailnewsletterCustomservername2(emailnewsletter, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterCustomservername2(int emailnewsletter, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterCustomservername3(int emailnewsletter, String customservername3) {
        return findByEmailnewsletterCustomservername3(emailnewsletter, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterCustomservername3(int emailnewsletter, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterAccountemail(int emailnewsletter, String accountemail) {
        return findByEmailnewsletterAccountemail(emailnewsletter, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterAccountemail(int emailnewsletter, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterNewslettersubject(int emailnewsletter, String newslettersubject) {
        return findByEmailnewsletterNewslettersubject(emailnewsletter, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterNewslettersubject(int emailnewsletter, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterEncryptedlicense(int emailnewsletter, String encryptedlicense) {
        return findByEmailnewsletterEncryptedlicense(emailnewsletter, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterEncryptedlicense(int emailnewsletter, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIsbillingokencrypted(int emailnewsletter, String isbillingokencrypted) {
        return findByEmailnewsletterIsbillingokencrypted(emailnewsletter, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterIsbillingokencrypted(int emailnewsletter, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterBillingerror(int emailnewsletter, String billingerror) {
        return findByEmailnewsletterBillingerror(emailnewsletter, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterBillingerror(int emailnewsletter, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterLastbillingcheck(int emailnewsletter, java.util.Calendar lastbillingcheck) {
        return findByEmailnewsletterLastbillingcheck(emailnewsletter, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterLastbillingcheck(int emailnewsletter, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterGooglemapsapikey(int emailnewsletter, String googlemapsapikey) {
        return findByEmailnewsletterGooglemapsapikey(emailnewsletter, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterGooglemapsapikey(int emailnewsletter, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterMaxspaceinbytes(int emailnewsletter, double maxspaceinbytes) {
        return findByEmailnewsletterMaxspaceinbytes(emailnewsletter, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailnewsletterMaxspaceinbytes(int emailnewsletter, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailnewsletter='"+emailnewsletter+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourMonthlycharge(int emailsendhour, double monthlycharge) {
        return findByEmailsendhourMonthlycharge(emailsendhour, monthlycharge, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourMonthlycharge(int emailsendhour, double monthlycharge, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', monthlycharge='"+String.valueOf(monthlycharge)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIssearchmysiteon(int emailsendhour, boolean issearchmysiteon) {
        return findByEmailsendhourIssearchmysiteon(emailsendhour, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIssearchmysiteon(int emailsendhour, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIstrackbackon(int emailsendhour, boolean istrackbackon) {
        return findByEmailsendhourIstrackbackon(emailsendhour, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIstrackbackon(int emailsendhour, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIslistedindirectory(int emailsendhour, boolean islistedindirectory) {
        return findByEmailsendhourIslistedindirectory(emailsendhour, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIslistedindirectory(int emailsendhour, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourTrackbackrequiresapproval(int emailsendhour, boolean trackbackrequiresapproval) {
        return findByEmailsendhourTrackbackrequiresapproval(emailsendhour, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourTrackbackrequiresapproval(int emailsendhour, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIstimeperiodon(int emailsendhour, int istimeperiodon) {
        return findByEmailsendhourIstimeperiodon(emailsendhour, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIstimeperiodon(int emailsendhour, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourAccounturl(int emailsendhour, String accounturl) {
        return findByEmailsendhourAccounturl(emailsendhour, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourAccounturl(int emailsendhour, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIsactiveaccount(int emailsendhour, boolean isactiveaccount) {
        return findByEmailsendhourIsactiveaccount(emailsendhour, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIsactiveaccount(int emailsendhour, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIsnewpendingadminapproval(int emailsendhour, boolean isnewpendingadminapproval) {
        return findByEmailsendhourIsnewpendingadminapproval(emailsendhour, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIsnewpendingadminapproval(int emailsendhour, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourHptemplateid(int emailsendhour, int hptemplateid) {
        return findByEmailsendhourHptemplateid(emailsendhour, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourHptemplateid(int emailsendhour, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourEntlisttemplateid(int emailsendhour, int entlisttemplateid) {
        return findByEmailsendhourEntlisttemplateid(emailsendhour, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourEntlisttemplateid(int emailsendhour, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourSitetemplateid(int emailsendhour, int sitetemplateid) {
        return findByEmailsendhourSitetemplateid(emailsendhour, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourSitetemplateid(int emailsendhour, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourCustomservername2(int emailsendhour, String customservername2) {
        return findByEmailsendhourCustomservername2(emailsendhour, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourCustomservername2(int emailsendhour, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourCustomservername3(int emailsendhour, String customservername3) {
        return findByEmailsendhourCustomservername3(emailsendhour, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourCustomservername3(int emailsendhour, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourAccountemail(int emailsendhour, String accountemail) {
        return findByEmailsendhourAccountemail(emailsendhour, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourAccountemail(int emailsendhour, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourNewslettersubject(int emailsendhour, String newslettersubject) {
        return findByEmailsendhourNewslettersubject(emailsendhour, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourNewslettersubject(int emailsendhour, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourEncryptedlicense(int emailsendhour, String encryptedlicense) {
        return findByEmailsendhourEncryptedlicense(emailsendhour, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourEncryptedlicense(int emailsendhour, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIsbillingokencrypted(int emailsendhour, String isbillingokencrypted) {
        return findByEmailsendhourIsbillingokencrypted(emailsendhour, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourIsbillingokencrypted(int emailsendhour, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourBillingerror(int emailsendhour, String billingerror) {
        return findByEmailsendhourBillingerror(emailsendhour, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourBillingerror(int emailsendhour, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourLastbillingcheck(int emailsendhour, java.util.Calendar lastbillingcheck) {
        return findByEmailsendhourLastbillingcheck(emailsendhour, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourLastbillingcheck(int emailsendhour, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourGooglemapsapikey(int emailsendhour, String googlemapsapikey) {
        return findByEmailsendhourGooglemapsapikey(emailsendhour, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourGooglemapsapikey(int emailsendhour, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEmailsendhourMaxspaceinbytes(int emailsendhour, double maxspaceinbytes) {
        return findByEmailsendhourMaxspaceinbytes(emailsendhour, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEmailsendhourMaxspaceinbytes(int emailsendhour, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE emailsendhour='"+emailsendhour+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIssearchmysiteon(double monthlycharge, boolean issearchmysiteon) {
        return findByMonthlychargeIssearchmysiteon(monthlycharge, issearchmysiteon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIssearchmysiteon(double monthlycharge, boolean issearchmysiteon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIstrackbackon(double monthlycharge, boolean istrackbackon) {
        return findByMonthlychargeIstrackbackon(monthlycharge, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIstrackbackon(double monthlycharge, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIslistedindirectory(double monthlycharge, boolean islistedindirectory) {
        return findByMonthlychargeIslistedindirectory(monthlycharge, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIslistedindirectory(double monthlycharge, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeTrackbackrequiresapproval(double monthlycharge, boolean trackbackrequiresapproval) {
        return findByMonthlychargeTrackbackrequiresapproval(monthlycharge, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeTrackbackrequiresapproval(double monthlycharge, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIstimeperiodon(double monthlycharge, int istimeperiodon) {
        return findByMonthlychargeIstimeperiodon(monthlycharge, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIstimeperiodon(double monthlycharge, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeAccounturl(double monthlycharge, String accounturl) {
        return findByMonthlychargeAccounturl(monthlycharge, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeAccounturl(double monthlycharge, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIsactiveaccount(double monthlycharge, boolean isactiveaccount) {
        return findByMonthlychargeIsactiveaccount(monthlycharge, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIsactiveaccount(double monthlycharge, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIsnewpendingadminapproval(double monthlycharge, boolean isnewpendingadminapproval) {
        return findByMonthlychargeIsnewpendingadminapproval(monthlycharge, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIsnewpendingadminapproval(double monthlycharge, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeHptemplateid(double monthlycharge, int hptemplateid) {
        return findByMonthlychargeHptemplateid(monthlycharge, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeHptemplateid(double monthlycharge, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeEntlisttemplateid(double monthlycharge, int entlisttemplateid) {
        return findByMonthlychargeEntlisttemplateid(monthlycharge, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeEntlisttemplateid(double monthlycharge, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeSitetemplateid(double monthlycharge, int sitetemplateid) {
        return findByMonthlychargeSitetemplateid(monthlycharge, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeSitetemplateid(double monthlycharge, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeCustomservername2(double monthlycharge, String customservername2) {
        return findByMonthlychargeCustomservername2(monthlycharge, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeCustomservername2(double monthlycharge, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeCustomservername3(double monthlycharge, String customservername3) {
        return findByMonthlychargeCustomservername3(monthlycharge, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeCustomservername3(double monthlycharge, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeAccountemail(double monthlycharge, String accountemail) {
        return findByMonthlychargeAccountemail(monthlycharge, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeAccountemail(double monthlycharge, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeNewslettersubject(double monthlycharge, String newslettersubject) {
        return findByMonthlychargeNewslettersubject(monthlycharge, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeNewslettersubject(double monthlycharge, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeEncryptedlicense(double monthlycharge, String encryptedlicense) {
        return findByMonthlychargeEncryptedlicense(monthlycharge, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeEncryptedlicense(double monthlycharge, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIsbillingokencrypted(double monthlycharge, String isbillingokencrypted) {
        return findByMonthlychargeIsbillingokencrypted(monthlycharge, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeIsbillingokencrypted(double monthlycharge, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeBillingerror(double monthlycharge, String billingerror) {
        return findByMonthlychargeBillingerror(monthlycharge, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeBillingerror(double monthlycharge, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeLastbillingcheck(double monthlycharge, java.util.Calendar lastbillingcheck) {
        return findByMonthlychargeLastbillingcheck(monthlycharge, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeLastbillingcheck(double monthlycharge, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeGooglemapsapikey(double monthlycharge, String googlemapsapikey) {
        return findByMonthlychargeGooglemapsapikey(monthlycharge, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeGooglemapsapikey(double monthlycharge, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByMonthlychargeMaxspaceinbytes(double monthlycharge, double maxspaceinbytes) {
        return findByMonthlychargeMaxspaceinbytes(monthlycharge, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByMonthlychargeMaxspaceinbytes(double monthlycharge, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE monthlycharge='"+String.valueOf(monthlycharge)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIstrackbackon(boolean issearchmysiteon, boolean istrackbackon) {
        return findByIssearchmysiteonIstrackbackon(issearchmysiteon, istrackbackon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIstrackbackon(boolean issearchmysiteon, boolean istrackbackon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIslistedindirectory(boolean issearchmysiteon, boolean islistedindirectory) {
        return findByIssearchmysiteonIslistedindirectory(issearchmysiteon, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIslistedindirectory(boolean issearchmysiteon, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonTrackbackrequiresapproval(boolean issearchmysiteon, boolean trackbackrequiresapproval) {
        return findByIssearchmysiteonTrackbackrequiresapproval(issearchmysiteon, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonTrackbackrequiresapproval(boolean issearchmysiteon, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIstimeperiodon(boolean issearchmysiteon, int istimeperiodon) {
        return findByIssearchmysiteonIstimeperiodon(issearchmysiteon, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIstimeperiodon(boolean issearchmysiteon, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonAccounturl(boolean issearchmysiteon, String accounturl) {
        return findByIssearchmysiteonAccounturl(issearchmysiteon, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonAccounturl(boolean issearchmysiteon, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIsactiveaccount(boolean issearchmysiteon, boolean isactiveaccount) {
        return findByIssearchmysiteonIsactiveaccount(issearchmysiteon, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIsactiveaccount(boolean issearchmysiteon, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIsnewpendingadminapproval(boolean issearchmysiteon, boolean isnewpendingadminapproval) {
        return findByIssearchmysiteonIsnewpendingadminapproval(issearchmysiteon, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIsnewpendingadminapproval(boolean issearchmysiteon, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonHptemplateid(boolean issearchmysiteon, int hptemplateid) {
        return findByIssearchmysiteonHptemplateid(issearchmysiteon, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonHptemplateid(boolean issearchmysiteon, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonEntlisttemplateid(boolean issearchmysiteon, int entlisttemplateid) {
        return findByIssearchmysiteonEntlisttemplateid(issearchmysiteon, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonEntlisttemplateid(boolean issearchmysiteon, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonSitetemplateid(boolean issearchmysiteon, int sitetemplateid) {
        return findByIssearchmysiteonSitetemplateid(issearchmysiteon, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonSitetemplateid(boolean issearchmysiteon, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonCustomservername2(boolean issearchmysiteon, String customservername2) {
        return findByIssearchmysiteonCustomservername2(issearchmysiteon, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonCustomservername2(boolean issearchmysiteon, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonCustomservername3(boolean issearchmysiteon, String customservername3) {
        return findByIssearchmysiteonCustomservername3(issearchmysiteon, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonCustomservername3(boolean issearchmysiteon, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonAccountemail(boolean issearchmysiteon, String accountemail) {
        return findByIssearchmysiteonAccountemail(issearchmysiteon, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonAccountemail(boolean issearchmysiteon, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonNewslettersubject(boolean issearchmysiteon, String newslettersubject) {
        return findByIssearchmysiteonNewslettersubject(issearchmysiteon, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonNewslettersubject(boolean issearchmysiteon, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonEncryptedlicense(boolean issearchmysiteon, String encryptedlicense) {
        return findByIssearchmysiteonEncryptedlicense(issearchmysiteon, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonEncryptedlicense(boolean issearchmysiteon, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIsbillingokencrypted(boolean issearchmysiteon, String isbillingokencrypted) {
        return findByIssearchmysiteonIsbillingokencrypted(issearchmysiteon, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonIsbillingokencrypted(boolean issearchmysiteon, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonBillingerror(boolean issearchmysiteon, String billingerror) {
        return findByIssearchmysiteonBillingerror(issearchmysiteon, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonBillingerror(boolean issearchmysiteon, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonLastbillingcheck(boolean issearchmysiteon, java.util.Calendar lastbillingcheck) {
        return findByIssearchmysiteonLastbillingcheck(issearchmysiteon, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonLastbillingcheck(boolean issearchmysiteon, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonGooglemapsapikey(boolean issearchmysiteon, String googlemapsapikey) {
        return findByIssearchmysiteonGooglemapsapikey(issearchmysiteon, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonGooglemapsapikey(boolean issearchmysiteon, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonMaxspaceinbytes(boolean issearchmysiteon, double maxspaceinbytes) {
        return findByIssearchmysiteonMaxspaceinbytes(issearchmysiteon, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIssearchmysiteonMaxspaceinbytes(boolean issearchmysiteon, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE issearchmysiteon='"+reger.core.Util.booleanAsSQLText(issearchmysiteon)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIslistedindirectory(boolean istrackbackon, boolean islistedindirectory) {
        return findByIstrackbackonIslistedindirectory(istrackbackon, islistedindirectory, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIslistedindirectory(boolean istrackbackon, boolean islistedindirectory, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonTrackbackrequiresapproval(boolean istrackbackon, boolean trackbackrequiresapproval) {
        return findByIstrackbackonTrackbackrequiresapproval(istrackbackon, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonTrackbackrequiresapproval(boolean istrackbackon, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIstimeperiodon(boolean istrackbackon, int istimeperiodon) {
        return findByIstrackbackonIstimeperiodon(istrackbackon, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIstimeperiodon(boolean istrackbackon, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonAccounturl(boolean istrackbackon, String accounturl) {
        return findByIstrackbackonAccounturl(istrackbackon, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonAccounturl(boolean istrackbackon, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIsactiveaccount(boolean istrackbackon, boolean isactiveaccount) {
        return findByIstrackbackonIsactiveaccount(istrackbackon, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIsactiveaccount(boolean istrackbackon, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIsnewpendingadminapproval(boolean istrackbackon, boolean isnewpendingadminapproval) {
        return findByIstrackbackonIsnewpendingadminapproval(istrackbackon, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIsnewpendingadminapproval(boolean istrackbackon, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonHptemplateid(boolean istrackbackon, int hptemplateid) {
        return findByIstrackbackonHptemplateid(istrackbackon, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonHptemplateid(boolean istrackbackon, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonEntlisttemplateid(boolean istrackbackon, int entlisttemplateid) {
        return findByIstrackbackonEntlisttemplateid(istrackbackon, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonEntlisttemplateid(boolean istrackbackon, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonSitetemplateid(boolean istrackbackon, int sitetemplateid) {
        return findByIstrackbackonSitetemplateid(istrackbackon, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonSitetemplateid(boolean istrackbackon, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonCustomservername2(boolean istrackbackon, String customservername2) {
        return findByIstrackbackonCustomservername2(istrackbackon, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonCustomservername2(boolean istrackbackon, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonCustomservername3(boolean istrackbackon, String customservername3) {
        return findByIstrackbackonCustomservername3(istrackbackon, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonCustomservername3(boolean istrackbackon, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonAccountemail(boolean istrackbackon, String accountemail) {
        return findByIstrackbackonAccountemail(istrackbackon, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonAccountemail(boolean istrackbackon, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonNewslettersubject(boolean istrackbackon, String newslettersubject) {
        return findByIstrackbackonNewslettersubject(istrackbackon, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonNewslettersubject(boolean istrackbackon, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonEncryptedlicense(boolean istrackbackon, String encryptedlicense) {
        return findByIstrackbackonEncryptedlicense(istrackbackon, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonEncryptedlicense(boolean istrackbackon, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIsbillingokencrypted(boolean istrackbackon, String isbillingokencrypted) {
        return findByIstrackbackonIsbillingokencrypted(istrackbackon, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonIsbillingokencrypted(boolean istrackbackon, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonBillingerror(boolean istrackbackon, String billingerror) {
        return findByIstrackbackonBillingerror(istrackbackon, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonBillingerror(boolean istrackbackon, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonLastbillingcheck(boolean istrackbackon, java.util.Calendar lastbillingcheck) {
        return findByIstrackbackonLastbillingcheck(istrackbackon, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonLastbillingcheck(boolean istrackbackon, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonGooglemapsapikey(boolean istrackbackon, String googlemapsapikey) {
        return findByIstrackbackonGooglemapsapikey(istrackbackon, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonGooglemapsapikey(boolean istrackbackon, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstrackbackonMaxspaceinbytes(boolean istrackbackon, double maxspaceinbytes) {
        return findByIstrackbackonMaxspaceinbytes(istrackbackon, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstrackbackonMaxspaceinbytes(boolean istrackbackon, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istrackbackon='"+reger.core.Util.booleanAsSQLText(istrackbackon)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryTrackbackrequiresapproval(boolean islistedindirectory, boolean trackbackrequiresapproval) {
        return findByIslistedindirectoryTrackbackrequiresapproval(islistedindirectory, trackbackrequiresapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryTrackbackrequiresapproval(boolean islistedindirectory, boolean trackbackrequiresapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIstimeperiodon(boolean islistedindirectory, int istimeperiodon) {
        return findByIslistedindirectoryIstimeperiodon(islistedindirectory, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIstimeperiodon(boolean islistedindirectory, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryAccounturl(boolean islistedindirectory, String accounturl) {
        return findByIslistedindirectoryAccounturl(islistedindirectory, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryAccounturl(boolean islistedindirectory, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIsactiveaccount(boolean islistedindirectory, boolean isactiveaccount) {
        return findByIslistedindirectoryIsactiveaccount(islistedindirectory, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIsactiveaccount(boolean islistedindirectory, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIsnewpendingadminapproval(boolean islistedindirectory, boolean isnewpendingadminapproval) {
        return findByIslistedindirectoryIsnewpendingadminapproval(islistedindirectory, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIsnewpendingadminapproval(boolean islistedindirectory, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryHptemplateid(boolean islistedindirectory, int hptemplateid) {
        return findByIslistedindirectoryHptemplateid(islistedindirectory, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryHptemplateid(boolean islistedindirectory, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryEntlisttemplateid(boolean islistedindirectory, int entlisttemplateid) {
        return findByIslistedindirectoryEntlisttemplateid(islistedindirectory, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryEntlisttemplateid(boolean islistedindirectory, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectorySitetemplateid(boolean islistedindirectory, int sitetemplateid) {
        return findByIslistedindirectorySitetemplateid(islistedindirectory, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectorySitetemplateid(boolean islistedindirectory, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryCustomservername2(boolean islistedindirectory, String customservername2) {
        return findByIslistedindirectoryCustomservername2(islistedindirectory, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryCustomservername2(boolean islistedindirectory, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryCustomservername3(boolean islistedindirectory, String customservername3) {
        return findByIslistedindirectoryCustomservername3(islistedindirectory, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryCustomservername3(boolean islistedindirectory, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryAccountemail(boolean islistedindirectory, String accountemail) {
        return findByIslistedindirectoryAccountemail(islistedindirectory, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryAccountemail(boolean islistedindirectory, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryNewslettersubject(boolean islistedindirectory, String newslettersubject) {
        return findByIslistedindirectoryNewslettersubject(islistedindirectory, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryNewslettersubject(boolean islistedindirectory, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryEncryptedlicense(boolean islistedindirectory, String encryptedlicense) {
        return findByIslistedindirectoryEncryptedlicense(islistedindirectory, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryEncryptedlicense(boolean islistedindirectory, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIsbillingokencrypted(boolean islistedindirectory, String isbillingokencrypted) {
        return findByIslistedindirectoryIsbillingokencrypted(islistedindirectory, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryIsbillingokencrypted(boolean islistedindirectory, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryBillingerror(boolean islistedindirectory, String billingerror) {
        return findByIslistedindirectoryBillingerror(islistedindirectory, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryBillingerror(boolean islistedindirectory, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryLastbillingcheck(boolean islistedindirectory, java.util.Calendar lastbillingcheck) {
        return findByIslistedindirectoryLastbillingcheck(islistedindirectory, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryLastbillingcheck(boolean islistedindirectory, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryGooglemapsapikey(boolean islistedindirectory, String googlemapsapikey) {
        return findByIslistedindirectoryGooglemapsapikey(islistedindirectory, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryGooglemapsapikey(boolean islistedindirectory, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryMaxspaceinbytes(boolean islistedindirectory, double maxspaceinbytes) {
        return findByIslistedindirectoryMaxspaceinbytes(islistedindirectory, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIslistedindirectoryMaxspaceinbytes(boolean islistedindirectory, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE islistedindirectory='"+reger.core.Util.booleanAsSQLText(islistedindirectory)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIstimeperiodon(boolean trackbackrequiresapproval, int istimeperiodon) {
        return findByTrackbackrequiresapprovalIstimeperiodon(trackbackrequiresapproval, istimeperiodon, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIstimeperiodon(boolean trackbackrequiresapproval, int istimeperiodon, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', istimeperiodon='"+istimeperiodon+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalAccounturl(boolean trackbackrequiresapproval, String accounturl) {
        return findByTrackbackrequiresapprovalAccounturl(trackbackrequiresapproval, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalAccounturl(boolean trackbackrequiresapproval, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIsactiveaccount(boolean trackbackrequiresapproval, boolean isactiveaccount) {
        return findByTrackbackrequiresapprovalIsactiveaccount(trackbackrequiresapproval, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIsactiveaccount(boolean trackbackrequiresapproval, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIsnewpendingadminapproval(boolean trackbackrequiresapproval, boolean isnewpendingadminapproval) {
        return findByTrackbackrequiresapprovalIsnewpendingadminapproval(trackbackrequiresapproval, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIsnewpendingadminapproval(boolean trackbackrequiresapproval, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalHptemplateid(boolean trackbackrequiresapproval, int hptemplateid) {
        return findByTrackbackrequiresapprovalHptemplateid(trackbackrequiresapproval, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalHptemplateid(boolean trackbackrequiresapproval, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalEntlisttemplateid(boolean trackbackrequiresapproval, int entlisttemplateid) {
        return findByTrackbackrequiresapprovalEntlisttemplateid(trackbackrequiresapproval, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalEntlisttemplateid(boolean trackbackrequiresapproval, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalSitetemplateid(boolean trackbackrequiresapproval, int sitetemplateid) {
        return findByTrackbackrequiresapprovalSitetemplateid(trackbackrequiresapproval, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalSitetemplateid(boolean trackbackrequiresapproval, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalCustomservername2(boolean trackbackrequiresapproval, String customservername2) {
        return findByTrackbackrequiresapprovalCustomservername2(trackbackrequiresapproval, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalCustomservername2(boolean trackbackrequiresapproval, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalCustomservername3(boolean trackbackrequiresapproval, String customservername3) {
        return findByTrackbackrequiresapprovalCustomservername3(trackbackrequiresapproval, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalCustomservername3(boolean trackbackrequiresapproval, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalAccountemail(boolean trackbackrequiresapproval, String accountemail) {
        return findByTrackbackrequiresapprovalAccountemail(trackbackrequiresapproval, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalAccountemail(boolean trackbackrequiresapproval, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalNewslettersubject(boolean trackbackrequiresapproval, String newslettersubject) {
        return findByTrackbackrequiresapprovalNewslettersubject(trackbackrequiresapproval, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalNewslettersubject(boolean trackbackrequiresapproval, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalEncryptedlicense(boolean trackbackrequiresapproval, String encryptedlicense) {
        return findByTrackbackrequiresapprovalEncryptedlicense(trackbackrequiresapproval, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalEncryptedlicense(boolean trackbackrequiresapproval, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIsbillingokencrypted(boolean trackbackrequiresapproval, String isbillingokencrypted) {
        return findByTrackbackrequiresapprovalIsbillingokencrypted(trackbackrequiresapproval, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalIsbillingokencrypted(boolean trackbackrequiresapproval, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalBillingerror(boolean trackbackrequiresapproval, String billingerror) {
        return findByTrackbackrequiresapprovalBillingerror(trackbackrequiresapproval, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalBillingerror(boolean trackbackrequiresapproval, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalLastbillingcheck(boolean trackbackrequiresapproval, java.util.Calendar lastbillingcheck) {
        return findByTrackbackrequiresapprovalLastbillingcheck(trackbackrequiresapproval, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalLastbillingcheck(boolean trackbackrequiresapproval, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalGooglemapsapikey(boolean trackbackrequiresapproval, String googlemapsapikey) {
        return findByTrackbackrequiresapprovalGooglemapsapikey(trackbackrequiresapproval, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalGooglemapsapikey(boolean trackbackrequiresapproval, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalMaxspaceinbytes(boolean trackbackrequiresapproval, double maxspaceinbytes) {
        return findByTrackbackrequiresapprovalMaxspaceinbytes(trackbackrequiresapproval, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByTrackbackrequiresapprovalMaxspaceinbytes(boolean trackbackrequiresapproval, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE trackbackrequiresapproval='"+reger.core.Util.booleanAsSQLText(trackbackrequiresapproval)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonAccounturl(int istimeperiodon, String accounturl) {
        return findByIstimeperiodonAccounturl(istimeperiodon, accounturl, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonAccounturl(int istimeperiodon, String accounturl, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonIsactiveaccount(int istimeperiodon, boolean isactiveaccount) {
        return findByIstimeperiodonIsactiveaccount(istimeperiodon, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonIsactiveaccount(int istimeperiodon, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonIsnewpendingadminapproval(int istimeperiodon, boolean isnewpendingadminapproval) {
        return findByIstimeperiodonIsnewpendingadminapproval(istimeperiodon, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonIsnewpendingadminapproval(int istimeperiodon, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonHptemplateid(int istimeperiodon, int hptemplateid) {
        return findByIstimeperiodonHptemplateid(istimeperiodon, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonHptemplateid(int istimeperiodon, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonEntlisttemplateid(int istimeperiodon, int entlisttemplateid) {
        return findByIstimeperiodonEntlisttemplateid(istimeperiodon, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonEntlisttemplateid(int istimeperiodon, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonSitetemplateid(int istimeperiodon, int sitetemplateid) {
        return findByIstimeperiodonSitetemplateid(istimeperiodon, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonSitetemplateid(int istimeperiodon, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonCustomservername2(int istimeperiodon, String customservername2) {
        return findByIstimeperiodonCustomservername2(istimeperiodon, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonCustomservername2(int istimeperiodon, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonCustomservername3(int istimeperiodon, String customservername3) {
        return findByIstimeperiodonCustomservername3(istimeperiodon, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonCustomservername3(int istimeperiodon, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonAccountemail(int istimeperiodon, String accountemail) {
        return findByIstimeperiodonAccountemail(istimeperiodon, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonAccountemail(int istimeperiodon, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonNewslettersubject(int istimeperiodon, String newslettersubject) {
        return findByIstimeperiodonNewslettersubject(istimeperiodon, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonNewslettersubject(int istimeperiodon, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonEncryptedlicense(int istimeperiodon, String encryptedlicense) {
        return findByIstimeperiodonEncryptedlicense(istimeperiodon, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonEncryptedlicense(int istimeperiodon, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonIsbillingokencrypted(int istimeperiodon, String isbillingokencrypted) {
        return findByIstimeperiodonIsbillingokencrypted(istimeperiodon, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonIsbillingokencrypted(int istimeperiodon, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonBillingerror(int istimeperiodon, String billingerror) {
        return findByIstimeperiodonBillingerror(istimeperiodon, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonBillingerror(int istimeperiodon, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonLastbillingcheck(int istimeperiodon, java.util.Calendar lastbillingcheck) {
        return findByIstimeperiodonLastbillingcheck(istimeperiodon, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonLastbillingcheck(int istimeperiodon, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonGooglemapsapikey(int istimeperiodon, String googlemapsapikey) {
        return findByIstimeperiodonGooglemapsapikey(istimeperiodon, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonGooglemapsapikey(int istimeperiodon, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonMaxspaceinbytes(int istimeperiodon, double maxspaceinbytes) {
        return findByIstimeperiodonMaxspaceinbytes(istimeperiodon, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIstimeperiodonMaxspaceinbytes(int istimeperiodon, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE istimeperiodon='"+istimeperiodon+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlIsactiveaccount(String accounturl, boolean isactiveaccount) {
        return findByAccounturlIsactiveaccount(accounturl, isactiveaccount, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlIsactiveaccount(String accounturl, boolean isactiveaccount, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlIsnewpendingadminapproval(String accounturl, boolean isnewpendingadminapproval) {
        return findByAccounturlIsnewpendingadminapproval(accounturl, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlIsnewpendingadminapproval(String accounturl, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlHptemplateid(String accounturl, int hptemplateid) {
        return findByAccounturlHptemplateid(accounturl, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlHptemplateid(String accounturl, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlEntlisttemplateid(String accounturl, int entlisttemplateid) {
        return findByAccounturlEntlisttemplateid(accounturl, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlEntlisttemplateid(String accounturl, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlSitetemplateid(String accounturl, int sitetemplateid) {
        return findByAccounturlSitetemplateid(accounturl, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlSitetemplateid(String accounturl, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlCustomservername2(String accounturl, String customservername2) {
        return findByAccounturlCustomservername2(accounturl, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlCustomservername2(String accounturl, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlCustomservername3(String accounturl, String customservername3) {
        return findByAccounturlCustomservername3(accounturl, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlCustomservername3(String accounturl, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlAccountemail(String accounturl, String accountemail) {
        return findByAccounturlAccountemail(accounturl, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlAccountemail(String accounturl, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlNewslettersubject(String accounturl, String newslettersubject) {
        return findByAccounturlNewslettersubject(accounturl, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlNewslettersubject(String accounturl, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlEncryptedlicense(String accounturl, String encryptedlicense) {
        return findByAccounturlEncryptedlicense(accounturl, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlEncryptedlicense(String accounturl, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlIsbillingokencrypted(String accounturl, String isbillingokencrypted) {
        return findByAccounturlIsbillingokencrypted(accounturl, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlIsbillingokencrypted(String accounturl, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlBillingerror(String accounturl, String billingerror) {
        return findByAccounturlBillingerror(accounturl, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlBillingerror(String accounturl, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlLastbillingcheck(String accounturl, java.util.Calendar lastbillingcheck) {
        return findByAccounturlLastbillingcheck(accounturl, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlLastbillingcheck(String accounturl, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlGooglemapsapikey(String accounturl, String googlemapsapikey) {
        return findByAccounturlGooglemapsapikey(accounturl, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlGooglemapsapikey(String accounturl, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccounturlMaxspaceinbytes(String accounturl, double maxspaceinbytes) {
        return findByAccounturlMaxspaceinbytes(accounturl, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccounturlMaxspaceinbytes(String accounturl, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accounturl='"+reger.core.Util.cleanForSQL(accounturl)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountIsnewpendingadminapproval(boolean isactiveaccount, boolean isnewpendingadminapproval) {
        return findByIsactiveaccountIsnewpendingadminapproval(isactiveaccount, isnewpendingadminapproval, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountIsnewpendingadminapproval(boolean isactiveaccount, boolean isnewpendingadminapproval, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountHptemplateid(boolean isactiveaccount, int hptemplateid) {
        return findByIsactiveaccountHptemplateid(isactiveaccount, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountHptemplateid(boolean isactiveaccount, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountEntlisttemplateid(boolean isactiveaccount, int entlisttemplateid) {
        return findByIsactiveaccountEntlisttemplateid(isactiveaccount, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountEntlisttemplateid(boolean isactiveaccount, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountSitetemplateid(boolean isactiveaccount, int sitetemplateid) {
        return findByIsactiveaccountSitetemplateid(isactiveaccount, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountSitetemplateid(boolean isactiveaccount, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountCustomservername2(boolean isactiveaccount, String customservername2) {
        return findByIsactiveaccountCustomservername2(isactiveaccount, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountCustomservername2(boolean isactiveaccount, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountCustomservername3(boolean isactiveaccount, String customservername3) {
        return findByIsactiveaccountCustomservername3(isactiveaccount, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountCustomservername3(boolean isactiveaccount, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountAccountemail(boolean isactiveaccount, String accountemail) {
        return findByIsactiveaccountAccountemail(isactiveaccount, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountAccountemail(boolean isactiveaccount, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountNewslettersubject(boolean isactiveaccount, String newslettersubject) {
        return findByIsactiveaccountNewslettersubject(isactiveaccount, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountNewslettersubject(boolean isactiveaccount, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountEncryptedlicense(boolean isactiveaccount, String encryptedlicense) {
        return findByIsactiveaccountEncryptedlicense(isactiveaccount, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountEncryptedlicense(boolean isactiveaccount, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountIsbillingokencrypted(boolean isactiveaccount, String isbillingokencrypted) {
        return findByIsactiveaccountIsbillingokencrypted(isactiveaccount, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountIsbillingokencrypted(boolean isactiveaccount, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountBillingerror(boolean isactiveaccount, String billingerror) {
        return findByIsactiveaccountBillingerror(isactiveaccount, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountBillingerror(boolean isactiveaccount, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountLastbillingcheck(boolean isactiveaccount, java.util.Calendar lastbillingcheck) {
        return findByIsactiveaccountLastbillingcheck(isactiveaccount, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountLastbillingcheck(boolean isactiveaccount, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountGooglemapsapikey(boolean isactiveaccount, String googlemapsapikey) {
        return findByIsactiveaccountGooglemapsapikey(isactiveaccount, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountGooglemapsapikey(boolean isactiveaccount, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountMaxspaceinbytes(boolean isactiveaccount, double maxspaceinbytes) {
        return findByIsactiveaccountMaxspaceinbytes(isactiveaccount, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsactiveaccountMaxspaceinbytes(boolean isactiveaccount, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isactiveaccount='"+reger.core.Util.booleanAsSQLText(isactiveaccount)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalHptemplateid(boolean isnewpendingadminapproval, int hptemplateid) {
        return findByIsnewpendingadminapprovalHptemplateid(isnewpendingadminapproval, hptemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalHptemplateid(boolean isnewpendingadminapproval, int hptemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', hptemplateid='"+hptemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalEntlisttemplateid(boolean isnewpendingadminapproval, int entlisttemplateid) {
        return findByIsnewpendingadminapprovalEntlisttemplateid(isnewpendingadminapproval, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalEntlisttemplateid(boolean isnewpendingadminapproval, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalSitetemplateid(boolean isnewpendingadminapproval, int sitetemplateid) {
        return findByIsnewpendingadminapprovalSitetemplateid(isnewpendingadminapproval, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalSitetemplateid(boolean isnewpendingadminapproval, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalCustomservername2(boolean isnewpendingadminapproval, String customservername2) {
        return findByIsnewpendingadminapprovalCustomservername2(isnewpendingadminapproval, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalCustomservername2(boolean isnewpendingadminapproval, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalCustomservername3(boolean isnewpendingadminapproval, String customservername3) {
        return findByIsnewpendingadminapprovalCustomservername3(isnewpendingadminapproval, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalCustomservername3(boolean isnewpendingadminapproval, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalAccountemail(boolean isnewpendingadminapproval, String accountemail) {
        return findByIsnewpendingadminapprovalAccountemail(isnewpendingadminapproval, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalAccountemail(boolean isnewpendingadminapproval, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalNewslettersubject(boolean isnewpendingadminapproval, String newslettersubject) {
        return findByIsnewpendingadminapprovalNewslettersubject(isnewpendingadminapproval, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalNewslettersubject(boolean isnewpendingadminapproval, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalEncryptedlicense(boolean isnewpendingadminapproval, String encryptedlicense) {
        return findByIsnewpendingadminapprovalEncryptedlicense(isnewpendingadminapproval, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalEncryptedlicense(boolean isnewpendingadminapproval, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalIsbillingokencrypted(boolean isnewpendingadminapproval, String isbillingokencrypted) {
        return findByIsnewpendingadminapprovalIsbillingokencrypted(isnewpendingadminapproval, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalIsbillingokencrypted(boolean isnewpendingadminapproval, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalBillingerror(boolean isnewpendingadminapproval, String billingerror) {
        return findByIsnewpendingadminapprovalBillingerror(isnewpendingadminapproval, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalBillingerror(boolean isnewpendingadminapproval, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalLastbillingcheck(boolean isnewpendingadminapproval, java.util.Calendar lastbillingcheck) {
        return findByIsnewpendingadminapprovalLastbillingcheck(isnewpendingadminapproval, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalLastbillingcheck(boolean isnewpendingadminapproval, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalGooglemapsapikey(boolean isnewpendingadminapproval, String googlemapsapikey) {
        return findByIsnewpendingadminapprovalGooglemapsapikey(isnewpendingadminapproval, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalGooglemapsapikey(boolean isnewpendingadminapproval, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalMaxspaceinbytes(boolean isnewpendingadminapproval, double maxspaceinbytes) {
        return findByIsnewpendingadminapprovalMaxspaceinbytes(isnewpendingadminapproval, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsnewpendingadminapprovalMaxspaceinbytes(boolean isnewpendingadminapproval, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isnewpendingadminapproval='"+reger.core.Util.booleanAsSQLText(isnewpendingadminapproval)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidEntlisttemplateid(int hptemplateid, int entlisttemplateid) {
        return findByHptemplateidEntlisttemplateid(hptemplateid, entlisttemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidEntlisttemplateid(int hptemplateid, int entlisttemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', entlisttemplateid='"+entlisttemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidSitetemplateid(int hptemplateid, int sitetemplateid) {
        return findByHptemplateidSitetemplateid(hptemplateid, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidSitetemplateid(int hptemplateid, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidCustomservername2(int hptemplateid, String customservername2) {
        return findByHptemplateidCustomservername2(hptemplateid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidCustomservername2(int hptemplateid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidCustomservername3(int hptemplateid, String customservername3) {
        return findByHptemplateidCustomservername3(hptemplateid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidCustomservername3(int hptemplateid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidAccountemail(int hptemplateid, String accountemail) {
        return findByHptemplateidAccountemail(hptemplateid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidAccountemail(int hptemplateid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidNewslettersubject(int hptemplateid, String newslettersubject) {
        return findByHptemplateidNewslettersubject(hptemplateid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidNewslettersubject(int hptemplateid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidEncryptedlicense(int hptemplateid, String encryptedlicense) {
        return findByHptemplateidEncryptedlicense(hptemplateid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidEncryptedlicense(int hptemplateid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidIsbillingokencrypted(int hptemplateid, String isbillingokencrypted) {
        return findByHptemplateidIsbillingokencrypted(hptemplateid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidIsbillingokencrypted(int hptemplateid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidBillingerror(int hptemplateid, String billingerror) {
        return findByHptemplateidBillingerror(hptemplateid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidBillingerror(int hptemplateid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidLastbillingcheck(int hptemplateid, java.util.Calendar lastbillingcheck) {
        return findByHptemplateidLastbillingcheck(hptemplateid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidLastbillingcheck(int hptemplateid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidGooglemapsapikey(int hptemplateid, String googlemapsapikey) {
        return findByHptemplateidGooglemapsapikey(hptemplateid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidGooglemapsapikey(int hptemplateid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByHptemplateidMaxspaceinbytes(int hptemplateid, double maxspaceinbytes) {
        return findByHptemplateidMaxspaceinbytes(hptemplateid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByHptemplateidMaxspaceinbytes(int hptemplateid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE hptemplateid='"+hptemplateid+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidSitetemplateid(int entlisttemplateid, int sitetemplateid) {
        return findByEntlisttemplateidSitetemplateid(entlisttemplateid, sitetemplateid, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidSitetemplateid(int entlisttemplateid, int sitetemplateid, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', sitetemplateid='"+sitetemplateid+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidCustomservername2(int entlisttemplateid, String customservername2) {
        return findByEntlisttemplateidCustomservername2(entlisttemplateid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidCustomservername2(int entlisttemplateid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidCustomservername3(int entlisttemplateid, String customservername3) {
        return findByEntlisttemplateidCustomservername3(entlisttemplateid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidCustomservername3(int entlisttemplateid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidAccountemail(int entlisttemplateid, String accountemail) {
        return findByEntlisttemplateidAccountemail(entlisttemplateid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidAccountemail(int entlisttemplateid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidNewslettersubject(int entlisttemplateid, String newslettersubject) {
        return findByEntlisttemplateidNewslettersubject(entlisttemplateid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidNewslettersubject(int entlisttemplateid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidEncryptedlicense(int entlisttemplateid, String encryptedlicense) {
        return findByEntlisttemplateidEncryptedlicense(entlisttemplateid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidEncryptedlicense(int entlisttemplateid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidIsbillingokencrypted(int entlisttemplateid, String isbillingokencrypted) {
        return findByEntlisttemplateidIsbillingokencrypted(entlisttemplateid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidIsbillingokencrypted(int entlisttemplateid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidBillingerror(int entlisttemplateid, String billingerror) {
        return findByEntlisttemplateidBillingerror(entlisttemplateid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidBillingerror(int entlisttemplateid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidLastbillingcheck(int entlisttemplateid, java.util.Calendar lastbillingcheck) {
        return findByEntlisttemplateidLastbillingcheck(entlisttemplateid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidLastbillingcheck(int entlisttemplateid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidGooglemapsapikey(int entlisttemplateid, String googlemapsapikey) {
        return findByEntlisttemplateidGooglemapsapikey(entlisttemplateid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidGooglemapsapikey(int entlisttemplateid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidMaxspaceinbytes(int entlisttemplateid, double maxspaceinbytes) {
        return findByEntlisttemplateidMaxspaceinbytes(entlisttemplateid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEntlisttemplateidMaxspaceinbytes(int entlisttemplateid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE entlisttemplateid='"+entlisttemplateid+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidCustomservername2(int sitetemplateid, String customservername2) {
        return findBySitetemplateidCustomservername2(sitetemplateid, customservername2, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidCustomservername2(int sitetemplateid, String customservername2, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidCustomservername3(int sitetemplateid, String customservername3) {
        return findBySitetemplateidCustomservername3(sitetemplateid, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidCustomservername3(int sitetemplateid, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidAccountemail(int sitetemplateid, String accountemail) {
        return findBySitetemplateidAccountemail(sitetemplateid, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidAccountemail(int sitetemplateid, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidNewslettersubject(int sitetemplateid, String newslettersubject) {
        return findBySitetemplateidNewslettersubject(sitetemplateid, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidNewslettersubject(int sitetemplateid, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidEncryptedlicense(int sitetemplateid, String encryptedlicense) {
        return findBySitetemplateidEncryptedlicense(sitetemplateid, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidEncryptedlicense(int sitetemplateid, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidIsbillingokencrypted(int sitetemplateid, String isbillingokencrypted) {
        return findBySitetemplateidIsbillingokencrypted(sitetemplateid, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidIsbillingokencrypted(int sitetemplateid, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidBillingerror(int sitetemplateid, String billingerror) {
        return findBySitetemplateidBillingerror(sitetemplateid, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidBillingerror(int sitetemplateid, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidLastbillingcheck(int sitetemplateid, java.util.Calendar lastbillingcheck) {
        return findBySitetemplateidLastbillingcheck(sitetemplateid, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidLastbillingcheck(int sitetemplateid, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidGooglemapsapikey(int sitetemplateid, String googlemapsapikey) {
        return findBySitetemplateidGooglemapsapikey(sitetemplateid, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidGooglemapsapikey(int sitetemplateid, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findBySitetemplateidMaxspaceinbytes(int sitetemplateid, double maxspaceinbytes) {
        return findBySitetemplateidMaxspaceinbytes(sitetemplateid, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findBySitetemplateidMaxspaceinbytes(int sitetemplateid, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE sitetemplateid='"+sitetemplateid+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Customservername3(String customservername2, String customservername3) {
        return findByCustomservername2Customservername3(customservername2, customservername3, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Customservername3(String customservername2, String customservername3, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Accountemail(String customservername2, String accountemail) {
        return findByCustomservername2Accountemail(customservername2, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Accountemail(String customservername2, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Newslettersubject(String customservername2, String newslettersubject) {
        return findByCustomservername2Newslettersubject(customservername2, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Newslettersubject(String customservername2, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Encryptedlicense(String customservername2, String encryptedlicense) {
        return findByCustomservername2Encryptedlicense(customservername2, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Encryptedlicense(String customservername2, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Isbillingokencrypted(String customservername2, String isbillingokencrypted) {
        return findByCustomservername2Isbillingokencrypted(customservername2, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Isbillingokencrypted(String customservername2, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Billingerror(String customservername2, String billingerror) {
        return findByCustomservername2Billingerror(customservername2, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Billingerror(String customservername2, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Lastbillingcheck(String customservername2, java.util.Calendar lastbillingcheck) {
        return findByCustomservername2Lastbillingcheck(customservername2, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Lastbillingcheck(String customservername2, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Googlemapsapikey(String customservername2, String googlemapsapikey) {
        return findByCustomservername2Googlemapsapikey(customservername2, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Googlemapsapikey(String customservername2, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername2Maxspaceinbytes(String customservername2, double maxspaceinbytes) {
        return findByCustomservername2Maxspaceinbytes(customservername2, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername2Maxspaceinbytes(String customservername2, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername2='"+reger.core.Util.cleanForSQL(customservername2)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Accountemail(String customservername3, String accountemail) {
        return findByCustomservername3Accountemail(customservername3, accountemail, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Accountemail(String customservername3, String accountemail, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Newslettersubject(String customservername3, String newslettersubject) {
        return findByCustomservername3Newslettersubject(customservername3, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Newslettersubject(String customservername3, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Encryptedlicense(String customservername3, String encryptedlicense) {
        return findByCustomservername3Encryptedlicense(customservername3, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Encryptedlicense(String customservername3, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Isbillingokencrypted(String customservername3, String isbillingokencrypted) {
        return findByCustomservername3Isbillingokencrypted(customservername3, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Isbillingokencrypted(String customservername3, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Billingerror(String customservername3, String billingerror) {
        return findByCustomservername3Billingerror(customservername3, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Billingerror(String customservername3, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Lastbillingcheck(String customservername3, java.util.Calendar lastbillingcheck) {
        return findByCustomservername3Lastbillingcheck(customservername3, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Lastbillingcheck(String customservername3, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Googlemapsapikey(String customservername3, String googlemapsapikey) {
        return findByCustomservername3Googlemapsapikey(customservername3, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Googlemapsapikey(String customservername3, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByCustomservername3Maxspaceinbytes(String customservername3, double maxspaceinbytes) {
        return findByCustomservername3Maxspaceinbytes(customservername3, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByCustomservername3Maxspaceinbytes(String customservername3, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE customservername3='"+reger.core.Util.cleanForSQL(customservername3)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailNewslettersubject(String accountemail, String newslettersubject) {
        return findByAccountemailNewslettersubject(accountemail, newslettersubject, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailNewslettersubject(String accountemail, String newslettersubject, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailEncryptedlicense(String accountemail, String encryptedlicense) {
        return findByAccountemailEncryptedlicense(accountemail, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailEncryptedlicense(String accountemail, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailIsbillingokencrypted(String accountemail, String isbillingokencrypted) {
        return findByAccountemailIsbillingokencrypted(accountemail, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailIsbillingokencrypted(String accountemail, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailBillingerror(String accountemail, String billingerror) {
        return findByAccountemailBillingerror(accountemail, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailBillingerror(String accountemail, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailLastbillingcheck(String accountemail, java.util.Calendar lastbillingcheck) {
        return findByAccountemailLastbillingcheck(accountemail, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailLastbillingcheck(String accountemail, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailGooglemapsapikey(String accountemail, String googlemapsapikey) {
        return findByAccountemailGooglemapsapikey(accountemail, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailGooglemapsapikey(String accountemail, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByAccountemailMaxspaceinbytes(String accountemail, double maxspaceinbytes) {
        return findByAccountemailMaxspaceinbytes(accountemail, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByAccountemailMaxspaceinbytes(String accountemail, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE accountemail='"+reger.core.Util.cleanForSQL(accountemail)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectEncryptedlicense(String newslettersubject, String encryptedlicense) {
        return findByNewslettersubjectEncryptedlicense(newslettersubject, encryptedlicense, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectEncryptedlicense(String newslettersubject, String encryptedlicense, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"', encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectIsbillingokencrypted(String newslettersubject, String isbillingokencrypted) {
        return findByNewslettersubjectIsbillingokencrypted(newslettersubject, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectIsbillingokencrypted(String newslettersubject, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectBillingerror(String newslettersubject, String billingerror) {
        return findByNewslettersubjectBillingerror(newslettersubject, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectBillingerror(String newslettersubject, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectLastbillingcheck(String newslettersubject, java.util.Calendar lastbillingcheck) {
        return findByNewslettersubjectLastbillingcheck(newslettersubject, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectLastbillingcheck(String newslettersubject, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectGooglemapsapikey(String newslettersubject, String googlemapsapikey) {
        return findByNewslettersubjectGooglemapsapikey(newslettersubject, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectGooglemapsapikey(String newslettersubject, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectMaxspaceinbytes(String newslettersubject, double maxspaceinbytes) {
        return findByNewslettersubjectMaxspaceinbytes(newslettersubject, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByNewslettersubjectMaxspaceinbytes(String newslettersubject, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE newslettersubject='"+reger.core.Util.cleanForSQL(newslettersubject)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseIsbillingokencrypted(String encryptedlicense, String isbillingokencrypted) {
        return findByEncryptedlicenseIsbillingokencrypted(encryptedlicense, isbillingokencrypted, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseIsbillingokencrypted(String encryptedlicense, String isbillingokencrypted, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"', isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseBillingerror(String encryptedlicense, String billingerror) {
        return findByEncryptedlicenseBillingerror(encryptedlicense, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseBillingerror(String encryptedlicense, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseLastbillingcheck(String encryptedlicense, java.util.Calendar lastbillingcheck) {
        return findByEncryptedlicenseLastbillingcheck(encryptedlicense, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseLastbillingcheck(String encryptedlicense, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseGooglemapsapikey(String encryptedlicense, String googlemapsapikey) {
        return findByEncryptedlicenseGooglemapsapikey(encryptedlicense, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseGooglemapsapikey(String encryptedlicense, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseMaxspaceinbytes(String encryptedlicense, double maxspaceinbytes) {
        return findByEncryptedlicenseMaxspaceinbytes(encryptedlicense, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByEncryptedlicenseMaxspaceinbytes(String encryptedlicense, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE encryptedlicense='"+reger.core.Util.cleanForSQL(encryptedlicense)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedBillingerror(String isbillingokencrypted, String billingerror) {
        return findByIsbillingokencryptedBillingerror(isbillingokencrypted, billingerror, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedBillingerror(String isbillingokencrypted, String billingerror, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"', billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedLastbillingcheck(String isbillingokencrypted, java.util.Calendar lastbillingcheck) {
        return findByIsbillingokencryptedLastbillingcheck(isbillingokencrypted, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedLastbillingcheck(String isbillingokencrypted, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedGooglemapsapikey(String isbillingokencrypted, String googlemapsapikey) {
        return findByIsbillingokencryptedGooglemapsapikey(isbillingokencrypted, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedGooglemapsapikey(String isbillingokencrypted, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedMaxspaceinbytes(String isbillingokencrypted, double maxspaceinbytes) {
        return findByIsbillingokencryptedMaxspaceinbytes(isbillingokencrypted, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByIsbillingokencryptedMaxspaceinbytes(String isbillingokencrypted, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE isbillingokencrypted='"+reger.core.Util.cleanForSQL(isbillingokencrypted)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByBillingerrorLastbillingcheck(String billingerror, java.util.Calendar lastbillingcheck) {
        return findByBillingerrorLastbillingcheck(billingerror, lastbillingcheck, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByBillingerrorLastbillingcheck(String billingerror, java.util.Calendar lastbillingcheck, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"', lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByBillingerrorGooglemapsapikey(String billingerror, String googlemapsapikey) {
        return findByBillingerrorGooglemapsapikey(billingerror, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByBillingerrorGooglemapsapikey(String billingerror, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByBillingerrorMaxspaceinbytes(String billingerror, double maxspaceinbytes) {
        return findByBillingerrorMaxspaceinbytes(billingerror, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByBillingerrorMaxspaceinbytes(String billingerror, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE billingerror='"+reger.core.Util.cleanForSQL(billingerror)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByLastbillingcheckGooglemapsapikey(java.util.Calendar lastbillingcheck, String googlemapsapikey) {
        return findByLastbillingcheckGooglemapsapikey(lastbillingcheck, googlemapsapikey, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByLastbillingcheckGooglemapsapikey(java.util.Calendar lastbillingcheck, String googlemapsapikey, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"', googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByLastbillingcheckMaxspaceinbytes(java.util.Calendar lastbillingcheck, double maxspaceinbytes) {
        return findByLastbillingcheckMaxspaceinbytes(lastbillingcheck, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByLastbillingcheckMaxspaceinbytes(java.util.Calendar lastbillingcheck, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE lastbillingcheck='"+reger.core.TimeUtils.dateformatfordb(lastbillingcheck)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }

    public static ArrayList<AccountDAO> findByGooglemapsapikeyMaxspaceinbytes(String googlemapsapikey, double maxspaceinbytes) {
        return findByGooglemapsapikeyMaxspaceinbytes(googlemapsapikey, maxspaceinbytes, 0, 50000);
    }

    public static ArrayList<AccountDAO> findByGooglemapsapikeyMaxspaceinbytes(String googlemapsapikey, double maxspaceinbytes, int limitmin, int limitmax) {
        ArrayList<AccountDAO> resultarraylist = new ArrayList<AccountDAO>();
        //-----------------------------------
        //-----------------------------------
        String[][] rstData= Db.RunSQL("SELECT accountid FROM account WHERE googlemapsapikey='"+reger.core.Util.cleanForSQL(googlemapsapikey)+"', maxspaceinbytes='"+String.valueOf(maxspaceinbytes)+"' LIMIT "+limitmin+", "+limitmax+" ");
        //-----------------------------------
        //-----------------------------------
        if (rstData!=null && rstData.length>0){
            for(int i=0; i<rstData.length; i++){
                 resultarraylist.add(new AccountDAO(Integer.parseInt(rstData[i][0])));
            }
        }
        return resultarraylist;
    }


}