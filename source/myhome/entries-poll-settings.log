<%@ page import="java.util.HashMap"%>
<%@ page import="java.util.Iterator"%>
<%@ page import="java.util.ArrayList"%>
<%@ page import="reger.cache.EntryCache"%>
<%@ page import="reger.InfoBox"%>
<%@ page import="reger.Entry"%>
<%@ page import="reger.poll.*"%>
<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection = pageProps.ADMINSITE;
pageProps.title = "Edit Poll";
pageProps.isPasswordProtected = true;
pageProps.navButtonName = "entriespolls";
pageProps.aclObjectName = "ADDEDITENTRIES";
pageProps.trafficType = reger.Vars.TRAFFICTYPEADMINMISC;
pageProps.pathToAppRoot = "../";
/*----------------------------------------------------*/
%>

<%@ include file="../globalheader.jsp" %>

<%
/*----------------------------------------------------*/
/*                  Main Body                         */
    StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/

//Security + loading
Poll poll = null;
Entry entry = null;
if (request.getParameter("pollid")!=null && reger.core.Util.isinteger(request.getParameter("pollid")) && Integer.parseInt(request.getParameter("pollid"))>0){
    poll = new Poll(Integer.parseInt(request.getParameter("pollid")));
    entry = EntryCache.get(poll.getEventid());
} else if (request.getParameter("eventid")!=null && reger.core.Util.isinteger(request.getParameter("eventid"))){
    poll = new Poll(0);
    entry = EntryCache.get(Integer.parseInt(request.getParameter("eventid")));
}


if (!userSession.getAccountuser().userCanViewLog(entry.logid) || entry.accountid!=userSession.getAccount().getAccountid()){
    mb.append(InfoBox.get(InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, "Sorry.  You don't appear to have permission to access this poll."));
} else {
    if (request.getParameter("action")!=null && request.getParameter("action").equals("savepoll")){
        poll.setQuestion(request.getParameter("question"));
        poll.setEventid(entry.eventid);
        poll.setReaderscanaddownanswer(reger.core.Util.booleanFromSQLText(request.getParameter("readerscanaddownanswer")));
        poll.setReaderscanvoteonreaderanswers(reger.core.Util.booleanFromSQLText(request.getParameter("readerscanvoteonreaderanswers")));
        poll.setReaderscanaddcomments(reger.core.Util.booleanFromSQLText(request.getParameter("readerscanaddcomments")));
        poll.setReaderinputismoderated(reger.core.Util.booleanFromSQLText(request.getParameter("readerinputismoderated")));
        poll.setIsopen(reger.core.Util.booleanFromSQLText(request.getParameter("isopen")));
        poll.save();
        //Check current answers for edits
        for (Iterator it = poll.getPollAnswers().iterator(); it.hasNext(); ) {
            PollAnswer answer = (PollAnswer)it.next();
            if (request.getParameter("answer-"+answer.getPollanswerid())!=null && !request.getParameter("answer-"+answer.getPollanswerid()).equals("")){
                answer.setAnswer(request.getParameter("answer-"+answer.getPollanswerid()));
                answer.save();
            }
            if (request.getParameter("answer-delete-"+answer.getPollanswerid())!=null && request.getParameter("answer-delete-"+answer.getPollanswerid()).equals("1")){
                answer.delete();
            }
        }
        //Get new answers
        if (request.getParameterValues("newanswer").length>0){
            for (int i = 0; i < request.getParameterValues("newanswer").length; i++) {
                String answer = request.getParameterValues("newanswer")[i];
                if (!answer.equals("")){
                    PollAnswer pollAnswer = new PollAnswer();
                    pollAnswer.setPollid(poll.getPollid());
                    pollAnswer.setAnswer(answer);
                    pollAnswer.setVotes(0);
                    pollAnswer.save();
                }
            }
        }
        //Check current reader answers for edits
        for (Iterator it = poll.getPollReaderAnswers().iterator(); it.hasNext(); ) {
            PollReaderAnswer answer = (PollReaderAnswer)it.next();
            if (request.getParameter("readeranswer-"+answer.getPollreaderanswerid())!=null && !request.getParameter("answer-"+answer.getPollreaderanswerid()).equals("")){
                answer.setAnswer(request.getParameter("readeranswer-"+answer.getPollreaderanswerid()));
                answer.save();
            }
            if (request.getParameter("readeranswer-approve-"+answer.getPollreaderanswerid())!=null && request.getParameter("answer-approve-"+answer.getPollreaderanswerid()).equals("1")){
                answer.setIsapproved(true);
                answer.save();
            } else {
                answer.setIsapproved(false);
                answer.save();
            }
            if (request.getParameter("readeranswer-delete-"+answer.getPollreaderanswerid())!=null && request.getParameter("answer-delete-"+answer.getPollreaderanswerid()).equals("1")){
                answer.delete();
            }
        }
        //Refresh the poll
        poll.load();
        EntryCache.flush(entry.eventid);
        entry.getEntryAll(entry.eventid);
    } else if (request.getParameter("action")!=null && request.getParameter("action").equals("togglecommentapproval")){
        //Toggle approval of a comment
        if (request.getParameter("pollreadercommentid")!=null && reger.core.Util.isinteger(request.getParameter("pollreadercommentid"))){
            PollReaderComment pollReaderComment = new PollReaderComment(Integer.parseInt(request.getParameter("pollreadercommentid")));
            if (pollReaderComment.getIsapproved()){
                pollReaderComment.setIsapproved(false);
            } else {
                pollReaderComment.setIsapproved(true);
            }
            pollReaderComment.save();
            poll.load();
        }
    }


    mb.append(reger.ui.BubbleBox.start("", pageProps.pathToAppRoot));

    mb.append("<form action=entries-poll-settings.log method=post>");
    mb.append("<input type=hidden name=action value=savepoll>");
    mb.append("<input type=hidden name=pollid value="+poll.getPollid()+">");
    mb.append("<input type=hidden name=eventid value="+entry.eventid+">");
    mb.append("<table cellpadding=0 cellspacing=0 border=0>");
    mb.append("<tr>");
    mb.append("<td valign=top>");

    mb.append("<tr>");
    mb.append("<td>");
    mb.append("Question:");
    mb.append("</td>");
    mb.append("<td>");
    mb.append("<input type=text name=question size=40 maxlength=255 value=\""+reger.core.Util.cleanForHtml(poll.getQuestion())+"\">");
    mb.append("</td>");
    mb.append("</tr>");

    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("Answers:");
    mb.append("</td>");
    mb.append("<td valign=top nowrap>");
    for (Iterator it = poll.getPollAnswers().iterator(); it.hasNext(); ) {
        PollAnswer answer = (PollAnswer)it.next();
        mb.append("<input type=text name='answer-"+answer.getPollanswerid()+"' size=25 maxlength=255 value=\""+reger.core.Util.cleanForHtml(answer.getAnswer())+"\">");
        mb.append("<input type=checkbox name=answer-delete-"+answer.getPollanswerid()+" value=1>");
        mb.append("<font face=arial size=-2>");
        mb.append("Delete");
        mb.append("</font>");
        mb.append("<br>");
    }
    for(int i=0; i<5; i++){
        mb.append("<input type=text name='newanswer' size=25 maxlength=255 value=\"\">");
        mb.append("<br>");
    }
    mb.append("</td>");
    mb.append("</tr>");


    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("Reader Answers:");
    mb.append("</td>");
    mb.append("<td valign=top nowrap>");
    for (Iterator it = poll.getPollReaderAnswers().iterator(); it.hasNext(); ) {
        PollReaderAnswer answer = (PollReaderAnswer)it.next();
        mb.append("<input type=text name='readeranswer-"+answer.getPollreaderanswerid()+"' size=25 maxlength=255 value=\""+reger.core.Util.cleanForHtml(answer.getAnswer())+"\">");
        mb.append("<input type=checkbox name=readeranswer-delete-"+answer.getPollreaderanswerid()+" value=1>");
        mb.append("<font face=arial size=-2>");
        mb.append("Delete");
        mb.append("</font>");
        mb.append(" ");
        String answerIsApprovedCheckbox = "";
        if (answer.getIsapproved()){
            answerIsApprovedCheckbox = "checked";
        }
        mb.append("<input type=checkbox name=readeranswer-approve-"+answer.getPollreaderanswerid()+" value=1 "+answerIsApprovedCheckbox+">");
        mb.append("<font face=arial size=-2>");
        mb.append("Approved");
        mb.append("</font>");
        mb.append("<br>");
    }
    mb.append("</td>");
    mb.append("</tr>");


    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("");
    mb.append("</td>");
    mb.append("<td valign=top>");
    String addOwnCheckbox = "";
    if (poll.getReaderscanaddownanswer()){
        addOwnCheckbox = "checked";
    }
    mb.append("<input type=checkbox name=readerscanaddownanswer value=1 "+addOwnCheckbox+">");
    mb.append("<font face=arial size=-2>");
    mb.append("Readers can add their own answers");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");

    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("");
    mb.append("</td>");
    mb.append("<td valign=top>");
    String voteOnOthersCheckbox = "";
    if (poll.getReaderscanvoteonreaderanswers()){
        voteOnOthersCheckbox = "checked";
    }
    mb.append("<input type=checkbox name=readerscanvoteonreaderanswers value=1 "+voteOnOthersCheckbox+">");
    mb.append("<font face=arial size=-2>");
    mb.append("Readers can vote on each other's answers");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");


    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("");
    mb.append("</td>");
    mb.append("<td valign=top>");
    String addCommentsCheckbox = "";
    if (poll.getReaderscanaddcomments()){
        addCommentsCheckbox = "checked";
    }
    mb.append("<input type=checkbox name=readerscanaddcomments value=1 "+addCommentsCheckbox+">");
    mb.append("<font face=arial size=-2>");
    mb.append("Readers can comment on poll results");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");

    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("");
    mb.append("</td>");
    mb.append("<td valign=top>");
    String isModeratedCheckbox = "";
    if (poll.getReaderinputismoderated()){
        isModeratedCheckbox = "checked";
    }
    mb.append("<input type=checkbox name=readerinputismoderated value=1 "+isModeratedCheckbox+">");
    mb.append("<font face=arial size=-2>");
    mb.append("Readers comments and answers must be approved");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");

    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("");
    mb.append("</td>");
    mb.append("<td valign=top>");
    String isOpenCheckbox = "";
    if (poll.getIsopen()){
        isOpenCheckbox = "checked";
    }
    mb.append("<input type=checkbox name=isopen value=1 "+isOpenCheckbox+">");
    mb.append("<font face=arial size=-2>");
    mb.append("Poll is open for voting");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");

    mb.append("<tr>");
    mb.append("<td valign=top>");
    mb.append("");
    mb.append("</td>");
    mb.append("<td valign=top>");
    mb.append("<input type=submit value='Save Poll'>");
    mb.append("</td>");
    mb.append("</tr>");

    mb.append("</table>");

    mb.append("</form>");
    mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));




    if (poll.getReaderscanaddcomments()){
        mb.append(reger.ui.BubbleBox.start("", pageProps.pathToAppRoot));
        mb.append("<table cellpadding=10 cellspacing=3 border=0>");
        mb.append("<tr>");
        mb.append("<td valign=top align=left colspan=3>");
        mb.append("<font face=arial size=+1>");
        mb.append("Comments on this Poll");
        mb.append("</font>");
        mb.append("<td>");
        mb.append("</tr>");
        for (Iterator it = poll.getPollReaderComments().iterator(); it.hasNext(); ) {
            PollReaderComment comment = (PollReaderComment)it.next();
            mb.append("<tr>");
            mb.append("<td valign=top align=right>");
            mb.append("<font face=arial size=-2>");
            mb.append("<a href='entries-poll-settings.log?action=togglecommentapproval&pollid="+poll.getPollid()+"&pollreadercommentid="+comment.getPollreadercommentid()+"'>");
            if (comment.getIsapproved()){
                mb.append("Click to Hide");
            } else {
                mb.append("Click to Approve");
            }
            mb.append("</a>");
            mb.append("</font>");
            mb.append("</td>");
            mb.append("<td valign=top align=right>");
            mb.append("<font face=arial size=-2>");
            if (!comment.getReadername().equals("")){
                mb.append(comment.getReadername());
            } else {
                mb.append("Anonymous");
            }
            mb.append("</font>");
            mb.append("</td>");
            mb.append("<td valign=top align=left>");
            mb.append("<font face=arial size=-1>");
            mb.append(comment.getComment().replaceAll("<", "&lt;"));
            mb.append("</font>");
            mb.append("</td>");
            mb.append("</tr>");
        }
        mb.append("</table>");
        mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));
    }





}











%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
    StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/
%>

<%@ include file="../globalfooter.jsp" %>