<%@ page import="reger.core.db.Db,
                 reger.core.Util,
                 reger.core.db.Db"%>
<%@ page import="reger.core.Debug"%>
<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.ADMINSITE;
pageProps.title = "Invite Friends";
pageProps.isPasswordProtected = true;
pageProps.navButtonName = "peopleinvite";
pageProps.aclObjectName = "INVITEPEOPLE";
pageProps.trafficType=reger.Vars.TRAFFICTYPEADMINMISC;
pageProps.pathToAppRoot="../";
/*----------------------------------------------------*/
%>

<%@ include file="../globalheader.jsp" %>

<%

/*----------------------------------------------------*/
/*                  Main Body                         */
        StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/





String emailaddresses = "";
String message="";
String subject = userSession.getAccountuser().getFriendlyname() + " has invited you to "+reger.Vars.getHttpUrlPrefix() + userSession.getSiteRootUrl() + "/";
boolean mailSent=false;
String errortext="";
String fromaddress = reger.Vars.EMAILDEFAULTFROM;

//Get emailaddresses
if (request.getParameter("emailaddresses")!=null && !request.getParameter("emailaddresses").equals("")){
    emailaddresses=request.getParameter("emailaddresses");
}
//Get message
if (request.getParameter("message")!=null && !request.getParameter("message").equals("")){
    message=request.getParameter("message");
}
//Get message
if (request.getParameter("subject")!=null && !request.getParameter("subject").equals("")){
    subject=request.getParameter("subject");
}

//Get from address
if (!userSession.getAccountuser().getEmail().equals("")){
    fromaddress = userSession.getAccountuser().getEmail();
}

//If the action is to send
if (pageProps.action.equals("sendemail")) {

    Debug.debug(5, "", "people-friends-invite.log - into sendemail section.");

    //At least one email address is required.
    if (emailaddresses.equals("")){
        errortext=errortext + "You must provide at least one email address to invite.<br>";
    }


    if (!emailaddresses.equals("")){

        Debug.debug(5, "", "people-friends-invite.log - into emails not blank.");

        //Split the emailaddresses
        String[] emails = emailaddresses.split(",");
        //Loop through the emails
        for (int i = 0; i < emails.length; i++) {
            Debug.debug(5, "", "people-friends-invite.log - iterating emails:" + emails[i]);

            //Extract this email address
            String thisEmail = emails[i].trim();

            Debug.debug(5, "", "people-friends-invite.log - into friends invitation.");

            //Create an invitation entry
            String friendinvitationkey = reger.core.RandomString.randomAlphanumeric(10);
            //-----------------------------------
            //-----------------------------------
            int friendinvitationid = Db.RunSQLInsert("INSERT INTO friendinvitation(accountuseridsource, accountuseridtarget, status, email, subject, message, createdate, emaillastsentdate, friendinvitationkey) VALUES('"+userSession.getAccountuser().getAccountuserid()+"', '-1', '"+reger.Vars.INVITATIONSTATUSOPEN+"', '"+reger.core.Util.cleanForSQL(thisEmail)+"', '"+reger.core.Util.cleanForSQL(subject)+"', '"+Util.cleanForSQL(message)+"', '"+reger.core.TimeUtils.nowInGmtString()+"', '"+reger.core.TimeUtils.nowInGmtString()+"', '"+reger.core.Util.cleanForSQL(friendinvitationkey)+"')");
            //-----------------------------------
            //-----------------------------------

            //Get each log that's checked
            //-----------------------------------
            //-----------------------------------
            String[][] rstLog= Db.RunSQL("SELECT logid FROM megalog WHERE accountid='"+ userSession.getAccount().getAccountid() +"' AND "+userSession.getAccountuser().LogsUserCanAdministerQueryend(userSession.getAccount().getAccountid())+" ORDER BY name ASC");
            //-----------------------------------
            //-----------------------------------
            if (rstLog!=null && rstLog.length>0){
                for(int j=0; j<rstLog.length; j++){

                    if ( (request.getParameter("canreadlogid-" + rstLog[j][0])!=null && request.getParameter("canreadlogid-" + rstLog[j][0]).equals("1")) || (request.getParameter("canwritelogid-" + rstLog[j][0])!=null && request.getParameter("canwritelogid-" + rstLog[j][0]).equals("1")) ){
                        String canread = "0";
                        if (request.getParameter("canreadlogid-" + rstLog[j][0])!=null && request.getParameter("canreadlogid-" + rstLog[j][0]).equals("1")){
                            canread = "1";
                        }
                        String canwrite = "0";
                        if (request.getParameter("canwritelogid-" + rstLog[j][0])!=null && request.getParameter("canwritelogid-" + rstLog[j][0]).equals("1")){
                            canwrite = "1";
                        }

                        //Add to the friendinvitationlogid table
                        //-----------------------------------
                        //-----------------------------------
                        int identity = Db.RunSQLInsert("INSERT INTO friendinvitationlogid(friendinvitationid, logid, canread, canwrite) VALUES('"+friendinvitationid+"', '"+rstLog[j][0]+"', '"+canread+"', '"+canwrite+"')");
                        //-----------------------------------
                        //-----------------------------------
                    }
                }
            }

            //Get each log type that's checked
            //-----------------------------------
            //-----------------------------------
            String[][] rstLogTypeList= Db.RunSQL("SELECT eventtypeid FROM megalogtype WHERE accountuserid='"+ userSession.getAccountuser().getAccountuserid() +"' ORDER BY megalogname ASC");
            //-----------------------------------
            //-----------------------------------
            if (rstLogTypeList!=null && rstLogTypeList.length>0){
                for(int j=0; j<rstLogTypeList.length; j++){
                    if (request.getParameter("eventtypeid-" + rstLogTypeList[j][0])!=null && request.getParameter("eventtypeid-" + rstLogTypeList[j][0]).equals("1")){
                        //Add to the friendinvitationlogid table
                        //-----------------------------------
                        //-----------------------------------
                        int identity = Db.RunSQLInsert("INSERT INTO friendinvitationeventtypeid(friendinvitationid, eventtypeid) VALUES('"+friendinvitationid+"', '"+rstLogTypeList[j][0]+"')");
                        //-----------------------------------
                        //-----------------------------------
                    }
                }
            }


            //Get each groupsubscription that's checked
            //-----------------------------------
            //-----------------------------------
            String[][] rstGp= Db.RunSQL("SELECT groupsubscriptionid FROM groupsubscription WHERE accountuserid='"+ userSession.getAccountuser().getAccountuserid() +"' ORDER BY groupname ASC");
            //-----------------------------------
            //-----------------------------------
            if (rstGp!=null && rstGp.length>0){
                for(int j=0; j<rstGp.length; j++){
                    if (request.getParameter("groupsubscriptionid-" + rstGp[j][0])!=null && request.getParameter("groupsubscriptionid-" + rstGp[j][0]).equals("1")){
                        //Add to the friendinvitationlogid table
                        //-----------------------------------
                        //-----------------------------------
                        int identity = Db.RunSQLInsert("INSERT INTO friendinvitationgroupsubscriptionid(friendinvitationid, groupsubscriptionid) VALUES('"+friendinvitationid+"', '"+rstGp[j][0]+"')");
                        //-----------------------------------
                        //-----------------------------------
                    }
                }
            }

            //Generate the messagebody
            StringBuffer emailBody = reger.emailtext.BasicEmails.invitationEmail(userSession.getAccountuser(), userSession.getPl(), friendinvitationid);

            //Send the email
            Debug.debug(5, "", "people-friends-invite.log - about to send the email to:" + thisEmail);
            reger.core.EmailSend.sendMail(fromaddress, thisEmail, subject, emailBody.toString());
            Debug.debug(5, "", "people-friends-invite.log - email body to:" + thisEmail + "<br><br>" + emailBody.toString());
            Debug.debug(5, "", "people-friends-invite.log - finished sending email to:" + thisEmail);

            mailSent=true;
        }
    }

    //Redirect to the main friends page  ... is this the best flow knowing that users can come at it from many directions?
    if (mailSent){
        try {
            response.sendRedirect(pageProps.pathToAppRoot + "myhome/people-friends.log");
            return;
        } catch (Exception e){
            Debug.errorsave(e, "");
        }
    }

}




mb.append("<font face=arial size=+2>");
mb.append("<b>");
if (mailSent){

    mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPECOMPLETE, pageProps.pathToAppRoot, "Thanks!  Your message is now zipping through cyberspace to your friend(s).  Happy logging!"));
    mb.append("<br>");
}
mb.append("</b>");
mb.append("</font>");


if (!errortext.equals("")){
    mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, errortext));
}


mb.append("<form action=people-friends-invite.log method=post>");

mb.append(reger.ui.BubbleBox.start("", pageProps.pathToAppRoot));

mb.append("<input type=hidden name=action value=sendemail>");



mb.append(reger.ui.BubbleBox.start("Friend's Email Addresses (required):", pageProps.pathToAppRoot));
//mb.append("Friend's Email Addresses (required):<br>");
mb.append("<font face=arial size=-2>");
mb.append("Separate Email Addresses With A Comma.  At least one is required.  We will only use this email to send the invitation.");
mb.append("</font>");
mb.append("<br>");
mb.append("<textarea name=emailaddresses cols='50' rows='3' style=\"width:100%;\">");
mb.append("</textarea>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));


mb.append(reger.ui.BubbleBox.start("Subject", pageProps.pathToAppRoot));
mb.append("<br>");
mb.append("<font face=arial size=-1>");
//mb.append("<br><br>Subject (required):<br>");
mb.append("<input type=text name=subject size=65 maxlength=70 value=\""+reger.core.Util.cleanForHtml(subject)+"\">");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));



mb.append(reger.ui.BubbleBox.start("Custom Message (optional)", pageProps.pathToAppRoot));
mb.append("<font face=arial size=-1>");
mb.append("You can add your own comments which will be added to the top of the email message:<br>");
mb.append("<textarea name=message cols='50' rows='3' style=\"width:100%;\">");
mb.append("</textarea>");
mb.append("</font>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));




mb.append(reger.ui.BubbleBox.start("Logs to Share (optional)", pageProps.pathToAppRoot));
mb.append("<br>");
mb.append("<div class=greybox>");
mb.append("<font face=arial size=-2>");
mb.append("Inviting people to logs will automatically grant them read and/or author permission, as you specify. Please be careful.");
mb.append("</font>");
mb.append("</div>");
mb.append("<br>");
mb.append("<table cellpadding=10 width=100% cellspacing=2 border=0>");
//-----------------------------------
//-----------------------------------
String[][] rstLog= Db.RunSQL("SELECT logid, name, logaccess, password FROM megalog WHERE accountid='"+ userSession.getAccount().getAccountid() +"' AND "+userSession.getAccountuser().LogsUserCanAdministerQueryend(userSession.getAccount().getAccountid())+" ORDER BY name ASC");
//-----------------------------------
//-----------------------------------
int numberofcolumns = 4;
int colnum = 0;
int widthofcolsinpercent = 100/numberofcolumns;
if (rstLog!=null && rstLog.length>0){
	for(int i=0; i<rstLog.length; i++){
	    colnum = colnum + 1;
	    if (colnum>numberofcolumns){
            colnum = 1;
        }
	    if (colnum==1){
	        mb.append("<tr>");
        }

        String selectedText = "";
        if (request.getParameter("logid")!=null && request.getParameter("logid").equals(rstLog[i][0])){
            selectedText = " checked ";
        }

	    mb.append("<td width="+widthofcolsinpercent+"% valign=top>");
        mb.append("<font face=arial size=-1>");
        mb.append("<b>");
        mb.append(" " + rstLog[i][1]);
        mb.append("</b>");
        mb.append("</font>");
        mb.append("<br>");
		String logaccesstext="<img src='../images/icon-public.gif' width='16' height='16' alt='' border='0'>This is a Public Log";
		if (Integer.parseInt(rstLog[i][2])==reger.Vars.LOGACCESSPRIVATE) {
			logaccesstext="<img src='../images/icon-private.gif' width='16' height='16' alt='' border='0'>This is a Private Log";
		}
        mb.append("<font face=arial size=-2>");
        mb.append(logaccesstext);
        mb.append("</font>");
        mb.append("<br>");
        mb.append("<font face=arial size=-2>");
        mb.append("<input type=checkbox name='canreadlogid-"+rstLog[i][0]+"' value=1 "+selectedText+">");
        mb.append(" Invite as Reader");
        mb.append("</font>");
        mb.append("<br>");
        mb.append("<font face=arial size=-2>");
        mb.append("<input type=checkbox name='canwritelogid-"+rstLog[i][0]+"' value=1 "+selectedText+">");
        mb.append(" Invite as Author");
        mb.append("</font>");
        mb.append("</td>");
        if (colnum==numberofcolumns){
            mb.append("</tr>");
        }
	}
	int remainingcols = numberofcolumns - colnum;
    for(int k=0; k<remainingcols; k++){
        mb.append("<td valign=top>");
        mb.append("</td>");
    }
    if (remainingcols>0){
        mb.append("</tr>");
    }
} else {
    mb.append("</tr>");
    mb.append("<td valign=top>");
    mb.append("<font face=arial size=-2>");
    mb.append("No logs are defined.");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");
}
mb.append("</table>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));






mb.append(reger.ui.BubbleBox.start("Share Your Custom Log Types (optional)", pageProps.pathToAppRoot));
mb.append("<br>");
mb.append("<table cellpadding=10 width=100% cellspacing=2 border=0>");
//-----------------------------------
//-----------------------------------
String[][] rstLogType= Db.RunSQL("SELECT eventtypeid, megalogname FROM megalogtype WHERE accountuserid='"+userSession.getAccountuser().getAccountuserid()+"'");
//-----------------------------------
//-----------------------------------
int numberofcolumnsType = 4;
int colnumType = 0;
int widthofcolsinpercentType = 100/numberofcolumnsType;
if (rstLogType!=null && rstLogType.length>0){
	for(int i=0; i<rstLogType.length; i++){
	    colnumType = colnumType + 1;
	    if (colnumType>numberofcolumnsType){
            colnumType = 1;
        }
	    if (colnumType==1){
	        mb.append("<tr>");
        }
        String selectedText = "";
        if (request.getParameter("eventtypeid")!=null && request.getParameter("eventtypeid").equals(rstLogType[i][0])){
            selectedText = " checked ";
        }
	    mb.append("<td width="+widthofcolsinpercentType+"% valign=top>");
        mb.append("<input type=checkbox name='eventtypeid-"+rstLogType[i][0]+"' value=1 "+selectedText+">");
        mb.append("<font face=arial size=-1>");
        mb.append("<b>");
        mb.append(" Type: " + rstLogType[i][1]);
        mb.append("</b>");
        mb.append("</font>");
        mb.append("</td>");
        if (colnumType==numberofcolumnsType){
            mb.append("</tr>");
        }
	}
	int remainingcolsType = numberofcolumnsType - colnumType;
    for(int k=0; k<remainingcolsType; k++){
        mb.append("<td valign=top>");
        mb.append("</td>");
    }
    if (remainingcolsType>0){
        mb.append("</tr>");
    }
} else {
    mb.append("</tr>");
    mb.append("<td valign=top>");
    mb.append("<font face=arial size=-2>");
    mb.append("No custom logs types are defined.");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");
}

mb.append("</table>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));


mb.append(reger.ui.BubbleBox.start("Share Log Types You're Using (optional)", pageProps.pathToAppRoot));
mb.append("<br>");
mb.append("<table cellpadding=10 width=100% cellspacing=2 border=0>");
//-----------------------------------
//-----------------------------------
String[][] rstLogTypeUsing= Db.RunSQL("SELECT DISTINCT eventtypeid, name FROM megalog WHERE accountid='"+ userSession.getAccount().getAccountid() +"' AND "+userSession.getAccountuser().LogsUserCanAdministerQueryend(userSession.getAccount().getAccountid())+" ORDER BY name ASC");
//-----------------------------------
//-----------------------------------
int numberofcolumnsTypeUsing = 4;
int colnumTypeUsing = 0;
int widthofcolsinpercentTypeUsing = 100/numberofcolumnsTypeUsing;
if (rstLogTypeUsing!=null && rstLogTypeUsing.length>0){
	for(int i=0; i<rstLogTypeUsing.length; i++){
	    colnumTypeUsing = colnumTypeUsing + 1;
	    if (colnumTypeUsing>numberofcolumnsTypeUsing){
            colnumTypeUsing = 1;
        }
	    if (colnumTypeUsing==1){
	        mb.append("<tr>");
        }
        String selectedText = "";
        if (request.getParameter("eventtypeid")!=null && request.getParameter("eventtypeid").equals(rstLogTypeUsing[i][0])){
            selectedText = " checked ";
        }
	    mb.append("<td width="+widthofcolsinpercentTypeUsing+"% valign=top>");
        mb.append("<input type=checkbox name='eventtypeid-"+rstLogTypeUsing[i][0]+"' value=1 "+selectedText+">");
        mb.append("<font face=arial size=-1>");
        mb.append("<b>");
        mb.append(" Type: " + rstLogTypeUsing[i][1]);
        mb.append("</b>");
        mb.append("</font>");
        mb.append("</td>");
        if (colnumTypeUsing==numberofcolumnsTypeUsing){
            mb.append("</tr>");
        }
	}
	int remainingcolsType = numberofcolumnsTypeUsing - colnumTypeUsing;
    for(int i=0; i<remainingcolsType; i++){
        mb.append("<td valign=top>");
        mb.append("</td>");
    }
    if (remainingcolsType>0){
        mb.append("</tr>");
    }
} else {
    mb.append("</tr>");
    mb.append("<td valign=top>");
    mb.append("<font face=arial size=-2>");
    mb.append("No custom logs types are defined.");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("</tr>");
}

mb.append("</table>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));



mb.append(reger.ui.BubbleBox.start("Groups (optional)", pageProps.pathToAppRoot));
mb.append("<br>");
mb.append("<table cellpadding=10 width=100% cellspacing=2 border=0>");
mb.append("<tr>");
mb.append("<td bgcolor=e6e6e6>");
mb.append("<font face=arial size=-2>");
mb.append("Group Name");
mb.append("</font>");
mb.append("</td>");
mb.append("<td bgcolor=e6e6e6>");
mb.append("<font face=arial size=-2>");
mb.append("Group Reading");
mb.append("</font>");
mb.append("</td>");
mb.append("<td bgcolor=e6e6e6>");
mb.append("<font face=arial size=-2>");
mb.append("Group Posting");
mb.append("</font>");
mb.append("</td>");
mb.append("<td bgcolor=e6e6e6>");
mb.append("<font face=arial size=-2>");
mb.append(" ");
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");
//-----------------------------------
//-----------------------------------
String[][] rstGroup= Db.RunSQL("SELECT groupsubscriptionid, groupname, viewingentriesrequiresgroupkey, addingentriesrequiresgroupkey FROM groupsubscription WHERE accountuserid='"+ userSession.getAccountuser().getAccountuserid() +"' ORDER BY groupname ASC");
//-----------------------------------
//-----------------------------------
if (rstGroup!=null && rstGroup.length>0){
	for(int i=0; i<rstGroup.length; i++){
	    mb.append("<tr>");
	    mb.append("<td nowrap valign=top>");
        mb.append("<input type=checkbox name='groupsubscriptionid-"+rstGroup[i][0]+"' value=1 ");
        if (request.getParameter("groupsubscriptionid")!=null && reger.core.Util.isinteger(request.getParameter("groupsubscriptionid"))){
            if (request.getParameter("groupsubscriptionid").equals(rstGroup[i][0])){
                mb.append(" checked ");
            }
        }
        mb.append(">");
        mb.append("<font face=arial size=-1>");
        mb.append("<b>");
        mb.append(rstGroup[i][1]);
        mb.append("</b>");
        mb.append("</font>");
        mb.append("</td>");
        mb.append("<td valign=top align=center>");
		String groupReadText="<img src='../images/icon-public.gif' width='16' height='16' alt='' border='0'><br>Public Reading";
		if (rstGroup[i][2].equals("1")) {
			groupReadText="<img src='../images/icon-private.gif' width='16' height='16' alt='' border='0'><br>Private Reading";
		}
        mb.append("<font face=arial size=-2>");
        mb.append(groupReadText);
        mb.append("</font>");
        mb.append("</td>");
        mb.append("<td valign=top align=center>");
		String groupPostText="<img src='../images/icon-public.gif' width='16' height='16' alt='' border='0'><br>Public Posting";
		if (rstGroup[i][3].equals("1")) {
			groupPostText="<img src='../images/icon-private.gif' width='16' height='16' alt='' border='0'><br>Private Posting";
		}
        mb.append("<font face=arial size=-2>");
        mb.append(groupPostText);
        mb.append("</font>");
        mb.append("</td>");
        mb.append("<td valign=top>");
        if (rstGroup[i][2].equals("1") || rstGroup[i][3].equals("1")){
            mb.append("<font face=arial size=-2>");
            mb.append("Note: Inviting people to a group will automatically grant them the groupKey for that group.");
            mb.append("</font>");
        }
        mb.append("</td>");
	}
} else {
    mb.append("<tr>");
    mb.append("<td valign=top colspan=4>");
    mb.append("<font face=arial size=-2>");
    mb.append("You don't belong to any groups.");
    mb.append("</font>");
    mb.append("</td>");
    mb.append("<tr>");
}
mb.append("</table>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));

mb.append(reger.ui.BubbleBox.start("", pageProps.pathToAppRoot));
mb.append("<input type=submit value='Invite Friends'>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));

mb.append("</font>");

mb.append("</form>");

mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));

//mb.append("</td>");
//mb.append("</tr>");
//mb.append("</table>");


%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
    StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/

//sc.append("This is a ");
//sc.append("side column section.");
%>


<%@ include file="../globalfooter.jsp" %>
