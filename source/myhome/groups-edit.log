<%@ page import="reger.core.db.Db,
                 org.apache.xmlrpc.XmlRpcClient,
                 java.util.Vector,
                 java.util.Hashtable,
                 reger.core.db.Db"%>
<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.ADMINSITE;
pageProps.title = "Group";
pageProps.isPasswordProtected = true;
pageProps.navButtonName = "groups";
pageProps.aclObjectName = "MANAGEGROUPS";
pageProps.trafficType=reger.Vars.TRAFFICTYPEADMINMISC;
pageProps.pathToAppRoot="../";
/*----------------------------------------------------*/
%>

<%@ include file="../globalheader.jsp" %>

<%

/*----------------------------------------------------*/
/*                  Main Body                         */
        StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/

//Get group details
int groupid = -1;
int groupsubscriptionid = -1;
String groupName = "";
String groupDescription = "";
String webUrlOfGroup = "";
String feedUrlOfGroup = "";
boolean viewingEntriesRequiresGroupKey = false;
boolean addingEntriesRequiresGroupKey = false;
String groupKey = "";
String groupAdminKey = "";
String serverUrl = "";

//Join Action
if (pageProps.action.equals("join")){
    if (request.getParameter("groupid")!=null && reger.core.Util.isinteger(request.getParameter("groupid"))){
        if (request.getParameter("groupserversubscriptionid")!=null && reger.core.Util.isinteger(request.getParameter("groupserversubscriptionid"))){
            //Call the server and get group details
            //-----------------------------------
            //-----------------------------------
            String[][] rstServer= Db.RunSQL("SELECT groupserversubscriptionid, serverurl FROM groupserversubscription WHERE groupserversubscriptionid='"+request.getParameter("groupserversubscriptionid")+"' AND accountuserid='"+userSession.getAccountuser().getAccountuserid()+"'");
            //-----------------------------------
            //-----------------------------------
            if (rstServer!=null && rstServer.length>0){
                for(int i=0; i<rstServer.length; i++){
                    XmlRpcClient xmlrpc = new XmlRpcClient (rstServer[i][1]);
                    Vector params = new Vector();
                    params.addElement (new Integer(Integer.parseInt(request.getParameter("groupid"))));
                    Hashtable o = (Hashtable) xmlrpc.execute ("weblogGroup.getGroupDetails", params);
                    if (o!=null){
                        if (o.get("error")==null){
                            groupName = (String)o.get("groupName");
                            groupDescription = (String)o.get("groupDescription");
                            webUrlOfGroup = (String)o.get("webUrlOfGroup");
                            feedUrlOfGroup = (String)o.get("feedUrlOfGroup");
                            if (((Boolean)o.get("viewingEntriesRequiresGroupKey")).booleanValue()){
                                viewingEntriesRequiresGroupKey = true;
                            }
                            if (((Boolean)o.get("addingEntriesRequiresGroupKey")).booleanValue()){
                                addingEntriesRequiresGroupKey = true;
                            }
                        }
                    }
                }
            }

            //See if the group already exists
            //-----------------------------------
            //-----------------------------------
            String[][] rstExistingSub= Db.RunSQL("SELECT groupsubscriptionid, groupkey, groupadminkey FROM groupsubscription WHERE groupid='"+Integer.parseInt(request.getParameter("groupid"))+"' AND groupserversubscriptionid='"+request.getParameter("groupserversubscriptionid")+"' AND accountuserid='"+userSession.getAccountuser().getAccountuserid()+"'");
            //-----------------------------------
            //-----------------------------------
            if (rstExistingSub!=null && rstExistingSub.length>0){
                //The groupsubscription already exists.
                groupsubscriptionid = Integer.parseInt(rstExistingSub[0][0]);
            } else {
                //Create a new groupsubscription
                String tmpViewBoolean = "0";
                if (viewingEntriesRequiresGroupKey){
                    tmpViewBoolean = "1";
                }
                String tmpAddBoolean = "0";
                if (addingEntriesRequiresGroupKey){
                    tmpAddBoolean = "1";
                }
                //-----------------------------------
                //-----------------------------------
                groupsubscriptionid = Db.RunSQLInsert("INSERT INTO groupsubscription(accountuserid, groupserversubscriptionid, groupid, groupname, groupdescription, feedurlofgroup, weburlofgroup, viewingentriesrequiresgroupkey, addingentriesrequiresgroupkey, groupkey, groupadminkey) VALUES('"+userSession.getAccountuser().getAccountuserid()+"', '"+reger.core.Util.cleanForSQL(request.getParameter("groupserversubscriptionid"))+"', '"+Integer.parseInt(request.getParameter("groupid"))+"', '"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupName, 255))+"', '"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupDescription, 255))+"', '"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(feedUrlOfGroup, 255))+"', '"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(webUrlOfGroup, 255))+"', '"+tmpViewBoolean+"', '"+tmpAddBoolean+"', '"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupKey, 255))+"', '"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupAdminKey, 255))+"')");
                //-----------------------------------
                //-----------------------------------

            }

            if (!viewingEntriesRequiresGroupKey && !addingEntriesRequiresGroupKey){
                response.sendRedirect("groups.log");
            }

            if (viewingEntriesRequiresGroupKey && groupKey.equals("")){
                mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEINFO, pageProps.pathToAppRoot, "You are now a member of this group. In order to read this group you need a groupKey.  Enter one below and save to continue."));
            }

            if (addingEntriesRequiresGroupKey && groupKey.equals("")){
                mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEINFO, pageProps.pathToAppRoot, "You are now a member of this group. In order to post to this group you need a groupKey.  Enter one below and save to continue."));
            }

        }
    }
}

//Check for an incoming groupsubscriptionid
if (request.getParameter("groupsubscriptionid")!=null && reger.core.Util.isinteger(request.getParameter("groupsubscriptionid"))){
    groupsubscriptionid = Integer.parseInt(request.getParameter("groupsubscriptionid"));
}

//Go get the data for this groupsubscriptionid
//-----------------------------------
//-----------------------------------
String[][] rstGroups= Db.RunSQL("SELECT groupid, groupname, groupdescription, viewingentriesrequiresgroupkey, addingentriesrequiresgroupkey, feedurlofgroup, weburlofgroup, groupkey, groupadminkey, serverurl FROM groupsubscription, groupserversubscription WHERE groupsubscription.groupserversubscriptionid=groupserversubscription.groupserversubscriptionid AND groupsubscriptionid='"+request.getParameter("groupsubscriptionid")+"' AND groupsubscription.accountuserid='"+userSession.getAccountuser().getAccountuserid()+"'");
//-----------------------------------
//-----------------------------------
if (rstGroups!=null && rstGroups.length>0){
    for(int i=0; i<rstGroups.length; i++){
        //The group already exists.
        viewingEntriesRequiresGroupKey = false;
        if (rstGroups[i][3].equals("1")){
            viewingEntriesRequiresGroupKey = true;
        }
        addingEntriesRequiresGroupKey = false;
        if (rstGroups[i][4].equals("1")){
            addingEntriesRequiresGroupKey = true;
        }
        groupid =  Integer.parseInt(rstGroups[i][0]);
        groupName = rstGroups[i][1];
        groupDescription = rstGroups[i][2];
        feedUrlOfGroup = rstGroups[i][5];
        webUrlOfGroup = rstGroups[i][6];
        groupKey = rstGroups[i][7];
        groupAdminKey = rstGroups[i][8];
        serverUrl = rstGroups[i][9];
    }
}



//Do any editing required to local information
if (pageProps.action.equals("edit")){
    boolean isGoodData = true;
    //Override with incoming data from URL or form
    if (request.getParameter("groupkey")!=null && !request.getParameter("groupkey").equals("")){
        if (reger.GroupsClient.testGroupKey(groupid, request.getParameter("groupkey"), serverUrl)){
            groupKey = request.getParameter("groupkey");
        } else {
            isGoodData = false;
            mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, "That groupKey is not valid and will not be saved."));
        }
    }
    if (request.getParameter("groupadminkey")!=null && !request.getParameter("groupadminkey").equals("")){
        if (reger.GroupsClient.testGroupAdminKey(groupid, request.getParameter("groupadminkey"), serverUrl)){
            groupAdminKey = request.getParameter("groupadminkey");
        } else {
            isGoodData = false;
            mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, "That groupAdminKey is not valid and will not be saved."));
        }
    }
    String tmpAddBoolean = "0";
    if (request.getParameter("addingentriesrequiresgroupkey")!=null && request.getParameter("addingentriesrequiresgroupkey").equals("1")){
        addingEntriesRequiresGroupKey = true;
        tmpAddBoolean = "1";
    }
    String tmpViewBoolean = "0";
    if (request.getParameter("viewingentriesrequiresgroupkey")!=null && request.getParameter("viewingentriesrequiresgroupkey").equals("1")){
        viewingEntriesRequiresGroupKey = true;
        tmpViewBoolean = "1";
    }
    //-----------------------------------
    //-----------------------------------
    int count = Db.RunSQLUpdate("UPDATE groupsubscription SET groupname='"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupName, 255))+"', groupdescription='"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupDescription, 255))+"', feedurlofgroup='"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(feedUrlOfGroup, 255))+"', weburlofgroup='"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(webUrlOfGroup, 255))+"', viewingentriesrequiresgroupkey='"+tmpViewBoolean+"', addingentriesrequiresgroupkey='"+tmpAddBoolean+"', groupkey='"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupKey, 255))+"', groupadminkey='"+reger.core.Util.cleanForSQL(reger.core.Util.truncateString(groupAdminKey, 255))+"' WHERE groupsubscriptionid='"+groupsubscriptionid+"'");
    //-----------------------------------
    //-----------------------------------

    if (isGoodData){
        response.sendRedirect("groups.log");
    }

}



//Now go back after editing to get the record
//Go get the data for this groupsubscriptionid
//-----------------------------------
//-----------------------------------
String[][] rstGroups2= Db.RunSQL("SELECT groupid, groupname, groupdescription, viewingentriesrequiresgroupkey, addingentriesrequiresgroupkey, feedurlofgroup, weburlofgroup, groupkey, groupadminkey, serverurl FROM groupsubscription, groupserversubscription WHERE groupsubscription.groupserversubscriptionid=groupserversubscription.groupserversubscriptionid AND groupsubscriptionid='"+request.getParameter("groupsubscriptionid")+"' AND groupsubscription.accountuserid='"+userSession.getAccountuser().getAccountuserid()+"'");
//-----------------------------------
//-----------------------------------
if (rstGroups2!=null && rstGroups2.length>0){
    for(int i=0; i<rstGroups2.length; i++){
        //The group already exists.
        viewingEntriesRequiresGroupKey = false;
        if (rstGroups2[i][3].equals("1")){
            viewingEntriesRequiresGroupKey = true;
        }
        addingEntriesRequiresGroupKey = false;
        if (rstGroups2[i][4].equals("1")){
            addingEntriesRequiresGroupKey = true;
        }
        groupid =  Integer.parseInt(rstGroups[i][0]);
        groupName = rstGroups2[i][1];
        groupDescription = rstGroups2[i][2];
        feedUrlOfGroup = rstGroups2[i][5];
        webUrlOfGroup = rstGroups2[i][6];
        groupKey = rstGroups2[i][7];
        groupAdminKey = rstGroups2[i][8];
        serverUrl = rstGroups2[i][9];
    }
}

//Test validity of the groupKey
boolean groupKeyIsValid = reger.GroupsClient.testGroupKey(groupid, groupKey, serverUrl);
boolean groupAdminKeyIsValid = reger.GroupsClient.testGroupAdminKey(groupid, groupAdminKey, serverUrl);




mb.append(reger.ui.BubbleBox.start("", pageProps.pathToAppRoot));

mb.append("<font face=arial size=+1>");
mb.append("You are able to edit the groupKey and groupAdminKey values that you use to connect to the groups server.  They are held locally and do not affect other users of the group.  You can also share these keys with others so that they can participate in the group.");
mb.append("</font>");
mb.append("<br>");
mb.append("<br>");

mb.append("<table cellpadding=5 cellspacing=2 width=100% border=0>");

mb.append("<form action=groups-edit.log method=post>");
mb.append("<input type=hidden name=groupsubscriptionid value='"+groupsubscriptionid+"'>");
mb.append("<input type=hidden name=action value='edit'>");

mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>");
mb.append("Group Name");
mb.append("</b>");
mb.append("</font>");
mb.append("<br>");
mb.append("<font face=arial size=-2>");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=+1>");
mb.append("<b>");
mb.append(groupName);
mb.append("</b>");
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>");
mb.append("Group Description");
mb.append("</b>");
mb.append("</font>");
mb.append("<br>");
mb.append("<font face=arial size=-2>");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=-2>");
mb.append(groupDescription);
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");


mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>");
mb.append("groupKey");
mb.append("</b>");
mb.append("</font>");
mb.append("<br>");
mb.append("<font face=arial size=-2>");
mb.append("You get a groupKey by being the creator of a group or by being invited into an group.  If the groupKey changes you can update it here.");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=-2>");
mb.append("<input type=text name=groupkey value=\""+reger.core.Util.cleanForHtml(groupKey)+"\" size=10 maxlength=255>");
if (!groupKeyIsValid){
    mb.append("<img src='../images/yellow-alert.gif' width='25' height='25' alt='' border='0' align=middle>");
    mb.append("<br>");
    mb.append("This groupKey is not valid.");
    if (viewingEntriesRequiresGroupKey){
        mb.append("<br>");
        mb.append("You are not able to view entries in this group.");
    }
    if (addingEntriesRequiresGroupKey){
        mb.append("<br>");
        mb.append("You are not able to add entries to this group.");
    }
    if (!addingEntriesRequiresGroupKey && !viewingEntriesRequiresGroupKey){
        mb.append("<br>");
        mb.append("However, because the group is open to the public for viewing and adding, you don't need a groupKey.");
    }
}
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>");
mb.append("groupAdminKey");
mb.append("</b>");
mb.append("</font>");
mb.append("<br>");
mb.append("<font face=arial size=-2>");
mb.append("You get a groupAdminKey by being the creator of a group.  The creator may give you the groupAdminKey so that you can help maintain the group.");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=-2>");
mb.append("<input type=text name=groupadminkey value=\""+reger.core.Util.cleanForHtml(groupAdminKey)+"\" size=10 maxlength=255>");
if (!groupAdminKeyIsValid){
    mb.append("<img src='../images/yellow-alert.gif' width='25' height='25' alt='' border='0'>");
    mb.append("<br>");
    mb.append("This groupAdminKey is not valid.<br>You are not able to administer this group.");
}
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");


mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>Viewing Entries</b>");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=-2>");
if (!viewingEntriesRequiresGroupKey){
    mb.append("<input type=hidden name=viewingentriesrequiresgroupkey value='0'>");
    mb.append("<img src='../images/icon-public.gif' width='16' height='16' alt='' border='0'> Public, anybody on the web.");
} else {
    mb.append("<input type=hidden name=viewingentriesrequiresgroupkey value='1'>");
    mb.append("<img src='../images/icon-private.gif' width='16' height='16' alt='' border='0'> Private, only with groupKey.");
}
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>Adding Entries</b>");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=-2>");
if (!addingEntriesRequiresGroupKey){
    mb.append("<input type=hidden name=addingentriesrequiresgroupkey value='0'>");
    mb.append("<img src='../images/icon-public.gif' width='16' height='16' alt='' border='0'> Public, anybody on the web.");
} else {
    mb.append("<input type=hidden name=addingentriesrequiresgroupkey value='1'>");
    mb.append("<img src='../images/icon-private.gif' width='16' height='16' alt='' border='0'> Private, only with groupKey.");
}
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");


mb.append("<tr>");
mb.append("<td valign=top bgcolor=#e6e6e6 align=right>");
mb.append("<font face=arial size=-1>");
mb.append("<b>");
mb.append("");
mb.append("</b>");
mb.append("</font>");
mb.append("<br>");
mb.append("<font face=arial size=-2>");
mb.append("</font>");
mb.append("</td>");
mb.append("<td valign=top>");
mb.append("<font face=arial size=-2>");
mb.append("<input type=submit value='Save and Continue'>");
mb.append("</font>");
mb.append("</td>");
mb.append("</tr>");

mb.append("</form>");

mb.append("</table>");
mb.append(reger.ui.BubbleBox.end(pageProps.pathToAppRoot));




%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
    StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/

//sc.append("This is a ");
//sc.append("side column section.");
%>


<%@ include file="../globalfooter.jsp" %>
