<%@ page import="reger.core.db.Db,
                 reger.core.Util,
                 java.util.TreeMap,
                 reger.mega.FieldType,
                 reger.mega.FieldLayout,
                 reger.MegaLogType"%>
<%@ page import="org.apache.commons.fileupload.FileItem"%>
<%@ page import="org.jdom.Document"%>
<%@ page import="reger.core.ValidationException"%>
<%@ page import="org.jdom.input.SAXBuilder"%>
<%@ page import="java.io.InputStream"%>
<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.ADMINSITE;
pageProps.title = "<img src='../images/icon-log-type-med-notext.gif' align=top> Customize Log Type";
pageProps.isPasswordProtected = true;
pageProps.navButtonName = "logslogtypes";
pageProps.aclObjectName = "CUSTOMIZELOG";
pageProps.trafficType=reger.Vars.TRAFFICTYPEADMINMISC;
pageProps.pathToAppRoot="../";
//pageProps.isLogidRequired=true;
/*----------------------------------------------------*/
%>

<%@ include file="../globalheader.jsp" %>

<%
/*----------------------------------------------------*/
/*                  Main Body                         */
    StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/

//Get the multipart/encoded data from the form
reger.Upload upload = new reger.Upload(request);

//Set pageProps.action
if (upload.requestParams.get("action")!=null){
    pageProps.action = String.valueOf(upload.requestParams.get("action"));
}


//set navtab
if (pageProps.action.equals("startadd")){
    pageProps.navButtonName = "logsnewlogtype";
    pageProps.title = "Create a New Log Type";
    mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEINFO, pageProps.pathToAppRoot, "Log types are different than logs.  Sometimes we don't have a log to fit your needs.  Like, say, llama racing.  There are specific types of data that llama racers like to track but we don't have a llama racing log type.   Luckily, you can create a custom llama racing log type on your own.  Or any other log type for that matter.<br><br>First, click 'Create a New Custom Log Type' below and give your log type a name.  Next, choose to give it some custom activity-specific data fields... whatever it is you want to track, chart and graph."));
      
}


String isRequired;

//Make sure we have an eventtypeid
int eventtypeid=-1;
if (upload.requestParams.get("eventtypeid")!=null && !upload.requestParams.get("eventtypeid").toString().equals("") && reger.core.Util.isinteger(upload.requestParams.get("eventtypeid").toString())){
    eventtypeid=Integer.parseInt(upload.requestParams.get("eventtypeid").toString());
}

//Create a megalogtype
MegaLogType megaLogType = new MegaLogType(eventtypeid);

//Get some request vars if they're there
if (upload.requestParams.get("megalogname")!=null && !upload.requestParams.get("megalogname").toString().equals("")){
    megaLogType.setMegalogname(upload.requestParams.get("megalogname").toString());
}
if (upload.requestParams.get("description")!=null && !upload.requestParams.get("description").toString().equals("")){
    megaLogType.setDescription(request.getParameter("description"));
}
if (upload.requestParams.get("showlocation")!=null && !upload.requestParams.get("showlocation").toString().equals("")){
    if(upload.requestParams.get("showlocation").toString().equals("1")){
        megaLogType.setShowlocation(true);
    } else {
        megaLogType.setShowlocation(false);
    }
}
if (upload.requestParams.get("showonhomepage")!=null && !upload.requestParams.get("showonhomepage").toString().equals("")){
    if(upload.requestParams.get("showonhomepage").toString().equals("1")){
        megaLogType.setShowonhomepage(true);
    } else {
        megaLogType.setShowonhomepage(false);
    }
}
if (upload.requestParams.get("isprivate")!=null && !upload.requestParams.get("isprivate").toString().equals("")){
    if(upload.requestParams.get("isprivate").toString().equals("1")){
        megaLogType.setIsprivate(true);
    } else {
        megaLogType.setIsprivate(false);
    }
}


if (!pageProps.action.equals("endadd") && !pageProps.action.equals("startadd")){
    //Make sure this is a valid logtype for the user to be editing, and if this is valid
    //-----------------------------------
    //-----------------------------------
        String[][] rstCheckLog= Db.RunSQL("SELECT accountuserid FROM megalogtype WHERE eventtypeid='"+ eventtypeid +"'");
    //-----------------------------------
    //-----------------------------------
    if (rstCheckLog!=null && rstCheckLog.length>0){
        if (!rstCheckLog[0][0].equals(String.valueOf(userSession.getAccountuser().getAccountuserid()))) {
            out.println("<font face=arial size=+3 color=red>Sorry. That log can't be edited.</font>");
            return;
        }
    } else {
        out.println("<font face=arial size=+3 color=red>Sorry. That log can't be edited.</font>");
        return;
    }
}



if (pageProps.action.equals("endadd") || pageProps.action.equals("go")){
    //Save the type
    megaLogType.setAccountuserid(userSession.getAccountuser().getAccountuserid());
    megaLogType.save();
    eventtypeid=megaLogType.getEventtypeid();
    //Create a new log of this type
    reger.nestednav.NestedNavCollection collection = userSession.getAccount().getNestedNavCollection();
    reger.nestednav.NestedNavItem[] topLevelNavItems = collection.getAllChildrenApplyNoPermissions(new reger.nestednav.NestedNavItemBase());
    int currentMaxOrder = reger.nestednav.NestedNavCollection.getMaxOrder(topLevelNavItems);

    //Use the current max order in the account to calculate the newLogOrder for this log
    int newLogOrder = currentMaxOrder + 1;

    //Insert the new log
    //-----------------------------------
    //-----------------------------------
    int newlogid = Db.RunSQLInsert("INSERT INTO megalog(accountid, name, eventtypeid, logaccess, showonhomepage, nestednavparenttype, nestednavparentid, nestednavorder) VALUES('"+ userSession.getAccount().getAccountid() +"', '"+reger.core.Util.cleanForSQL(megaLogType.getMegalogname())+"', '"+ megaLogType.getEventtypeid() +"', '"+reger.Vars.LOGACCESSPUBLIC+"', '"+reger.core.Util.booleanAsSQLText(megaLogType.getShowonhomepage())+"', '0', '0', '"+newLogOrder+"')");
    //-----------------------------------
    //-----------------------------------


    //Handle uploaded schemas
    FileItem[] fileItems = upload.getFileItems();
    if (fileItems!=null && fileItems.length>0){
        mb.append("<br>Processing uploaded file.<br>");
        for (int i = 0; i < fileItems.length; i++) {
            FileItem fileItem = fileItems[i];
            InputStream fileStream = fileItem.getInputStream();
            try{
                //Create an XML doc from the uploaded file
                SAXBuilder sb = new SAXBuilder();
                Document doc = sb.build(fileStream);
                //Output some visibility to the screen
                mb.append(reger.xml.JdomNodeLister.listNodes(doc));
                //Create a log type
                reger.xml.LogTypeCreator.createFromXMLSchema(doc, megaLogType);

            } catch (ValidationException e){
                mb.append("<br>Error creating log type:" + e.getErrorsAsSingleString());
                reger.core.Debug.debug(3, "logs-type-properties", e.getErrorsAsSingleString());
            } catch (Exception e){
                mb.append("<br>Error parsing doc:" + e.getMessage());
                reger.core.Debug.debug(3, "logs-type-properties", e);
            }
        }
    }



    //Important to refresh the LogCache object after megalog changes
    LogCache.flushByLogid(newlogid);

    //Make sure the user who added the log can view it.
    userSession.getAccountuser().grantLogAccess(newlogid);

    //Repopulate the object
    userSession.getAccount().refresh();
    //Redirect
    response.sendRedirect("logs-type-list.log?msg=logtypeadded&neweventtypeid=" + megaLogType.getEventtypeid() + "&newlogid=" + newlogid);
    return;
}






//Display any error messages
//if (!errortext.equals("")){
//    mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, errortext));
//}

//Log Header start
String currentNavButtonName = "logs-type-properties";
%>
<%@ include file="logs-header.jsp" %>
<%
//Log Header end

//Start the page display



mb.append("<form action='logs-type-properties.log' method=post enctype='multipart/form-data'>");
if (pageProps.action.equals("startadd") || pageProps.action.equals("endadd")){
    mb.append("<input type=hidden name=action value=endadd>");
} else {
    mb.append("<input type=hidden name=action value=go>");
}

mb.append("<input type=hidden name=eventtypeid value="+eventtypeid+">");

mb.append("<table cellpadding=5 cellspacing=1 border=0 width=80% align=center>");


//Log type-specific fields
mb.append("<tr>");
mb.append("<td bgcolor=#cccccc align=left colspan=2>");
mb.append("<font face=arial size=+1><strong>Log Type Properties</strong></font>");
mb.append("</td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td valign=top align=right width=50% bgcolor='#eeeeee'><font face=arial size=-1><strong>Log Type Name:</strong></font><br><font face=arial size=-2><strong>This is not the name of your log on your site.  You are defining a log type here.</strong></font></td>");
mb.append("<td valign=top align=left><input type=text name=megalogname value=\""+reger.core.Util.cleanForHtml(megaLogType.getMegalogname())+"\"></td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td valign=top align=right bgcolor='#eeeeee'><font face=arial size=-1><strong>Log Type Description:</strong></font></td>");
mb.append("<td valign=top align=left><textarea name=description cols='35' rows='2'>"+megaLogType.getDescription()+"</textarea></td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td bgcolor='#eeeeee' valign=top align=right>");
mb.append("<font face=arial size=-1><strong>Show Location</strong></font><br><font face=arial size=-2><strong>Does this log type need to have locations associated with it?</strong></font></td>");
mb.append("<td bgcolor='#ffffff' valign=top align=left>");
//Radio Control
String showlocationTxt = "1";
if (!megaLogType.getShowlocation()){
    showlocationTxt = "0";
}
TreeMap radiosShowlocation=new TreeMap();
radiosShowlocation.put("0","No");
radiosShowlocation.put("1","Yes (Recommended)");
mb.append(reger.formControl.radioList(radiosShowlocation, showlocationTxt, "showlocation", "vertical"));
//End Radio Control
mb.append("</td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td bgcolor='#eeeeee' valign=top align=right>");
mb.append("<font face=arial size=-1><strong>Private Log Type?</strong></font><br><font face=arial size=-2><strong>Determines whether or not this log type is shared with the community.  By sharing it with the community you allow others to use your log type to create log entries of their own.  You can send messages to anybody who uses your log type as well as view any public entries that they make using your log type.</strong></font></td>");
mb.append("<td bgcolor='#ffffff' valign=top align=left>");
//Radio Control
TreeMap radiosIsPrivate=new TreeMap();
radiosIsPrivate.put("0","No");
radiosIsPrivate.put("1","Yes");
mb.append(reger.formControl.radioList(radiosIsPrivate, reger.core.Util.booleanAsSQLText(megaLogType.getIsprivate()), "isprivate", "vertical"));
//End Radio Control
mb.append("</td>");
mb.append("</tr>");

mb.append("<tr>");
mb.append("<td bgcolor='#eeeeee' valign=top align=right>");
mb.append("<font face=arial size=-1><strong>Visible On Homepage</strong></font><br><font face=arial size=-2><strong>Should entries from this log type appear on the main web log homepage?  This can be overridden at the individual log level.</strong></font></td>");
mb.append("<td bgcolor='#ffffff' valign=top align=left>");
//Radio Control
String showonhomepageTxt = "1";
if (!megaLogType.getShowonhomepage()){
    showonhomepageTxt = "0";
}
TreeMap radiosShowonhomepage=new TreeMap();
radiosShowonhomepage.put("0","No");
radiosShowonhomepage.put("1","Yes (Recommended)");
mb.append(reger.formControl.radioList(radiosShowonhomepage, showonhomepageTxt, "showonhomepage", "vertical"));
//End Radio Control
mb.append("</td>");
mb.append("</tr>");



mb.append("<tr>");
mb.append("<td bgcolor='#eeeeee' valign=top align=right>");
mb.append("<font face=arial size=-1><strong>(Optional) Upload XML Schema File</strong></font><br><font face=arial size=-2><strong>Advanced users can upload files in XML Schema format to jumpstart their datablog format.</strong></font></td>");
mb.append("<td bgcolor='#ffffff' valign=top align=left>");
mb.append("<input type=file name=file1>");
mb.append("<br><font face=arial size=-2>Optional</font>");
mb.append("</td>");
mb.append("</tr>");



//Save changes
mb.append("<tr>");
mb.append("<td bgcolor=#ffffff colspan=2 align=center><input type='submit' value='Save Log Type'></td>");
mb.append("</tr>");
mb.append("</form>");






mb.append("</table>");




mb.append("<br><br>");


//Log Footer start
%>
<%@ include file="logs-footer.jsp" %>
<%
//Log Footer end

%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
    StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/
//sc.append("This is a ");
//sc.append("side column section.");

%>


<%@ include file="../globalfooter.jsp" %>
