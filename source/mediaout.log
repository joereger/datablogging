<%

reger.core.Debug.debug(5, "mediaout.log", "Made it to mediaout.log top");

/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.PUBLICSITE;
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEIMAGE;
pageProps.pathToAppRoot="";
/*----------------------------------------------------*/
%>

<%
//Special case for images
if (request.getParameter("isthumbnail")!=null && request.getParameter("isthumbnail").equals("yes")){
    pageProps.trafficType=reger.Vars.TRAFFICTYPEDONTRECORD;
}
%>

<%@ include file="globalheader.jsp" %>
<%@ page import="java.io.*,
                 reger.core.db.Db,
                 reger.Media.MediaType,
                 reger.Media.MediaTypeFactory,
                 reger.core.db.Db" %>
<%@ page import="reger.core.Debug"%>
<%@ page import="reger.systemproperties.AllSystemProperties"%>
<%@ page import="org.apache.commons.io.FilenameUtils"%>

<%
/*----------------------------------------------------*/
/*                  Main Body                         */
        StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/


reger.core.Debug.debug(5, "mediaout.log", "Made it to mediaout.log<br>imageid=" + request.getParameter("imageid") + "<br>file="+request.getParameter("file"));

int bytesOutput = 0;
boolean showactualimage=false;
String fileName = reger.Vars.THUMBNAILGENERIC;
int imageid=0;
if (request.getParameter("imageid")!=null && reger.core.Util.isinteger(request.getParameter("imageid"))) {
    imageid=Integer.parseInt(request.getParameter("imageid"));
}
String imageSql = "image.imageid='-1'";
if (imageid>0){
    imageSql = "image.imageid='"+imageid+"'";
} else if (request.getParameter("file")!=null) {
    imageSql = "image.filename='"+reger.core.Util.cleanForSQL(FilenameUtils.normalize(request.getParameter("file")))+"'";
}

//-----------------------------------
//-----------------------------------
String[][] rstImageData= Db.RunSQL("SELECT logid, filename, image.eventid FROM image LEFT JOIN event ON image.eventid=event.eventid WHERE "+imageSql+" AND image.accountid='"+userSession.getAccount().getAccountid()+"'");
//-----------------------------------
//-----------------------------------
if (rstImageData!=null && rstImageData.length>0){
    for(int i=0; i<rstImageData.length; i++){
        fileName = rstImageData[i][1];
        if (reger.core.Util.isinteger(rstImageData[i][0])){
            pageProps.logProps.logid=Integer.parseInt(rstImageData[i][0]);
            showactualimage=userSession.getAccountuser().userCanViewLog(pageProps.logProps.logid);
        }
        if (!showactualimage){
            if (request.getParameter("entrykey")!=null){
                if (reger.Entry.checkEntryKey(request.getParameter("entrykey"), Integer.parseInt(rstImageData[0][2]))){
                    showactualimage = true;
                }
            }
        }
        //Lame hack to display profileimages
        if(!showactualimage){
            if (rstImageData[i][2].equals("0") || rstImageData[i][2].equals("")){
                showactualimage=true;
            }
        }
    }
}



if (request.getParameter("isthumbnail")!=null && request.getParameter("isthumbnail").equals("yes")) {
    fileName = FilenameUtils.normalize(FilenameUtils.normalize(FilenameUtils.getPath(fileName))+".thumbnails"+java.io.File.separator+FilenameUtils.getName(fileName));
}

reger.core.Debug.debug(5, "mediaout.log", "fileName="+fileName+"<br>showactualimage="+showactualimage);

File testimage = new File(userSession.getAccount().getPathToAccountFiles() + fileName);
if (!testimage.canRead()) {
    showactualimage=false;
}

try{

    // Use getOutputStream instead of getWriter
    ServletOutputStream outStream = response.getOutputStream();

    if (showactualimage){
        try{

            //Get the image file extension
            MediaType mt = MediaTypeFactory.getHandlerByFileExtension(FilenameUtils.getExtension(fileName));

            //Override the content type
            response.setContentType(mt.getMimeType());

            //Set the file name
            //See: http://www.onjava.com/pub/a/onjava/excerpt/jebp_3/index3.html
            String filenameToShow = FilenameUtils.getName(fileName);
            if (filenameToShow==null || filenameToShow.equals("")){
                filenameToShow = fileName;
            }
            response.setHeader("Content-Disposition", "attachment; filename=" + filenameToShow);



            // Creating a new FileInputStream object
            FileInputStream fis = new FileInputStream(testimage);

            if (fis != null){
                byte[] data = new byte[4096];
                try{
                    int bytesRead;
                    while ((bytesRead = fis.read(data)) != -1){
                        bytesOutput = bytesOutput + bytesRead;
                        outStream.write(data, 0, bytesRead);
                    }
                    fis.close();
                }catch (java.net.SocketException e){
                    //Do nothing... typically a ClientAbortException
                }catch (IOException e){
                    Debug.debug(5, "", "IO Exception attempting to read file: '" + fileName + "'<br>" + e.toString());
                    Debug.debug(5, "", e);
                }catch (Throwable e){
                    Debug.errorsave(e, "");
                }
            }

        } catch (IOException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (java.lang.IllegalStateException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (Exception e) {
            Debug.errorsave(e, "");
        }
    } else {
        //Show the placeholder error image
        String errorimagetodisplay=reger.Vars.ERRORIMAGE;
        try {
            response.setContentType("image/jpeg");
            //If this is a thumbnail request, give them the benefit of the doubt and display a file icon instead of an error message
            if (request.getParameter("isthumbnail")!=null && request.getParameter("isthumbnail").equals("yes")) {
                errorimagetodisplay=reger.Vars.THUMBNAILGENERIC;
            }
            FileInputStream fis = new FileInputStream(errorimagetodisplay);
            if (fis != null){
                byte[] data = new byte[4096];
                try{
                    int bytesRead;
                    while ((bytesRead = fis.read(data)) != -1){
                        bytesOutput = bytesOutput + bytesRead;
                        outStream.write(data, 0, bytesRead);
                    }
                    fis.close();
                }catch (IOException e){
                    //Do nothing unless debugging
                    Debug.debug(5, "", "IO Exception attempting to read file.  Error occurred on mediaout.log: '" + reger.Vars.ERRORIMAGE + "'<br>" + e.toString());
                    Debug.debug(5, "", e);
                }catch (Throwable e){
                    Debug.errorsave(e, "");
                }
            }

        } catch (IOException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (java.lang.IllegalStateException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (Exception e) {
            if (!e.toString().substring(0, 21).equals("ClientAbortException:")){
                Debug.errorsave(e, "");
            } else {
                Debug.debug(5, "", e);
            }
        }
    }

    //Close the output stream
    outStream.close();

} catch (java.net.SocketException e){
    //This is a specific error that happens when users abort their connection.
    Debug.debug(5, "", e);
}

Debug.debug(5, "mediaout.log", "bytesOutput=" + bytesOutput + "<br>fileName=" + fileName);

//---------------------------------------------------------------
//Record traffic.  Use pageProps.trafficType
boolean isSuperCookieOn = false;
if (userSession.getAccount()!=null){
    isSuperCookieOn=reger.core.Util.isSupercookieOn(request, userSession.getAccount().getAccountid());
}
//Get logid
int thisLogid = pageProps.logProps.logid;
//Accountid
int tmpAccountid=0;
if (userSession.getAccount()!=null){
    tmpAccountid = userSession.getAccount().getAccountid();
}
//Bandwidth
int bandwidth = bytesOutput;
//Put into cache
try{
    reger.TrafficHit trafficHit = new reger.TrafficHit(request, pageProps.logProps.logid, tmpAccountid, pageProps.trafficType, userSession.getPl().getPlid(), userSession.getAccount().getSiteRootUrl(userSession), bandwidth, isSuperCookieOn);
    reger.cache.html.TrafficHitCache.addTrafficHit(trafficHit);
} catch (Exception e){
    Debug.errorsave(e, "", "globalfooter.jsp");
}
//End record traffic
//----------------------------------------------------------------

%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
        StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/

//sc.append("This is a ");
//sc.append("side column section.");
%>



