<%

reger.core.Debug.debug(3, "mediaout.log", "Made it to mediaout.log top");

/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.PUBLICSITE;
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEIMAGE;
pageProps.pathToAppRoot="";
/*----------------------------------------------------*/
%>

<%
//Special case for images
if (request.getParameter("isthumbnail")!=null && request.getParameter("isthumbnail").equals("yes")){
    pageProps.trafficType=reger.Vars.TRAFFICTYPEDONTRECORD;
}
%>

<%@ include file="globalheader.jsp" %>
<%@ page import="java.io.*,
                 reger.core.db.Db,
                 reger.Media.MediaType,
                 reger.Media.MediaTypeFactory,
                 reger.core.db.Db" %>
<%@ page import="reger.core.Debug"%>

<%
/*----------------------------------------------------*/
/*                  Main Body                         */
        StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/


reger.core.Debug.debug(3, "mediaout.log", "Made it to mediaout.log imageid=" + request.getParameter("imageid"));

int bytesOutput = 0;

String fileName = reger.Vars.THUMBNAILGENERIC;
String baseFileName = "";
String thumbnailpath="";
String originalfilename = "";
int imageid=-1;
//Set to false to be safe
boolean showactualimage=false;

if (request.getParameter("isProfileImage")==null || !request.getParameter("isProfileImage").equals("true")){
    //Make sure the image exists in the database and make sure the user has access to it
    if (request.getParameter("imageid")!=null && reger.core.Util.isinteger(request.getParameter("imageid"))) {
        //Get the logid and name of the image
        //-----------------------------------
        //-----------------------------------
        String[][] rstImageData= Db.RunSQL("SELECT image, logid, originalfilename, event.eventid FROM image, event WHERE image.imageid='"+request.getParameter("imageid")+"' AND image.eventid=event.eventid AND event.accountid='"+userSession.getAccount().getAccountid()+"'");
        //-----------------------------------
        //-----------------------------------
        if (rstImageData!=null && rstImageData.length>0){
            for(int i=0; i<rstImageData.length; i++){
                //Get the filename
                baseFileName = rstImageData[i][0];
                //Set the logid
                pageProps.logProps.logid=Integer.parseInt(rstImageData[i][1]);
                //Check to see if the user can view this logid
                showactualimage=userSession.getAccountuser().userCanViewLog(pageProps.logProps.logid);
                //Originalfilename
                originalfilename = rstImageData[i][2];
                //Now, check for the entrykey
                if (!showactualimage){
                    if (request.getParameter("entrykey")!=null){
                        if (reger.Entry.checkEntryKey(request.getParameter("entrykey"), Integer.parseInt(rstImageData[0][3]))){
                            showactualimage = true;
                        }
                    }
                }
            }
        }
    }
} else {
    //It's a profile image
    if (request.getParameter("imageid")!=null && reger.core.Util.isinteger(request.getParameter("imageid"))) {
        //Must make sure however... otherwise anybody can get to all images just by typing isprofileimage=true into querystring
        //-----------------------------------
        //-----------------------------------
        String[][] rstProf= Db.RunSQL("SELECT imageid, eventid, accountuserid, image FROM image WHERE imageid='"+request.getParameter("imageid")+"'");
        //-----------------------------------
        //-----------------------------------
        if (rstProf!=null && rstProf.length>0){
            if (rstProf[0][1].equals("0") && !rstProf[0][2].equals("0")){
                //Get the filename
                baseFileName = rstProf[0][3];
                //I now know that this is an image without an associated eventid (a profile image) and it has an accountuserid
                showactualimage = true;
            }
        }
    }
}

//Do the pathing for thumbnails, etc
if (showactualimage){
    //Set the thumbnail path if we need to
    if (request.getParameter("isthumbnail")!=null && request.getParameter("isthumbnail").equals("yes")) {
        thumbnailpath="thumbnails\\";
    }
    //Set the filename appropriately
    fileName = reger.systemproperties.AllSystemProperties.getProp("PATHUPLOADMEDIA") + thumbnailpath + baseFileName;
}

//Make sure the image exists on the filesystem
File testimage = new File(fileName);
if (!testimage.canRead()) {
    showactualimage=false;
}

try{

    // Use getOutputStream instead of getWriter
    ServletOutputStream outStream = response.getOutputStream();

    if (showactualimage){
        try{
            //Get the image file extension
            String extension = reger.core.Util.getFilenameExtension(baseFileName);

            //Get the image file extension
            MediaType mt = MediaTypeFactory.getHandlerByFileExtension(extension);

            //Override the content type
            response.setContentType(mt.getMimeType());

            //Set the file name
            //See: http://www.onjava.com/pub/a/onjava/excerpt/jebp_3/index3.html
            String filenameToShow = originalfilename;
            if (filenameToShow.equals("")){
                filenameToShow = baseFileName;
            }
            response.setHeader("Content-Disposition", "attachment; filename=" + filenameToShow);



            // Creating a new FileInputStream object
            FileInputStream fis = new FileInputStream(fileName);

            if (fis != null){
                byte[] data = new byte[4096];
                try{
                    int bytesRead;
                    while ((bytesRead = fis.read(data)) != -1){
                        bytesOutput = bytesOutput + bytesRead;
                        outStream.write(data, 0, bytesRead);
                    }
                    fis.close();
                }catch (java.net.SocketException e){
                    //Do nothing... typically a ClientAbortException
                }catch (IOException e){
                    Debug.debug(5, "", "IO Exception attempting to read file: '" + fileName + "'<br>" + e.toString());
                    Debug.debug(5, "", e);
                }catch (Throwable e){
                    Debug.errorsave(e, "");
                }
            }

        } catch (IOException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (java.lang.IllegalStateException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (Exception e) {
            Debug.errorsave(e, "");
        }
    } else {
        //Show the placeholder error image
        String errorimagetodisplay=reger.Vars.ERRORIMAGE;
        try {
            response.setContentType("image/jpeg");
            //If this is a thumbnail request, give them the benefit of the doubt and display a file icon instead of an error message
            if (request.getParameter("isthumbnail")!=null && request.getParameter("isthumbnail").equals("yes")) {
                errorimagetodisplay=reger.Vars.THUMBNAILGENERIC;
            }
            FileInputStream fis = new FileInputStream(errorimagetodisplay);
            if (fis != null){
                byte[] data = new byte[4096];
                try{
                    int bytesRead;
                    while ((bytesRead = fis.read(data)) != -1){
                        bytesOutput = bytesOutput + bytesRead;
                        outStream.write(data, 0, bytesRead);
                    }
                    fis.close();
                }catch (IOException e){
                    //Do nothing unless debugging
                    Debug.debug(5, "", "IO Exception attempting to read file.  Error occurred on mediaout.log: '" + reger.Vars.ERRORIMAGE + "'<br>" + e.toString());
                    Debug.debug(5, "", e);
                }catch (Throwable e){
                    Debug.errorsave(e, "");
                }
            }

        } catch (IOException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (java.lang.IllegalStateException e){
            //This is a specific error that happens when users abort their connection.
            Debug.debug(5, "", e);
        } catch (Exception e) {
            if (!e.toString().substring(0, 21).equals("ClientAbortException:")){
                Debug.errorsave(e, "");
            } else {
                Debug.debug(5, "", e);
            }
        }
    }

    //Close the output stream
    outStream.close();

} catch (java.net.SocketException e){
    //This is a specific error that happens when users abort their connection.
    Debug.debug(5, "", e);
}

Debug.debug(5, "", "mediaout.log<br>bytesOutput=" + bytesOutput + "<br>baseFileName=" + baseFileName);

//---------------------------------------------------------------
//Record traffic.  Use pageProps.trafficType
boolean isSuperCookieOn = false;
if (userSession.getAccount()!=null){
    isSuperCookieOn=reger.core.Util.isSupercookieOn(request, userSession.getAccount().getAccountid());
}
//Get logid
int thisLogid = pageProps.logProps.logid;
//Accountid
int tmpAccountid=0;
if (userSession.getAccount()!=null){
    tmpAccountid = userSession.getAccount().getAccountid();
}
//Bandwidth
int bandwidth = bytesOutput;
//Put into cache
try{
    reger.TrafficHit trafficHit = new reger.TrafficHit(request, pageProps.logProps.logid, tmpAccountid, pageProps.trafficType, userSession.getPl().getPlid(), userSession.getSiteRootUrl(), bandwidth, isSuperCookieOn);
    reger.cache.TrafficHitCache.addTrafficHit(trafficHit);
} catch (Exception e){
    Debug.errorsave(e, "", "globalfooter.jsp");
}
//End record traffic
//----------------------------------------------------------------

%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
        StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/

//sc.append("This is a ");
//sc.append("side column section.");
%>



