<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.PUBLICSITE;
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEDONTRECORD;
pageProps.pathToAppRoot="";
/*----------------------------------------------------*/
%>

<%@ include file="globalheader.jsp" %>

<%@ page import="java.io.IOException,
                 reger.core.db.Db,
                 java.awt.*,
                 java.text.DecimalFormat,
                 reger.mega.FieldType,
                 java.awt.image.BufferedImage,
                 org.jfree.data.xy.XYSeriesCollection,
                 org.jfree.data.xy.XYSeries,
                 org.jfree.data.xy.XYDataset,
                 org.jfree.chart.renderer.xy.StandardXYItemRenderer" %>
<%@ page import="java.io.OutputStream" %>
<%@ page import="javax.servlet.ServletException" %>
<%@ page import="javax.servlet.http.HttpServlet" %>
<%@ page import="javax.servlet.http.HttpServletRequest" %>
<%@ page import="javax.servlet.http.HttpServletResponse" %>
<%@ page import="org.jfree.chart.*" %>
<%@ page import="org.jfree.chart.plot.*" %>
<%@ page import="org.jfree.chart.axis.*" %>
<%@ page import="org.jfree.data.*" %>
<%@ page import="org.jfree.data.time.*" %>
<%@ page import="org.jfree.data.Range.*" %>
<%@ page import="org.jfree.chart.renderer.*" %>
<%@ page import="org.jfree.chart.labels.*" %>


<%
//@todo Verify that there is ample password protection on charts for private logs, draft entries, etc.

//Create our output stream to the browser
OutputStream outStream = response.getOutputStream();

//Imageid
int imageid=-1;
if (request.getParameter("imageid")!=null && reger.core.Util.isinteger(request.getParameter("imageid"))){
    imageid=Integer.parseInt(request.getParameter("imageid"));
}

//Imageidcompare
int imageidcompare=-1;
if (request.getParameter("imageidcompare")!=null && reger.core.Util.isinteger(request.getParameter("imageidcompare"))){
    imageidcompare=Integer.parseInt(request.getParameter("imageidcompare"));
}

//xaxis
int xaxisColumn = 0;
if (request.getParameter("xaxis")!=null && reger.core.Util.isinteger(request.getParameter("xaxis"))){
    xaxisColumn = Integer.parseInt(request.getParameter("xaxis"));
}

//yaxis
int yaxisColumn = 1;
if (request.getParameter("yaxis")!=null && reger.core.Util.isinteger(request.getParameter("yaxis"))){
    yaxisColumn = Integer.parseInt(request.getParameter("yaxis"));
}


try {

    //This holds multiple sets of data from the database
    String[][][] rstPolar = new String[1][][];

    //Get all data for this HRM file into a single double string array
    //-----------------------------------
    //-----------------------------------
    String[][] rstPolarOriginal= Db.RunSQL("SELECT timeinseconds, heartrate, speed, cadence, altitude, power, leftpowerbalance FROM polarhrm, polarhrmdata WHERE polarhrm.imageid='"+imageid+"' AND polarhrm.polarhrmid=polarhrmdata.polarhrmid ORDER BY timeinseconds ASC");
    //-----------------------------------
    //-----------------------------------
    //Dump the data in
    rstPolar[0] = rstPolarOriginal;
    //reger.core.Util.logDoubleStringArrayToDb("rstPolar[0]", rstPolar[0]);


    if (imageidcompare>0){
        //And the comparison data
        //-----------------------------------
        //-----------------------------------
        String[][] rstPolarComparison= Db.RunSQL("SELECT timeinseconds, heartrate, speed, cadence, altitude, power, leftpowerbalance FROM polarhrm, polarhrmdata WHERE polarhrm.imageid='"+imageidcompare+"' AND polarhrm.polarhrmid=polarhrmdata.polarhrmid ORDER BY timeinseconds ASC");
        //-----------------------------------
        //-----------------------------------
        //Have to resize the array and dump the data in
        rstPolar = new String[2][][];
        rstPolar[0] = rstPolarOriginal;
        rstPolar[1] = rstPolarComparison;

        //reger.core.Util.logtodb("Got second set of data.");
        //reger.core.Util.logDoubleStringArrayToDb("rstPolar[0]", rstPolar[1]);
    }







    //Column titles & colors
    String[] colTitles = new String[7];
    java.awt.Color[] colColors = new java.awt.Color[7];

    colTitles[0]="Time";
    colColors[0] = java.awt.Color.RED;

    colTitles[1]="Heart Rate";
    colColors[1] = java.awt.Color.RED;

    colTitles[2]="Speed";
    colColors[2] = java.awt.Color.BLUE;

    colTitles[3]="Cadence";
    colColors[3] = java.awt.Color.GREEN;

    colTitles[4]="Altitude";
    colColors[4] = java.awt.Color.BLACK;

    colTitles[5]="Power";
    colColors[5] = java.awt.Color.ORANGE;

    colTitles[6]="L/R Balance";
    colColors[6] = java.awt.Color.YELLOW;

    //Setup the title vars
    String xAxisTitle=colTitles[Integer.parseInt(request.getParameter("xaxis"))];


    //Create the title, etc
    String chartTitle="";

    //A collection of xy series for the original imageid
    java.util.Vector vectorXyseriescollection = new java.util.Vector();
    java.util.Vector actualColors = new java.util.Vector();
    java.util.Vector actualTitles = new java.util.Vector();

    //A collection of xy series for the original imageidComparison
    java.util.Vector vectorXyseriescollectionComparison = new java.util.Vector();
    java.util.Vector actualColorsComparison = new java.util.Vector();
    java.util.Vector actualTitlesComparison = new java.util.Vector();

    //Loop on imageids
    for (int k = 0; k < rstPolar.length; k++) {

        //Start collecting data for one imageid
        //Where loop start - Creates an array of XYSeriescollections
        //A column is only added if it is chosen on screen
        for(int j=0; j<rstPolar[k][j].length; j++){
            if (request.getParameter("yaxis-"+j)!=null && request.getParameter("yaxis-"+j).equals("1")){
                //Our data series
                XYSeries xyseries = new XYSeries(colTitles[j], true, true);
                TimeSeries timeseries = new TimeSeries(colTitles[j], Second.class);


                //Set the y axis
                yaxisColumn = j;

                //Go through the array and get what you need
                if (rstPolar[k]!=null && rstPolar[k].length>0){
                    for(int i=0; i<rstPolar[k].length; i++){
                        xyseries.add(Double.parseDouble(rstPolar[k][i][xaxisColumn]), Double.parseDouble(rstPolar[k][i][yaxisColumn]));
                        //Only add if xaxis is time
                        if (xaxisColumn==0){
                            Second sec = new Second(Integer.parseInt(rstPolar[k][i][xaxisColumn]), 0, 0, 1, 1, 1970);
                            timeseries.add(sec, Double.parseDouble(rstPolar[k][i][yaxisColumn]));
                            //reger.core.Util.logtodb("Data added to timeseries." + sec.toString());
                         }
                    }
                }

                //Add to chart series
                XYSeriesCollection xyseriescollection = new XYSeriesCollection();
                xyseriescollection.addSeries(xyseries);
                TimeSeriesCollection timeseriescollection = new TimeSeriesCollection();
                timeseriescollection.addSeries(timeseries);

                //Add to the vector
                //It's the base imageid
                if (k==0){
                    if (xaxisColumn>0){
                        vectorXyseriescollection.add(xyseriescollection);
                    } else {
                        vectorXyseriescollection.add(timeseriescollection);
                    }
                    actualColors.add(colColors[j]);
                    actualTitles.add(colTitles[j]);
                //It's the comparison imageid
                } else {
                    if (xaxisColumn>0){
                        vectorXyseriescollectionComparison.add(xyseriescollection);
                    } else {
                        vectorXyseriescollectionComparison.add(timeseriescollection);
                    }
                    actualColorsComparison.add(colColors[j]);
                    actualTitlesComparison.add(colTitles[j]);
                }

            }
        }
        //Done collecting data for one imageid
    }

    //So, we now have our data series in a vector.  It's time to create a chart.
    JFreeChart chart = ChartFactory.createScatterPlot("", "", "", new XYSeriesCollection(), PlotOrientation.VERTICAL, true, true, false);

    //Above is just a placeholder chart that I can access outside of an if/then scope.
    //Now it's time to branch.  If we're doing a time series (xaxidColumn=0) then
    //we want to create individual plots for each series and then add them to the chart.
    //If it's a scatterplot, we just add many series to the chart.

    //Scatterplot -------------------------------------
    //-------------------------------------------------
    if (xaxisColumn>0){
        chart = ChartFactory.createScatterPlot(chartTitle, xAxisTitle, (String)actualTitles.get(0), (XYSeriesCollection)vectorXyseriescollection.get(0), PlotOrientation.VERTICAL, true, true, false);

        //Get its plot
        XYPlot plot = chart.getXYPlot();

        //Counts number of series added to plot
        int seriesCount = 0;



        //Do the original
        for (int i = 0; i < vectorXyseriescollection.size(); i++) {
            //Create a new axis
            NumberAxis additionalAxis = new NumberAxis((String)actualTitles.get(i));
            additionalAxis.setLabelPaint((java.awt.Color)actualColors.get(i));
            additionalAxis.setTickLabelPaint((java.awt.Color)actualColors.get(i));
            plot.setRangeAxis(seriesCount, additionalAxis);
            plot.setRangeAxisLocation(seriesCount, AxisLocation.TOP_OR_LEFT);
            //Create a new dataset
            XYDataset additionalDataset = new XYSeriesCollection();
            additionalDataset = (XYSeriesCollection)vectorXyseriescollection.get(i);
            plot.setDataset(seriesCount, additionalDataset);
            plot.mapDatasetToRangeAxis(seriesCount, seriesCount);
            //Create a new renderer
            StandardXYItemRenderer additionalRenderer = new StandardXYItemRenderer();
            additionalRenderer.setSeriesPaint(0, (java.awt.Color)actualColors.get(i));
            additionalRenderer.setPlotLines(false);
            additionalRenderer.setPlotShapes(true);
            Legend legend = chart.getLegend();
            if (legend instanceof StandardLegend) {
                StandardLegend sl = (StandardLegend) legend;
                //sl.setDisplaySeriesShapes(true);
            }
            plot.setRenderer(seriesCount, additionalRenderer);
            //Increment seriescount
            seriesCount=seriesCount+1;
            //Get the second dataset
            if (rstPolar.length>1){

                //Create a new axis
                //NumberAxis additionalAxis = new NumberAxis((String)actualTitles.get(i));
                //additionalAxis.setLabelPaint((java.awt.Color)actualColors.get(i));
                //additionalAxis.setTickLabelPaint((java.awt.Color)actualColors.get(i));
                //plot.setRangeAxis(seriesCount, additionalAxis);
                //plot.setRangeAxisLocation(seriesCount, AxisLocation.TOP_OR_LEFT);
                //Create a new dataset
                XYDataset additionalDataset1 = new XYSeriesCollection();
                additionalDataset1 = (XYSeriesCollection)vectorXyseriescollectionComparison.get(i);
                plot.setDataset(seriesCount, additionalDataset1);
                plot.mapDatasetToRangeAxis(seriesCount, i);
                //Create a new renderer
                StandardXYItemRenderer additionalRenderer2 = new StandardXYItemRenderer();
                additionalRenderer2.setSeriesPaint(0, (java.awt.Color.LIGHT_GRAY));
                additionalRenderer2.setPlotLines(false);
                additionalRenderer2.setPlotShapes(true);
                //Plot
                plot.setRenderer(seriesCount, additionalRenderer2);
                //Increment seriescount
                seriesCount=seriesCount+1;


            }
        }


    //Time Series -------------------------------------
    //-------------------------------------------------
    } else {
        chart = ChartFactory.createTimeSeriesChart(chartTitle, xAxisTitle, (String)actualTitles.get(0), (TimeSeriesCollection)vectorXyseriescollection.get(0), true, true, false);

        //An array of XYPlot
        java.util.Vector xyplots = new java.util.Vector();

        for (int i = 0; i < vectorXyseriescollection.size(); i++) {
            //Data
            XYDataset data1 = (TimeSeriesCollection)vectorXyseriescollection.get(i);
            //Renderer
            StandardXYItemRenderer renderer1 = new StandardXYItemRenderer();
            renderer1.setSeriesPaint(0, (java.awt.Color)actualColors.get(i));
            //Number axis
            NumberAxis rangeAxis1 = new NumberAxis((String)actualTitles.get(i));
            rangeAxis1.setLabelPaint((java.awt.Color)actualColors.get(i));
            rangeAxis1.setTickLabelPaint((java.awt.Color)actualColors.get(i));
            rangeAxis1.setAutoRangeIncludesZero(false);
            //Subplot
            XYPlot subplot1 = new XYPlot(data1, null, rangeAxis1, renderer1);
            //Get the second dataset
            if (rstPolar.length>1){
                //Data
                XYDataset data2 = (TimeSeriesCollection)vectorXyseriescollectionComparison.get(i);
                //Renderer
                StandardXYItemRenderer renderer2 = new StandardXYItemRenderer();
                renderer2.setSeriesPaint(0, (java.awt.Color.LIGHT_GRAY));
                //Subplot
                //XYPlot subplot1 = new XYPlot(data1, null, rangeAxis1, renderer1);
                subplot1.setDataset(1, data2);
                subplot1.mapDatasetToRangeAxis(1, i);
                subplot1.setRenderer(1, renderer2);
            }
            //Add the plot(s) to the xyplots Vector
            subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
            xyplots.add(subplot1);

        }

        //Parent plot...
        CombinedDomainXYPlot plot = new CombinedDomainXYPlot(new DateAxis("Time"));
        plot.setGap(10.0);
        //Add the subplots...
        for (int i = 0; i < xyplots.size(); i++) {
            XYPlot xyPlot = (XYPlot) xyplots.elementAt(i);
            plot.add(xyPlot, 1);
        }
        //Orientation
        plot.setOrientation(PlotOrientation.VERTICAL);


        //Create the chart
        chart = new JFreeChart(chartTitle, JFreeChart.DEFAULT_TITLE_FONT, plot, true);

    }



    //Chart bg color
    Color col1 = new Color(255, 255, 255);
    chart.setBackgroundPaint(col1);
    //Plot bg color
    Color col2 = new Color(250, 250, 250, 255);
    chart.getPlot().setBackgroundPaint(col2);


    //Output to browser
    response.setContentType("image/png");
    //response.setContentType("image/jpeg");
    //Chart size
    int chartwidth=950;
    int chartheight=600;


    //Write the chart as a PNG
    //ChartUtilities.writeChartAsPNG(outStream, chart, chartwidth, chartheight);


    //Create a bufferedimage from the chart
    BufferedImage bufImg = chart.createBufferedImage(chartwidth, chartheight);
    //Encode as a PNG
    byte[] imgBytes = ChartUtilities.encodeAsPNG(bufImg);
    //Write to the browser
    outStream.write(imgBytes);

    //Record the bytesOutput to the database
    int bytesOutput = imgBytes.length;
    reger.Bandwidth.addActivity(userSession, bytesOutput);
    reger.core.Util.debug(5, "graphpolarhrm.log<br>bytesOutput=" + bytesOutput);

    //ChartUtilities.writeChartAsJPEG(outStream, chart, chartwidth, chartheight);
    //Chart End
} catch (Exception e) {
    reger.core.Util.errorsave(e);
}

//Close the output stream
outStream.close();

%>