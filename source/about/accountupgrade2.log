<%@ page import="reger.core.licensing.License"%>
<%@ page import="java.util.Hashtable"%>
<%@ page import="reger.core.licensing.RegerLicensingApiClient"%>
<%@ page import="java.util.HashMap"%>
<%@ page import="reger.core.licensing.PriceCalculator"%>
<%@ page import="java.text.NumberFormat"%>
<%@ page import="java.text.DecimalFormat"%>
<%@ page import="reger.Account"%>
<%@ page import="reger.PrivateLabel"%>
<%
/*----------------------------------------------------*/
/*                  Page Config                       */
reger.pageFramework.PageProps pageProps = new reger.pageFramework.PageProps();
pageProps.siteSection=pageProps.MARKETINGSITE;
pageProps.title = "Account Upgrade";
pageProps.navButtonName = "aboutaccount-upgrade-2";
pageProps.isPasswordProtected = false;
pageProps.trafficType=reger.Vars.TRAFFICTYPEMARKETINGSITEMISC;
pageProps.pathToAppRoot="../";
pageProps.marketingSiteSection = pageProps.MARKETINGSITESECTIONMOREINFO;
/*----------------------------------------------------*/
%>

<%@ include file="../globalheader.jsp" %>




<%
/*----------------------------------------------------*/
/*                  Main Body                         */
        StringBuffer mb = new StringBuffer();
/*----------------------------------------------------*/


//Must have an accountid
Account account = null;
if (reger.core.Util.isinteger(request.getParameter("accountid"))){
    account = new Account(Integer.parseInt(request.getParameter("accountid")));
}

//Must have a plid
PrivateLabel pl = null;
if (reger.core.Util.isinteger(request.getParameter("plid"))){
    pl = new PrivateLabel(Integer.parseInt(request.getParameter("plid")));
}

//Both accountid and plid must be valid
if (account.getAccountid()<=0 || pl.getPlid()<=0){
    out.println(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, "Oops!  Invalid accountid and/or plid."));
    return;
}


//Validate incoming
String errortext = "";
long storagespace = 0;
if (request.getParameter("storagespace")!=null && reger.core.Util.isnumeric(request.getParameter("storagespace"))){
    storagespace = Long.parseLong(request.getParameter("storagespace"));
}
long maxbandwidth = 0;
if (request.getParameter("maxbandwidth")!=null && reger.core.Util.isnumeric(request.getParameter("maxbandwidth"))){
    maxbandwidth = Long.parseLong(request.getParameter("maxbandwidth"));
}
if (request.getParameter("storagespace")==null || request.getParameter("storagespace").equals("")){
    errortext = errortext + "<br>You must choose a storage limit.";
}
if (request.getParameter("maxbandwidth")==null || request.getParameter("maxbandwidth").equals("")){
    errortext = errortext + "<br>You must choose a maximum monthly bandwidth limit.";
}
if (request.getParameter("address1")==null || request.getParameter("address1").equals("")){
    errortext = errortext + "<br>You must provide an address1.";
}
if (request.getParameter("zip")==null || request.getParameter("zip").equals("")){
    errortext = errortext + "<br>You must provide a zip code.";
}
if (request.getParameter("name")==null || request.getParameter("name").equals("")){
    errortext = errortext + "<br>You must provide a name.";
}
if (request.getParameter("cardtype")==null || request.getParameter("cardtype").equals("")){
    errortext = errortext + "<br>You must choose a card type.";
}
if (request.getParameter("ccnum")==null || request.getParameter("ccnum").equals("")){
    errortext = errortext + "<br>You must enter your credit card number.";
}
if (request.getParameter("expirationmonth")==null || request.getParameter("expirationmonth").equals("")){
    errortext = errortext + "<br>You must select your expiration month.";
}
if (request.getParameter("expirationyear")==null || request.getParameter("expirationyear").equals("")){
    errortext = errortext + "<br>You must select your expiration year.";
}
if (request.getParameter("phone")==null || request.getParameter("phone").equals("")){
    errortext = errortext + "<br>You must enter a phone number.";
}
if (request.getParameter("email")==null || request.getParameter("email").equals("")){
    errortext = errortext + "<br>You must enter a valid email address.";
}

if (!errortext.equals("")){
    mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, errortext));
}


if (pageProps.action.equals("upgrade") && errortext.equals("")) {

    //Calculate the price
    double price = PriceCalculator.calculatePrice(pl.getBaseaccountprice(), pl.getPriceper100mbstorage(), pl.getPricepergbbandwidth(), storagespace, maxbandwidth);

    NumberFormat formatter = DecimalFormat.getInstance();
    formatter.setMinimumFractionDigits(2);
    formatter.setMaximumFractionDigits(2);

    //Create a license
    HashMap props = new HashMap();
    props.put(License.PROPSTRINGAMOUNT, String.valueOf(formatter.format(price)));
    props.put(License.PROPSTRINGISCHARGEDTOCREDITCARD, "1");
    props.put(License.PROPSTRINGISRECURRINGBILLING, "1");
    props.put(License.PROPSTRINGCHARGEEVERY, "1");
    props.put(License.PROPSTRINGCHARGEEVERYUNITS, String.valueOf(License.CHARGEEVERYMONTHS));
    props.put(License.PROPSTRINGLICENSETYPE, String.valueOf(License.LICENSETYPEACCOUNTSUBSCRIPTION));
    props.put(License.PROPSTRINGMAXBANDWIDTH, String.valueOf(maxbandwidth));
    props.put(License.PROPSTRINGMAXSPACEINBYTES, String.valueOf(storagespace));
    License proposedLicense = new License(null, props);

    //Call the licensing server
    Hashtable result = RegerLicensingApiClient.createLicense(account.getLicense().getEncryptedLicense(), proposedLicense.getEncryptedLicense(), request.getParameter("name"), request.getParameter("address1"), request.getParameter("address2"), request.getParameter("city"), request.getParameter("state"), request.getParameter("zip"), request.getParameter("country"), request.getParameter("ccnum"), request.getParameter("expirationmonth"), request.getParameter("expirationyear"), request.getParameter("phone"), request.getParameter("email"));

    //Display
    if (result.get("successful")!=null && ((String)result.get("successful")).equals("true")){
        mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPECOMPLETE, pageProps.pathToAppRoot, "Success!  Your account has been upgraded!"));
        mb.append("<br>");
    }
    if (result.get("errormessage")!=null && !((String)result.get("errormessage")).equals("")){
        mb.append(reger.InfoBox.get(reger.InfoBox.BOXTYPEERROR, pageProps.pathToAppRoot, "There has been an error: " + result.get("errormessage")));
        mb.append("<br>");
    }

    //Debug
    if (1==2){
        if (result.get("successful")!=null && !((String)result.get("successful")).equals("")){
            mb.append("successful="+result.get("successful")+"<br>");
            mb.append("<br>");
        } else {
            mb.append("successful=not returned<br>");
            mb.append("<br>");
        }
        if (result.get("errormessage")!=null && !((String)result.get("errormessage")).equals("")){
            mb.append("error="+result.get("errormessage")+"<br>");
            mb.append("<br>");
        }
    }


    if (result.get("encryptedlicense")!=null && !((String)result.get("encryptedlicense")).equals("")){
        License lic = new License(null, (String)result.get("encryptedlicense"));
        //Save the license to the account
        account.setEncryptedLicense(lic.getEncryptedLicense());

//        mb.append("expdategmt="+lic.getProperty(License.PROPSTRINGEXPDATEGMT)+"<br>");
//        mb.append("iscommercial="+lic.getProperty(License.PROPSTRINGISCOMMERCIAL)+"<br>");
//        mb.append("licensetype="+lic.getProperty(License.PROPSTRINGLICENSETYPE)+"<br>");
//        mb.append("<br>");
//        mb.append("<b>decryptedlicense</b><br>"+lic.getDecryptedLicense()+"<br>");
//        mb.append("<br>");
//        mb.append("<b>encryptedlicense</b><br>"+lic.getEncryptedLicense()+"<br>");
    } else {
        mb.append("Error creating license.  The license was empty.  Please try again.");
    }

}




%>

<%
/*----------------------------------------------------*/
/*                  Side Column                       */
        StringBuffer sc = new StringBuffer();
/*----------------------------------------------------*/


%>


<%@ include file="../globalfooter.jsp" %>

